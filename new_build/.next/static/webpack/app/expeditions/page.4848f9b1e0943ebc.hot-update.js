"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/expeditions/page",{

/***/ "(app-pages-browser)/./src/app/util/petHelper.js":
/*!***********************************!*\
  !*** ./src/app/util/petHelper.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper.js */ \"(app-pages-browser)/./src/app/util/helper.js\");\n\nvar helper = {\n    EXP_DMG_MOD: .1,\n    EXP_TIME_MOD: .05,\n    SYNERGY_MOD_STEP: .25,\n    EXP_TOKEN_MOD: 0.05,\n    SOUL_CLOVER_STEP: 0.25,\n    calculatePetBaseDamage: function(pet1, defaultRank) {\n        const rankCount = defaultRank ? defaultRank : pet1 === null || pet1 === void 0 ? void 0 : pet1.Rank;\n        const result = (pet1 === null || pet1 === void 0 ? void 0 : pet1.BaseDungeonDamage) * (1.0 + rankCount * 0.05);\n        return Number(result);\n    },\n    calculateBestHours: function(group, hours, tokenModifiers, combo) {\n        let clover;\n        let residueToken = (tokenModifiers === null || tokenModifiers === void 0 ? void 0 : tokenModifiers.residueToken) ? tokenModifiers.residueToken : 0;\n        //contains clover and other                 contains active (special) bonuses\n        let pd_token_bonus = tokenModifiers.data.ExpeditionTokenBonuses * tokenModifiers.data.ExpeditionResourceBonuses;\n        if (!hours) {\n            hours = [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12\n            ];\n        }\n        if (!clover) {\n            clover = (tokenModifiers === null || tokenModifiers === void 0 ? void 0 : tokenModifiers.clover) ? tokenModifiers.clover : 0;\n        }\n        if (!combo) {\n            combo = 1.0;\n        }\n        const overall = this.calculateGroupScore(group);\n        //includes pet token gain \n        const tokenHR = overall.tokenMult * pd_token_bonus * combo;\n        let best = {\n            hours: -1,\n            totalTokens: -1,\n            floored: -1,\n            effeciency: -1\n        };\n        let bestArr = [];\n        for(let i = 0; i < hours.length; i++){\n            let h = hours[i];\n            let totalTokens = tokenHR + 1 / 3600 * tokenHR; //assuming 1hr runs\n            let floored = Math.floor(totalTokens);\n            let effeciency = floored / totalTokens;\n            let wasted = totalTokens - floored;\n            let wastedHR = wasted / h;\n            let temp = {\n                wastedHR: wastedHR,\n                tokenHR: tokenHR + 1 / 3600 * tokenHR,\n                wasted: wasted,\n                hours: h,\n                totalTokens: totalTokens,\n                floored: floored,\n                effeciency: effeciency\n            };\n            bestArr.push(temp);\n        // if (effeciency > best.effeciency) {\n        //     bestArr = [];\n        //     best = { hours: h, totalTokens: totalTokens, floored: floored, effeciency: effeciency };\n        //     bestArr.push(best);\n        // }\n        // else if (effeciency === best.effeciency) {\n        //     best = { hours: h, totalTokens: totalTokens, floored: floored, effeciency: effeciency };\n        //     bestArr.push(best);\n        // }\n        }\n        // bestArr.sort((a, b) => { return a.wasted - b.wasted })\n        // bestArr.sort((a, b) => {\n        //     let a_waste = general_helper.roundThreeDecimal(a.wastedHR)\n        //     let b_waste = general_helper.roundThreeDecimal(b.wastedHR)\n        //     if (a_waste === b_waste) {\n        //         return a.hours - b.hours;\n        //     }\n        //     return a_waste - b_waste;\n        // })\n        return bestArr;\n    },\n    calculateGroupScore: function(group, defaultRank) {\n        let groupScore = 0;\n        let dmgCount = 0;\n        let timeCount = 0;\n        let synergyBonus = 0;\n        let baseGroupScore = 0;\n        let cardPowerCount = 0;\n        let expRewardCount = 0;\n        let rpRewardCount = 0;\n        let cardXpCount = 0;\n        let tokenRewardCount = 0;\n        let tokenMult = 0;\n        let tokenModif = 0;\n        const typeCounts = {};\n        let groupScoreMax = 0;\n        group.forEach((pet1)=>{\n            groupScore += this.calculatePetBaseDamage(pet1, defaultRank);\n            groupScoreMax += this.calculatePetBaseDamage(pet1, 0);\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1013)) {\n                dmgCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1010)) {\n                cardPowerCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1011)) {\n                expRewardCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1014)) {\n                cardXpCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1012)) {\n                timeCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1015)) {\n                rpRewardCount++;\n            }\n            if (pet1.BonusList.some((bonus)=>bonus.ID === 1016)) {\n                tokenRewardCount++;\n            }\n            // Count pet types\n            if (typeCounts[pet1.Type]) {\n                typeCounts[pet1.Type]++;\n            } else {\n                typeCounts[pet1.Type] = 1;\n            }\n            if (pet1.ID) synergyBonus += this.SYNERGY_MOD_STEP;\n        });\n        baseGroupScore = groupScore;\n        const [earthType, airType] = Object.values(typeCounts);\n        if (earthType > 0 && airType > 0) synergyBonus += this.SYNERGY_MOD_STEP;\n        if (earthType > 1 && airType > 1) synergyBonus += this.SYNERGY_MOD_STEP;\n        groupScore *= 1 + dmgCount * this.EXP_DMG_MOD;\n        groupScoreMax *= 1 + dmgCount * this.EXP_DMG_MOD;\n        groupScore *= 1 + timeCount * this.EXP_TIME_MOD;\n        groupScoreMax *= 1 + timeCount * this.EXP_TIME_MOD;\n        groupScore *= synergyBonus;\n        groupScoreMax *= synergyBonus;\n        tokenModif = tokenRewardCount * this.EXP_TOKEN_MOD;\n        tokenMult = synergyBonus + synergyBonus * tokenModif;\n        return {\n            groupScore,\n            baseGroupScore,\n            groupScoreMax,\n            dmgCount,\n            timeCount,\n            synergyBonus,\n            cardPowerCount,\n            expRewardCount,\n            cardXpCount,\n            rpRewardCount,\n            tokenRewardCount,\n            tokenModif,\n            tokenMult\n        };\n    },\n    getBestDamagePets: function(petsCollection, defaultRank, other) {\n        let finalCollection = {};\n        let bestDamagePets = JSON.parse(JSON.stringify(petsCollection));\n        //As required + miscellenaous pets are added, keep track of top 4 strongest -> to prevent adding non-special weak pets\n        //This really initially only stores required, exp dmg, exp time bonus pets\n        let strongestGnd = [];\n        let strongestAir = [];\n        const updateStrongest = (pet1)=>{\n            //Ground\n            if (pet1.Type === 1) {\n                //No pets yet, just add it\n                if (strongestGnd.length === 0) {\n                    strongestGnd.push(pet1);\n                } else if (strongestGnd.length === 1) {\n                    if (this.calculatePetBaseDamage(strongestGnd[0], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                        strongestGnd[1] = strongestGnd[0];\n                        strongestGnd[0] = pet1;\n                    } else {\n                        strongestGnd[1] = pet1;\n                    }\n                } else if (this.calculatePetBaseDamage(strongestGnd[0], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                    strongestGnd[1] = strongestGnd[0];\n                    strongestGnd[0] = pet1;\n                } else if (this.calculatePetBaseDamage(strongestGnd[1], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                    strongestGnd[1] = pet1;\n                }\n            } else if (pet1.Type === 2) {\n                //No pets yet, just add it\n                if (strongestAir.length === 0) {\n                    strongestAir.push(pet1);\n                } else if (strongestAir.length === 1) {\n                    if (this.calculatePetBaseDamage(strongestAir[0], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                        strongestAir[1] = strongestAir[0];\n                        strongestAir[0] = pet1;\n                    } else {\n                        strongestAir[1] = pet1;\n                    }\n                } else if (this.calculatePetBaseDamage(strongestAir[0], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                    strongestAir[1] = strongestAir[0];\n                    strongestAir[0] = pet1;\n                } else if (this.calculatePetBaseDamage(strongestAir[1], defaultRank) < this.calculatePetBaseDamage(pet1, defaultRank)) {\n                    strongestAir[1] = pet1;\n                }\n            }\n        };\n        let dmgOnlyPets = [];\n        let requiredPets = {};\n        let airDmgOnlyCount = 0;\n        let gndDmgOnlyCount = 0;\n        if (other) {\n            if (other.requiredPets) {\n                for(let i = 0; i < other.requiredPets.length; i++){\n                    requiredPets[other.requiredPets[i].ID] = other.requiredPets[i];\n                }\n            }\n        }\n        for(let i = 0; i < bestDamagePets.length; i++){\n            let cur = bestDamagePets[i];\n            let added = false;\n            for(let j = 0; j < cur.BonusList.length; j++){\n                let bonus = cur.BonusList[j];\n                //Add any required pets to the list\n                if (cur.ID in requiredPets) {\n                    finalCollection[cur.ID] = cur;\n                    added = true;\n                } else if (bonus.ID === 1013) {\n                    if (!finalCollection[cur.ID]) {\n                        finalCollection[cur.ID] = cur;\n                        added = true;\n                    }\n                }\n                //Dng time bonus\n                if (bonus.ID === 1012) {\n                    if (!finalCollection[cur.ID]) {\n                        finalCollection[cur.ID] = cur;\n                        added = true;\n                    }\n                }\n            }\n            if (!added) {\n                dmgOnlyPets.push(cur);\n                if (cur.Type === 1) {\n                    gndDmgOnlyCount++;\n                } else {\n                    airDmgOnlyCount++;\n                }\n            } else {\n                updateStrongest(cur);\n            }\n        }\n        const specialAir = strongestAir.length;\n        const specialGnd = strongestGnd.length;\n        let specialPets = strongestAir.concat(strongestGnd);\n        //Add all the special pets to the required list\n        for(let i = 0; i < specialPets; i++){\n            finalCollection[pet.ID] = specialPets[i];\n        }\n        //How many more pets of each type I need to find still (i.e. if I have a total of 1 air pets, then i need 3 ground)\n        let extraGnd = 2;\n        let extraAir = 2;\n        if (specialGnd + gndDmgOnlyCount < 2) {\n            extraAir += 2 - (specialGnd + gndDmgOnlyCount);\n        }\n        if (specialAir + airDmgOnlyCount < 2) {\n            extraGnd += 2 - (specialAir + airDmgOnlyCount);\n        }\n        let sortGnd = false;\n        let sortAir = false;\n        //Go over remaining pure dmg pets, and find the top 4 (preferable 2gnd and 2air to put in to consider together with special pets)\n        for(let i = 0; i < dmgOnlyPets.length; i++){\n            let pet1 = dmgOnlyPets[i];\n            let dmg = this.calculatePetBaseDamage(pet1, defaultRank);\n            if (pet1.Type === 1) {\n                if (strongestGnd.length < extraGnd) {\n                    strongestGnd.push(pet1);\n                    sortGnd = true;\n                } else {\n                    for(let j = 0; j < strongestGnd.length; j++){\n                        let innerPet = strongestGnd[j];\n                        let innerDmg = this.calculatePetBaseDamage(innerPet, defaultRank);\n                        if (dmg > innerDmg) {\n                            strongestGnd[j] = pet1;\n                            sortGnd = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                if (strongestAir.length < extraAir) {\n                    strongestAir.push(pet1);\n                    sortAir = true;\n                } else {\n                    for(let j = 0; j < strongestAir.length; j++){\n                        let innerPet = strongestAir[j];\n                        let innerDmg = this.calculatePetBaseDamage(innerPet, defaultRank);\n                        if (dmg > innerDmg) {\n                            strongestAir[j] = pet1;\n                            sortAir = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            //Make sure to sort in reverse order!! because i replace the first pet I beat (which needs to be the weakest one)\n            if (sortGnd) {\n                sortGnd = false;\n                strongestGnd.sort((a, b)=>this.calculatePetBaseDamage(a, defaultRank) - this.calculatePetBaseDamage(b, defaultRank));\n            }\n            if (sortAir) {\n                sortAir = false;\n                strongestAir.sort((a, b)=>this.calculatePetBaseDamage(a, defaultRank) - this.calculatePetBaseDamage(b, defaultRank));\n            }\n        }\n        //Make the updated list and add it all in, duplicates will just overwrite themselves so its fine\n        specialPets = strongestAir.concat(strongestGnd);\n        //Add all the special pets to the required list\n        for(let i = 0; i < specialPets.length; i++){\n            finalCollection[specialPets[i].ID] = specialPets[i];\n        }\n        let finalPetsCollection = Object.values(finalCollection);\n        finalPetsCollection.sort((a, b)=>b.ID - a.ID);\n        return finalPetsCollection;\n    // //Sort remaining\n    // dmgOnlyPets.sort((a, b) => this.calculatePetBaseDamage(b, defaultRank) - this.calculatePetBaseDamage(a, defaultRank));\n    // let airTotal = 0;\n    // let groundTotal = 0;\n    // dmgOnlyPets.map((curr) => {\n    //     if (curr.Type === 1) groundTotal++;\n    //     if (curr.Type === 2) airTotal++;\n    // })\n    // let ground = 0;//type 1\n    // let air = 0; //type 2\n    // let counter = 0;\n    // if (groundTotal < 2) {\n    //     let ground = [];\n    //     groundTotal = 0;\n    //     dmgOnlyPets.map((cur) => {\n    //         if (cur.Type === 1) {\n    //             ground.push(cur);\n    //             finalCollection[cur.ID] = cur;\n    //             dmgOnlyPets = dmgOnlyPets.filter((current) => {\n    //                 return current.ID !== cur.ID\n    //             })\n    //         }\n    //     });\n    // }\n    // if (airTotal < 2) {\n    //     let air = [];\n    //     airTotal = 0;\n    //     dmgOnlyPets.map((cur) => {\n    //         if (cur.Type === 2) {\n    //             air.push(cur);\n    //             finalCollection[cur.ID] = cur;\n    //             dmgOnlyPets = dmgOnlyPets.filter((current) => {\n    //                 return current.ID !== cur.ID\n    //             })\n    //         }\n    //     });\n    // }\n    // for (let i = 0; i < dmgOnlyPets.length; i++) {\n    //     let cur = dmgOnlyPets[i];\n    //     if (ground < 2 && cur.Type === 1 || airTotal <= 0) {\n    //         //Check if we need to add current pet, or the strongestGnd are strong enough\n    //         if (strongestGnd.length > 0) {\n    //             let j = 0;\n    //             while (strongestGnd.length > 0 && j <= strongestGnd.length) {\n    //                 let stng = strongestGnd[j];\n    //                 if (stng) {\n    //                     if (this.calculatePetBaseDamage(stng, defaultRank) >= this.calculatePetBaseDamage(cur, defaultRank)) {\n    //                         strongestGnd.splice(j, 1);\n    //                         finalCollection[cur.ID] = cur;\n    //                         ground++;\n    //                         counter++;\n    //                         j--;\n    //                     }\n    //                 }\n    //                 j++;\n    //             }\n    //         }\n    //         //Potentially 2 strongest are better than current, so don't add it if we added the other 2, or if there are no air and counter less than 3\n    //         if (ground < 2 || (counter < 4 && airTotal <= 0)) {\n    //             finalCollection[cur.ID] = cur;\n    //             ground++;\n    //             counter++;\n    //             groundTotal--;\n    //         }\n    //     }\n    //     else if (air < 2 && cur.Type === 2 || groundTotal <= 0) {\n    //         //Check if we need to add current pet, or the strongestGnd are strong enough\n    //         if (strongestAir.length > 0) {\n    //             let j = 0;\n    //             while (strongestAir.length > 0 && j <= strongestAir.length) {\n    //                 let stng = strongestAir[j];\n    //                 if (stng) {\n    //                     if (this.calculatePetBaseDamage(stng, defaultRank) >= this.calculatePetBaseDamage(cur, defaultRank)) {\n    //                         strongestAir.splice(j, 1);\n    //                         finalCollection[cur.ID] = cur;\n    //                         air++;\n    //                         counter++;\n    //                         j--;\n    //                     }\n    //                 }\n    //                 j++;\n    //             }\n    //         }\n    //         //Potentially 2 strongest are better than current, so don't add it if we added the other 2, or if there are no air and counter less than 3\n    //         if (air < 2 || (counter < 4 && groundTotal <= 0)) {\n    //             finalCollection[cur.ID] = cur;\n    //             air++;\n    //             counter++\n    //             airTotal--;\n    //         }\n    //     }\n    //     if (counter > 3) break;\n    // }\n    // let finalPetsCollection = Object.values(finalCollection);\n    // finalPetsCollection.sort((a, b) => b.ID - a.ID);\n    // return finalPetsCollection;\n    },\n    calcBestDamageGroup: function(PETSCOLLECTION, defaultRank, numGroups, other) {\n        const k = 4; // Size of each group\n        numGroups = numGroups ? numGroups : 7;\n        numGroups = Number(numGroups);\n        const memo = {};\n        let failedFiltersObj = {};\n        let petsMap = {};\n        other = JSON.parse(JSON.stringify(other));\n        for(let i = 0; i < PETSCOLLECTION.length; i++){\n            petsMap[PETSCOLLECTION[i].ID] = JSON.parse(JSON.stringify(PETSCOLLECTION[i]));\n        }\n        let activeBonuses = other === null || other === void 0 ? void 0 : other.activeBonuses;\n        if (!activeBonuses) activeBonuses = [];\n        const memoizedGroupScore = (group)=>{\n            const key = group.ID;\n            if (!memo[key] || memo[key]) {\n                let res = this.calculateGroupScore(group.team, defaultRank);\n                let sum = res.tokenMult;\n                memo[key] = {\n                    token: sum,\n                    damage: res.groupScore,\n                    other: res\n                };\n            }\n            return memo[key];\n        };\n        let blackList = {};\n        let whitelist = {};\n        let whitelistRel = {};\n        let lockedPets = {};\n        let autoPets = {};\n        let psuedoGroups = [];\n        for(let i = 0; i < numGroups; i++){\n            psuedoGroups.push([]);\n        }\n        if (other === null || other === void 0 ? void 0 : other.petWhiteList) {\n            for(let i = 0; i < other.petWhiteList.length; i++){\n                let cur = other.petWhiteList[i];\n                if (cur.placement === \"blacklist\") {\n                    blackList[cur.id] = cur;\n                } else if (cur.placement === \"team\") {\n                    whitelist[cur.id] = cur;\n                    lockedPets[cur.id] = cur;\n                    psuedoGroups[cur.parameters.team].push(cur);\n                } else if (cur.placement === \"rel\") {\n                    whitelistRel[cur.id] = cur;\n                }\n            }\n            //Go over any `auto placements and slot them in in a pseudo manner\n            for(let i = 0; i < other.petWhiteList.length; i++){\n                let cur = other.petWhiteList[i];\n                if (cur.placement === \"auto\") {\n                    let bigsad = -1;\n                    for(let j = numGroups - 1; j >= 0; j--){\n                        let numGnd = 0;\n                        let numAir = 0;\n                        psuedoGroups[j].forEach((inner_pet)=>{\n                            if (inner_pet.pet.Type === 1) {\n                                numGnd++;\n                            }\n                            if (inner_pet.pet.Type === 2) {\n                                numAir++;\n                            }\n                        });\n                        if (cur.pet.Type === 1 && numGnd > 1) {\n                            continue;\n                        }\n                        if (cur.pet.Type === 2 && numAir > 1) {\n                            continue;\n                        }\n                        if (psuedoGroups[j].length < k) {\n                            cur.auto = true;\n                            cur.parameters.team = j;\n                            cur.placement = \"team\";\n                            whitelist[cur.id] = cur;\n                            psuedoGroups[j].push(cur);\n                            autoPets[cur.id] = cur;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const getCombinationsInner = (array, k, bonusList)=>{\n            // let temp = [];\n            let best = -1;\n            //confirm there is enough gnd/air for perfect synergy\n            let airTemp = 0;\n            let groundTemp = 0;\n            array.forEach((item)=>{\n                if (item.Type === 1) groundTemp++;\n                else airTemp++;\n            });\n            let bad_synergy_allowed = true;\n            if (airTemp > 1 && groundTemp > 1) {\n                bad_synergy_allowed = false;\n            }\n            //Number of air/gnd pets that are manually placed -> default allow bad synergy\n            let requiredAir = {};\n            let requiredGnd = {};\n            //Check num air and num ground relative pets from bonus\n            let relAirTotalMap = {};\n            let relGndTotalMap = {};\n            for(let i = 0; i < bonusList.length; i++){\n                let bonus = bonusList[i];\n                if (bonus.placement === \"team\") {\n                    if (!bonus.parameters.fake) {\n                        if (bonus.pet.Type === 1 && !requiredGnd[bonus.pet.ID]) {\n                            requiredGnd[bonus.pet.ID] = true;\n                        } else if (!requiredGnd[bonus.pet.ID]) {\n                            requiredAir[bonus.pet.ID] = true;\n                        } else {\n                            let bigsad = -1;\n                        }\n                    } else {\n                        if (bonus.pet.Type === 2 && !relAirTotalMap[bonus.pet.ID]) {\n                            relAirTotalMap[bonus.pet.ID] = true;\n                        } else if (!relGndTotalMap[bonus.pet.ID]) {\n                            relGndTotalMap[bonus.pet.ID] = true;\n                        }\n                    }\n                }\n            }\n            const f = (start, prevCombination)=>{\n                if (prevCombination.length > 0) {\n                    let validTeam = true;\n                    let fakeRel = 0;\n                    let exact = 0;\n                    const maxPets = 4;\n                    //Check how many pets of each type are the correct rel ones\n                    let currAir = 0;\n                    let currGnd = 0;\n                    //absolute number of each type of pet\n                    let totalGnd = 0;\n                    let totalAir = 0;\n                    for(let j = 0; j < prevCombination.length; j++){\n                        let tempy = prevCombination[j];\n                        if (tempy.Type === 1) {\n                            totalGnd++;\n                        } else {\n                            totalAir++;\n                        }\n                        if (tempy.Type === 1 && relGndTotalMap[tempy.ID]) {\n                            currGnd++;\n                        } else if (relAirTotalMap[tempy.ID]) {\n                            currAir++;\n                        }\n                    }\n                    let reqAir = Object.entries(requiredAir).length;\n                    let reqGnd = Object.entries(requiredGnd).length;\n                    let relAirTotal = Object.entries(relAirTotalMap).length;\n                    let relGndTotal = Object.entries(relGndTotalMap).length;\n                    //Determine how many more `rel` of gnd/fly type are allowed based on how many hard (placement=group) there are\n                    let airLimit = 2 > reqAir ? 2 - reqAir : 0;\n                    let gndLimit = 2 > reqGnd ? 2 - reqGnd : 0;\n                    let maxRel = 0;\n                    //I can have a max of 2 air or 2 ground\n                    // if i have any required air, number of relative air allowed is 2 - required\n                    // if num relative air > 0 I need to make sure i have a an air, but less then the number above\n                    //If there are any relative air pets required\n                    if (relAirTotal > 0) {\n                        let checkNum = relAirTotal < airLimit ? relAirTotal : airLimit;\n                        if (currAir > airLimit) {\n                            validTeam = false;\n                        } else if (currAir !== checkNum) {\n                            validTeam = false;\n                        } else {\n                            maxRel += checkNum;\n                        }\n                    }\n                    if (relGndTotal > 0) {\n                        let checkNum = relGndTotal < gndLimit ? relGndTotal : gndLimit;\n                        if (currGnd > gndLimit) {\n                            validTeam = false;\n                        } else if (currGnd !== checkNum) {\n                            validTeam = false;\n                        } else {\n                            maxRel += checkNum;\n                        }\n                    }\n                    let airMaxIncrease = reqAir > 2 ? reqAir - 2 : 0;\n                    let gndMaxIncrease = reqGnd > 2 ? reqGnd - 2 : 0;\n                    if ((totalAir > 2 + airMaxIncrease || totalGnd > 2 + gndMaxIncrease) && !bad_synergy_allowed) {\n                        validTeam = false;\n                    }\n                    if (relAirTotal > 0 || relGndTotal > 0) {\n                        let bigsad = -1;\n                    }\n                    if (validTeam) {\n                        if (bonusList.length > 0) {\n                            let bigsad = -1;\n                        }\n                        //First confirm the the combination satisfies all bonuses\n                        for(let i = 0; i < bonusList.length; i++){\n                            let bonus = bonusList[i];\n                            let pass = false;\n                            //Pet being forcefull included, needs to be here\n                            if (bonus.placement === \"team\") {\n                                let currCount = 0;\n                                for(let j = 0; j < prevCombination.length; j++){\n                                    let pet1 = prevCombination[j];\n                                    if (pet1.ID === bonus.pet.ID) {\n                                        //Fake means its a rel pet\n                                        if (bonus.parameters.fake) {\n                                            //Check if we have too many air/gnd pets before adding this one in\n                                            // if (pet.Type === 1 && currGnd > gndLimit) {\n                                            //     continue;\n                                            // }\n                                            // else if (currAir > airLimit) {\n                                            //     continue;\n                                            // }\n                                            fakeRel++;\n                                        } else {\n                                            exact++;\n                                            if (pet1.Type === 1) {\n                                                reqGnd++;\n                                            } else {\n                                                reqAir++;\n                                            }\n                                        }\n                                        currCount++;\n                                    }\n                                }\n                                if (currCount > 0) {\n                                    // console.log(`we good`);\n                                    pass = true;\n                                } else if (!bonus.parameters.fake) {\n                                    // console.log(`we not good`);\n                                    validTeam = false;\n                                    pass = false;\n                                    break;\n                                }\n                            } else if (bonus.requiredNumber > 0) {\n                                let currCount = 0;\n                                for(let j = 0; j < prevCombination.length; j++){\n                                    let pet1 = prevCombination[j];\n                                    if (pet1.BonusList.find((a)=>a.ID === bonus.bonus.id)) {\n                                        currCount++;\n                                        exact++;\n                                    }\n                                }\n                                if (currCount >= bonus.requiredNumber) {\n                                    // console.log(`we good`);\n                                    pass = true;\n                                } else {\n                                    // console.log(`we not good`);\n                                    validTeam = false;\n                                    pass = false;\n                                    break;\n                                }\n                            } else if (bonus.exactNumber > -1) {\n                                let currCount = 0;\n                                for(let j = 0; j < prevCombination.length; j++){\n                                    let pet1 = prevCombination[j];\n                                    if (pet1.BonusList.find((a)=>a.ID === bonus.bonus.id)) {\n                                        currCount++;\n                                        exact++;\n                                    }\n                                }\n                                if (currCount === bonus.exactNumber) {\n                                    // console.log(`we good`);\n                                    pass = true;\n                                } else {\n                                    // console.log(`we not good`);\n                                    validTeam = false;\n                                    pass = false;\n                                    break;\n                                }\n                            } else if (bonus.bonus.placement === \"rel\") {\n                                let currCount = 0;\n                                let maxCounter = 0;\n                                for(let j = 0; j < prevCombination.length; j++){\n                                    let pet1 = prevCombination[j];\n                                    if (pet1.BonusList.find((a)=>a.ID === bonus.bonus.id)) {\n                                        maxCounter++;\n                                        fakeRel++;\n                                    }\n                                // if (bonus.tempRequired > 0)\n                                //     if (bonus.tempRequiredPets.find((a) => a.ID === pet.ID)) {\n                                //         currCount++;\n                                //     }\n                                }\n                                if (maxCounter <= bonus.bonus.amount) {\n                                    //Check that we have some of the required pets, but not exceeding the max amount\n                                    if (bonus.tempRequired > 0) {\n                                        if (bonus.bonus.amount < bonus.tempRequired && maxCounter === bonus.bonus.amount || //max is < required (i.e. we could fit 4 but max is set to 2) -> ensure # pets === max\n                                        maxCounter >= bonus.tempRequired //Max is >= required, ensure #pet >= required\n                                        ) {\n                                            // console.log(`we good`);\n                                            pass = true;\n                                        } else {\n                                            // console.log(`we not good`);\n                                            validTeam = false;\n                                            pass = false;\n                                            break;\n                                        }\n                                    } else {\n                                        pass = true;\n                                    }\n                                } else {\n                                    validTeam = false;\n                                    pass = false;\n                                    break;\n                                }\n                            } else if (bonus.placement === \"relative\") {}\n                            //`eq` or `min` isn't active, but needs to reserve certain pets\n                            if (bonus.tempMax || bonus.tempMax === 0 && !bonus.disabled && bonus.disabled !== undefined) {\n                                let currCount = 0;\n                                for(let j = 0; j < prevCombination.length; j++){\n                                    let pet1 = prevCombination[j];\n                                    if (bonus.pets.find((a)=>a.ID === pet1.ID)) {\n                                        currCount++;\n                                    }\n                                }\n                                if (currCount <= bonus.tempMax) {\n                                    // console.log(`we good`);\n                                    pass = true;\n                                } else {\n                                    // console.log(`we not good`);\n                                    validTeam = false;\n                                    pass = false;\n                                    break;\n                                }\n                            }\n                            if (pass) {\n                                bonus.passed++;\n                            }\n                        }\n                        // for (let x = 0; x < bonusList.length; x++) {\n                        //     let temp_inner = bonusList[x];\n                        //     if (temp_inner.placement) {\n                        //         //bigsad = -1 note does not handle the rel filter for bonuses very well\n                        //         if (temp_inner.parameters.fake) {\n                        //             let pet = temp_inner.pet;\n                        //             if (pet.Type === 1 && relGndTotal > gndLimit) {\n                        //                 continue;\n                        //             }\n                        //             else if (relAirTotal > airLimit) {\n                        //                 continue;\n                        //             }\n                        //             maxRel++;\n                        //         }\n                        //     }\n                        // }\n                        //Check if we have all the req pets, and enough rel pets\n                        if (maxRel > 0 && validTeam) {\n                            //There are more recommended than we can fit, so just make sure he have enough\n                            if (maxRel + exact > maxPets) {\n                                maxRel = maxPets - exact;\n                            }\n                            if (fakeRel < maxRel) {\n                                validTeam = false;\n                            } else {\n                                validTeam = true;\n                            }\n                        }\n                        if (validTeam) {\n                            let bigsad = -1;\n                        }\n                        if (validTeam) {\n                            let id = \"\";\n                            for(let i = 0; i < prevCombination.length; i++){\n                                id = id + prevCombination[i].ID;\n                                if (i + 1 !== prevCombination.length) {\n                                    id = id + \",\";\n                                }\n                            }\n                            let x = {\n                                ID: id,\n                                team: prevCombination\n                            };\n                            // temp.push(x);\n                            if (best === -1) {\n                                best = {\n                                    ID: id,\n                                    team: prevCombination,\n                                    score: memoizedGroupScore(x)\n                                };\n                            } else {\n                                let cur = memoizedGroupScore(x);\n                                if (cur.damage === best.score.damage) {\n                                    if (cur.token > best.score.token) {\n                                        best = {\n                                            ID: id,\n                                            team: prevCombination,\n                                            score: cur\n                                        };\n                                    }\n                                } else if (cur.damage > best.score.damage) {\n                                    best = {\n                                        ID: id,\n                                        team: prevCombination,\n                                        score: cur\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n                if (prevCombination.length === k) {\n                    return;\n                }\n                for(let i = start; i < array.length; i++){\n                    f(i + 1, [\n                        ...prevCombination,\n                        array[i]\n                    ]);\n                }\n            };\n            f(0, []);\n            if (best.team) best.team.sort((a, b)=>{\n                if (a.Type === b.Type) {\n                    return a.ID - b.ID;\n                }\n                return a.Type - b.Type;\n            });\n            return best;\n        };\n        let time1 = new Date();\n        let time2 = new Date();\n        let time3 = new Date();\n        let time4 = new Date();\n        let bestGroups = [];\n        let petsCollection = PETSCOLLECTION.filter((inner_pet)=>{\n            if (inner_pet.ID in whitelist) {\n                whitelist[inner_pet.ID].pet = inner_pet;\n            }\n            return !(inner_pet.ID in blackList) && !(inner_pet.ID in whitelist);\n        });\n        for(let g = 0; g < numGroups; g++){\n            let remainingGroups = numGroups - g;\n            let requiredPetsOverall = [];\n            let requiredBonuses = {};\n            let requiredPetBonusMap = {};\n            let requiredPetsByBonus = [];\n            let whiteListReqPets = [];\n            for (const [key, value] of Object.entries(whitelist)){\n                if (value.parameters.team === g) {\n                    if (!petsMap[value.pet.ID]) {\n                        continue;\n                    }\n                    whiteListReqPets.push(value);\n                    petsCollection.push(value.pet);\n                    requiredPetsOverall.push(value.pet);\n                }\n            }\n            if (activeBonuses.length > 0) {\n                //NOTE later need to add logic to determine if a bonus met its criteria or not before adding!! (in the case of early termination like theres only enough for 2 teams, and its fully used)\n                for(let j = 0; j < activeBonuses.length; j++){\n                    requiredBonuses[activeBonuses[j].id] = activeBonuses[j];\n                    requiredPetBonusMap[activeBonuses[j].id] = {\n                        bonus: activeBonuses[j],\n                        pets: [],\n                        active: true\n                    };\n                }\n                petsCollection.forEach((currPet)=>{\n                    if (currPet.ID in blackList) return;\n                    currPet.BonusList.forEach((currBonus)=>{\n                        if (currBonus.ID in requiredBonuses) {\n                            if (requiredBonuses[currBonus.ID].placement === \"top\") {\n                                requiredPetsOverall.push(currPet);\n                            }\n                            requiredPetBonusMap[currBonus.ID].pets.push(currPet);\n                        }\n                    });\n                });\n                //Check the bonuses placement, and if it needs to be added (top is always active)\n                for(let j = 0; j < activeBonuses.length; j++){\n                    let currBonus = requiredPetBonusMap[activeBonuses[j].id];\n                    if (currBonus.bonus.placement === \"bottom\") {\n                        //Need to check that it is time to place these or not\n                        let numPets = currBonus.pets.length;\n                        let requiredGroups = 0;\n                        let remainder;\n                        let disabled = false;\n                        let max = 0; // in case of min 1/team,  3 pets total among 3 groups, max is 1 - can not be 0 (is disabled)\n                        switch(currBonus.bonus.equation){\n                            case \"min\":\n                                //If there are not enough pets to meet the min, then set the min to # of pets\n                                //Not enough pets at all, do not reserve current pets\n                                if (numPets < currBonus.bonus.amount) {\n                                    remainder = 0;\n                                    disabled = true;\n                                } else {\n                                    //While the min is possible, we need to check whether we should silently enforce a max, to populate future groups\n                                    // if (remainingGroups <= requiredGroups) {\n                                    let maxTemp = remainingGroups * currBonus.bonus.amount;\n                                    if (numPets <= maxTemp) {\n                                        max = currBonus.bonus.amount;\n                                    }\n                                    // }\n                                    remainder = numPets % currBonus.bonus.amount;\n                                    numPets -= remainder;\n                                    requiredGroups = numPets >= 0 ? Math.ceil(numPets / currBonus.bonus.amount) : 0;\n                                }\n                                break;\n                            case \"max\":\n                                break;\n                            case \"eq\":\n                                //Not enough pets at all, do not reserve current pets\n                                if (numPets < currBonus.bonus.amount) {\n                                    remainder = 0;\n                                    disabled = true;\n                                } else {\n                                    let maxTemp = remainingGroups * currBonus.bonus.amount;\n                                    if (numPets <= maxTemp) {\n                                        max = currBonus.bonus.amount;\n                                    }\n                                    remainder = numPets % currBonus.bonus.amount;\n                                    numPets -= remainder;\n                                    requiredGroups = currBonus.pets.length >= currBonus.bonus.amount ? Math.ceil(numPets / currBonus.bonus.amount) : 0;\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                        //Time to slot in the pets\n                        if (remainingGroups <= requiredGroups) {\n                            requiredPetBonusMap[currBonus.bonus.id].tempMax = max;\n                            currBonus.pets.forEach((bonusPet)=>{\n                                requiredPetsOverall.push(bonusPet);\n                            });\n                        } else {\n                            let finalBonusPets = [];\n                            //Need to ensure we don't reserve pets that are whitelisted to go into a certain team, if that team is now\n                            for(let x = 0; x < requiredPetBonusMap[currBonus.bonus.id].pets.length; x++){\n                                let temp_curr = requiredPetBonusMap[currBonus.bonus.id].pets[x];\n                                if (temp_curr.ID in whitelist) {\n                                    if (whitelist[temp_curr.ID].placement === \"team\") {\n                                        if (whitelist[temp_curr.ID].parameters.team === g) {\n                                            continue;\n                                        }\n                                    }\n                                }\n                                finalBonusPets.push(temp_curr);\n                            }\n                            requiredPetBonusMap[currBonus.bonus.id].pets = finalBonusPets;\n                            requiredPetBonusMap[currBonus.bonus.id].active = false; //Only prevents enforcing the required pets pet team\n                            requiredPetBonusMap[currBonus.bonus.id].tempMax = remainder;\n                            requiredPetBonusMap[currBonus.bonus.id].disabled = disabled;\n                        }\n                    } else if (currBonus.bonus.placement === \"top\") {\n                        let numPets = currBonus.pets.length;\n                        let requiredGroups = 0;\n                        let remainder;\n                        let disabled = false;\n                        let max = 0; // in case of min 1/team,  3 pets total among 3 groups, max is 1 - can not be 0 (is disabled)\n                        let maxTemp = remainingGroups * currBonus.bonus.amount;\n                        if (numPets <= maxTemp) {\n                            max = currBonus.bonus.amount;\n                        }\n                        requiredPetBonusMap[currBonus.bonus.id].tempMax = max;\n                    }\n                }\n                //Calculate how many pets are actually supposed to go into this team NOTE LATER also if they should even be added in the first place\n                for(let j = 0; j < activeBonuses.length; j++){\n                    let temp = requiredPetBonusMap[activeBonuses[j].id];\n                    if (!temp.active) continue;\n                    let requiredNumber = 0;\n                    let exactNumber = -1;\n                    temp.hardFail = false;\n                    switch(temp.bonus.equation){\n                        case \"min\":\n                            //If there are not enough pets to meet the min, then set the min to # of pets\n                            // requiredNumber = temp.pets.length > temp.bonus.amount ? temp.bonus.amount : temp.pets.length\n                            if (temp.bonus.amount > temp.pets.length) {\n                                // FAILED filter\n                                requiredNumber = 0;\n                                temp.hardFail = true;\n                            } else requiredNumber = temp.bonus.amount;\n                            break;\n                        case \"max\":\n                            break;\n                        case \"eq\":\n                            // exactNumber = temp.pets.length > temp.bonus.amount ? temp.bonus.amount : temp.pets.length\n                            if (temp.bonus.amount > temp.pets.length) {\n                                // FAILED filter\n                                exactNumber = -1;\n                                temp.hardFail = true;\n                            } else exactNumber = temp.bonus.amount;\n                            break;\n                        default:\n                            break;\n                    }\n                    temp.requiredNumber = requiredNumber;\n                    temp.exactNumber = exactNumber;\n                }\n            }\n            //Get a subset of pets: the required based on bonuses, any that have dmgBonus or timeBonus, up to 4 more for max raw dungeonDamage\n            let finalPetsCollection = this.getBestDamagePets(petsCollection, defaultRank, {\n                requiredPets: requiredPetsOverall\n            });\n            //Mark every requiredBonus as failed (to check what passed at least once)\n            for (const [key, value] of Object.entries(requiredPetBonusMap)){\n                value.passed = 0;\n            }\n            time1 = new Date();\n            let ignoreCustomBonuses = false; //In the case whitelist is possible, but only with customs ignored\n            let skipChecks = false; //If it fails no matter what, don't bother adding bonuses in for subsequent best team generation\n            let bonusList = Object.values(requiredPetBonusMap);\n            for(let j = 0; j < whiteListReqPets.length; j++){\n                bonusList.push(whiteListReqPets[j]);\n            }\n            let combinations = getCombinationsInner(finalPetsCollection, Math.min(k, finalPetsCollection.length), bonusList);\n            time2 = new Date();\n            console.log(\"time to get combinations \".concat(combinations.length, \": \").concat((time2 - time1) / 1000, \" seconds\"));\n            //Check if we can create valid teams with only whitelist pets\n            if (combinations === -1 && whiteListReqPets.length > 0) {\n                bonusList = [];\n                for(let j = 0; j < whiteListReqPets.length; j++){\n                    bonusList.push(whiteListReqPets[j]);\n                }\n                combinations = getCombinationsInner(finalPetsCollection, Math.min(k, finalPetsCollection.length), bonusList);\n                if (combinations === -1) {\n                    skipChecks = true;\n                } else {\n                    ignoreCustomBonuses = true;\n                }\n            }\n            if (combinations === -1) {\n                skipChecks = true;\n            }\n            let allPassed = true;\n            //Check if any of the filters failed, and explain which + why\n            for (const [key, value] of Object.entries(requiredPetBonusMap)){\n                if (!(key in failedFiltersObj)) {\n                    if (!value.passed || value.hardFail) {\n                        let tempMsg = \"Filter failed on group \".concat(g + 1, \":\\n\");\n                        switch(value.bonus.equation){\n                            case \"min\":\n                                tempMsg += \"not enough pets, min \".concat(value.bonus.amount, \" but \").concat(value.pets.length, \" remain\");\n                                break;\n                            case \"max\":\n                                break;\n                            case \"eq\":\n                                tempMsg += \"not enough pets, req. \".concat(value.bonus.amount, \" but \").concat(value.pets.length, \" remain\");\n                                break;\n                            default:\n                                throw new Error(\"impossible case\");\n                        }\n                        failedFiltersObj[key] = tempMsg;\n                        allPassed = false;\n                    }\n                }\n            }\n            //Meaning there are just no possible combinations\n            if (skipChecks) {\n                if (Object.values(requiredPetBonusMap).length > 0) {\n                    if (!(\"generic\" in failedFiltersObj)) {\n                        failedFiltersObj[\"generic\"] = \"Individual filters all succeeded, but the combination of all is impossible starting group \".concat(g + 1);\n                    }\n                }\n                break;\n            } else if (!ignoreCustomBonuses) {\n                let bestCurrTeamScore = this.calculateGroupScore(combinations.team, defaultRank);\n                let score = bestCurrTeamScore.groupScore;\n                let individualRel = Object.values(whitelistRel);\n                if (activeBonuses.length > 0 || individualRel.length > 0) {\n                    let added = false;\n                    for(let j = 0; j < individualRel.length; j++){\n                        let curBonus = individualRel[j];\n                        let mult = curBonus.parameters.damageBias / 100;\n                        let cutOff = score * mult;\n                        let tmLength = combinations.team.length;\n                        let amountToAdd = 0;\n                        let bonusPet = petsMap[curBonus.id];\n                        let dmg = this.calculatePetBaseDamage(bonusPet, defaultRank);\n                        if (!bonusPet) continue;\n                        bonusPet.BonusList.forEach((e)=>{\n                            let modifiedAddition = 0;\n                            //Dng dmg\n                            if (e.ID === 1013) {\n                                dmg *= 1 + this.EXP_DMG_MOD;\n                                if (tmLength > 1) {\n                                    //Get avg base group score, then remove 1, apply mult (iplier), apply modifier, add it\n                                    modifiedAddition += bestCurrTeamScore.baseGroupScore / tmLength * (tmLength - 1) * mult * this.EXP_DMG_MOD;\n                                // modifiedAddition += (this.calculatePetBaseDamage(bonusPet, defaultRank) * 3 * mult * (this.EXP_DMG_MOD));\n                                } else {\n                                    modifiedAddition = bestCurrTeamScore.baseGroupScore * mult * this.EXP_DMG_MOD;\n                                }\n                                amountToAdd += modifiedAddition;\n                            } else if (e.ID === 1012) {\n                                dmg *= 1 + this.EXP_TIME_MOD;\n                                if (tmLength > 1) {\n                                    //Get avg base group score, then remove 1, apply mult (iplier), apply modifier, add it\n                                    modifiedAddition += this.calculatePetBaseDamage(bonusPet, defaultRank) * 3 * mult * this.EXP_TIME_MOD;\n                                } else {\n                                    modifiedAddition = bestCurrTeamScore.baseGroupScore * mult * this.EXP_TIME_MOD;\n                                }\n                                amountToAdd += modifiedAddition;\n                            }\n                        });\n                        dmg += amountToAdd;\n                        if (dmg > cutOff) {\n                            added = true;\n                            let newBonus = JSON.parse(JSON.stringify(curBonus));\n                            // newBonus.placement = 'relative';\n                            newBonus.placement = \"team\";\n                            newBonus.parameters.team = g;\n                            newBonus.pet = bonusPet;\n                            newBonus.parameters.fake = true;\n                            //Since it is a single pet, and it *has* to be inserted now, we can hitchike off of the built in `whilteListReqPets` system\n                            whiteListReqPets.push(newBonus);\n                            //Add pet into list of pets to combine, if it's not already there\n                            let exists = finalPetsCollection.find((a)=>a.ID === bonusPet.ID);\n                            if (!exists) {\n                                finalPetsCollection.push(bonusPet);\n                            }\n                        }\n                    }\n                    for(let j = 0; j < activeBonuses.length; j++){\n                        let curBonus = activeBonuses[j];\n                        let mult = curBonus.relThresh / 100;\n                        let cutOff = score * mult;\n                        let counterBonus = 0;\n                        let innerAdded = false;\n                        let temp = requiredPetBonusMap[curBonus.id];\n                        if (curBonus.placement === \"rel\") {\n                            let bonusPets = temp.pets;\n                            bonusPets.forEach((bonusPet)=>{\n                                let dmg = this.calculatePetBaseDamage(bonusPet, defaultRank);\n                                let tmLength = combinations.team.length;\n                                let amountToAdd = 0;\n                                bonusPet.BonusList.forEach((e)=>{\n                                    let modifiedAddition = 0;\n                                    //Dng dmg\n                                    if (e.ID === 1013) {\n                                        dmg *= 1 + this.EXP_DMG_MOD;\n                                        if (tmLength > 1) {\n                                            //Get avg base group score, then remove 1, apply mult (iplier), apply modifier, add it\n                                            modifiedAddition += bestCurrTeamScore.baseGroupScore / tmLength * (tmLength - 1) * mult * this.EXP_DMG_MOD;\n                                        // modifiedAddition += (this.calculatePetBaseDamage(bonusPet, defaultRank) * 3 * mult * (this.EXP_DMG_MOD));\n                                        } else {\n                                            modifiedAddition = bestCurrTeamScore.baseGroupScore * mult * this.EXP_DMG_MOD;\n                                        }\n                                        amountToAdd += modifiedAddition;\n                                    } else if (e.ID === 1012) {\n                                        dmg *= 1 + this.EXP_TIME_MOD;\n                                        if (tmLength > 1) {\n                                            //Get avg base group score, then remove 1, apply mult (iplier), apply modifier, add it\n                                            modifiedAddition += bestCurrTeamScore.baseGroupScore / tmLength * (tmLength - 1) * mult * this.EXP_TIME_MOD;\n                                        } else {\n                                            modifiedAddition = bestCurrTeamScore.baseGroupScore * mult * this.EXP_TIME_MOD;\n                                        }\n                                        amountToAdd += modifiedAddition;\n                                    }\n                                });\n                                dmg += amountToAdd;\n                                if (dmg > cutOff) {\n                                    added = true;\n                                    innerAdded = true;\n                                    temp.active = true;\n                                    temp.tempMin = true;\n                                    temp.tempRequired = temp.tempRequired !== 0 && temp.tempRequired ? temp.tempRequired + 1 : 1;\n                                    if (!temp.tempRequiredPets) {\n                                        temp.tempRequiredPets = [];\n                                    }\n                                    temp.tempRequiredPets.push(bonusPet);\n                                    let exists = finalPetsCollection.find((a)=>a.ID === bonusPet.ID);\n                                    if (!exists) {\n                                        finalPetsCollection.push(bonusPet);\n                                    // exists = requiredPetsOverall.find((a) => a.ID === bonusPet.ID);\n                                    // if (!exists) {\n                                    //     requiredPetsOverall.push(bonusPet);\n                                    // }\n                                    }\n                                }\n                            });\n                            if (!innerAdded) {\n                                temp.tempMin = null;\n                                temp.tempRequired = 0;\n                                temp.tempRequiredPets = [];\n                                temp.active = false;\n                            }\n                        }\n                    }\n                    //At least 1 rel pet was added, recalc teams with it\n                    if (added) {\n                        // finalPetsCollection = this.getBestDamagePets(petsCollection, defaultRank, { requiredPets: requiredPetsOverall });\n                        time1 = new Date();\n                        let bonusList = Object.values(requiredPetBonusMap);\n                        for(let j = 0; j < whiteListReqPets.length; j++){\n                            // if (whiteListReqPets[j].placement === `relative`) {\n                            //     // finalPetsCollection.push(whiteListReqPets[j].pet)\n                            // }\n                            // else {\n                            bonusList.push(whiteListReqPets[j]);\n                        // }\n                        }\n                        let combinations_rel = getCombinationsInner(finalPetsCollection, Math.min(k, finalPetsCollection.length), bonusList);\n                        console.log(\"got new combinations after the rel calcs\");\n                        if (combinations_rel !== -1) {\n                            //Only filter out the fake `rel` whitelisted pets, if they WERE selected by the combo\n                            whiteListReqPets = whiteListReqPets.filter((e)=>{\n                                let temp = combinations_rel;\n                                if (!e.parameters.fake) {\n                                    return true;\n                                } else {\n                                    let found = combinations_rel.team.find((inner_pet)=>inner_pet.ID === e.id);\n                                    return !found;\n                                }\n                            });\n                        }\n                        //Only hard crash in case of no backup team that is possible\n                        if (combinations_rel === -1 && whiteListReqPets.length === 0) {\n                            if (!(\"generic\" in failedFiltersObj)) {\n                                failedFiltersObj[\"generic\"] = \"Individual filters all succeeded, but the combination of all is impossible starting group \".concat(g + 1, \" (too many relative pets in one team)\");\n                            }\n                            break;\n                        } else if (combinations_rel !== -1) {\n                            combinations = combinations_rel;\n                            //Also need to delete all the rel whitelists from future teams, only if they exist\n                            for(let x = 0; x < bonusList.length; x++){\n                                if (bonusList[x].id in whitelistRel && combinations_rel.team.find((inner_pet)=>inner_pet.ID === bonusList[x].id)) {\n                                    delete whitelistRel[bonusList[x].id];\n                                }\n                            }\n                        }\n                    }\n                }\n                bestGroups.push(combinations.team);\n                //remove whitelisted relative \n                for(let i = 0; i < combinations.team.length; i++){\n                    if (combinations.team[i].ID in whitelistRel) {\n                        delete whitelistRel[combinations.team[i].ID];\n                    }\n                }\n                petsCollection = petsCollection.filter((pet1)=>{\n                    let res = true;\n                    for(let i = 0; i < combinations.team.length; i++){\n                        if (combinations.team[i].ID === pet1.ID) {\n                            res = false;\n                            break;\n                        }\n                    }\n                    return res;\n                });\n            } else {\n                bestGroups.push(combinations.team);\n                //remove whitelisted relative \n                for(let i = 0; i < combinations.team.length; i++){\n                    if (combinations.team[i].ID in whitelistRel) {\n                        delete whitelistRel[combinations.team[i].ID];\n                    }\n                }\n                //Remove the pets\n                petsCollection = petsCollection.filter((pet1)=>{\n                    let res = true;\n                    for(let i = 0; i < combinations.team.length; i++){\n                        if (combinations.team[i].ID === pet1.ID) {\n                            res = false;\n                            break;\n                        }\n                    }\n                    return res;\n                });\n            }\n        }\n        time4 = new Date();\n        console.log(\"time to get best combo: \".concat((time4 - time3) / 1000, \" seconds\"));\n        if (other === null || other === void 0 ? void 0 : other.setFailedFilters) {\n            other.setFailedFilters(failedFiltersObj);\n        }\n        // // Reset any auto placements back to proper auto for visual purposes\n        // for (const [key, value] of Object.entries(autoPets)) {\n        //     autoPets[key].placement = 'auto';\n        // }\n        let swapHappened = true;\n        let numSwaps = -1;\n        while(swapHappened){\n            numSwaps++;\n            swapHappened = false;\n            let copyGroups = JSON.parse(JSON.stringify(bestGroups));\n            const maxSwaps = 2;\n            // Go over each pet and bubble sort if possible\n            for(let group_index = 0; group_index < copyGroups.length; group_index++){\n                let team = copyGroups[group_index];\n                for(let pet_index = 0; pet_index < team.length; pet_index++){\n                    let pet1 = team[pet_index];\n                    let swapPet = null;\n                    let group = team;\n                    let tooHigh = false;\n                    let tooLow = false;\n                    // This pet was placed by `group` by user, do not shift!\n                    if (lockedPets[pet1.ID]) {\n                        continue;\n                    }\n                    //Might not need this since things start low and go up\n                    //First check if the pet should be on a lower team\n                    //Do this by seeing if a swap gives a higher damage on current team\n                    if (group_index < bestGroups.length - 1) {\n                        let subsequentGroup = copyGroups[group_index + 1];\n                        let triedPets = {};\n                        let currentGroupScore = this.calculateGroupScore(group, defaultRank).groupScore;\n                        for(let i = 0; i < maxSwaps; i++){\n                            for(let j = 0; j < subsequentGroup.length; j++){\n                                let newPet = subsequentGroup[j];\n                                if (newPet.Type === pet1.Type && !triedPets[newPet.ID]) {\n                                    triedPets[newPet.ID] = newPet;\n                                    let newGroup = JSON.parse(JSON.stringify(team));\n                                    newGroup[pet_index] = newPet;\n                                    let newScore = this.calculateGroupScore(newGroup, defaultRank).groupScore;\n                                    // There is a better pet from lower team to grab!\n                                    if (newScore > currentGroupScore) {\n                                        let bigsad = -1;\n                                        tooHigh = true;\n                                    // swapHappened = true;\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    //Second check if the pet should be on a higher team\n                    //Do this by seeing if a swap gives a higher damage on to the previous team\n                    if (!tooHigh && group_index > 0) {\n                        let currentCounter = group_index - 1;\n                        while(currentCounter >= 0){\n                            let previousGroup = copyGroups[currentCounter];\n                            let triedPets = {};\n                            let currentGroupScore = this.calculateGroupScore(previousGroup, defaultRank).groupScore;\n                            for(let i = 0; i < maxSwaps; i++){\n                                for(let j = 0; j < previousGroup.length; j++){\n                                    let newPet = previousGroup[j];\n                                    if (lockedPets[newPet.ID]) {\n                                        continue;\n                                    }\n                                    if (newPet.Type === pet1.Type && !triedPets[newPet.ID]) {\n                                        // if (!triedPets[newPet.ID]) {\n                                        triedPets[newPet.ID] = newPet;\n                                        let newGroup = JSON.parse(JSON.stringify(previousGroup));\n                                        newGroup[j] = pet1;\n                                        let newScore = this.calculateGroupScore(newGroup, defaultRank).groupScore;\n                                        // There is a better pet from lower team to grab!\n                                        if (newScore > currentGroupScore) {\n                                            tooLow = true;\n                                            swapHappened = true;\n                                            bestGroups[group_index][pet_index] = JSON.parse(JSON.stringify(newPet));\n                                            bestGroups[currentCounter][j] = JSON.parse(JSON.stringify(pet1));\n                                            let bigsad = -1;\n                                        }\n                                        break;\n                                    }\n                                    if (swapHappened) {\n                                        break;\n                                    }\n                                }\n                                if (swapHappened) {\n                                    break;\n                                }\n                            }\n                            if (swapHappened) {\n                                break;\n                            }\n                            currentCounter--;\n                        }\n                    }\n                    if (swapHappened) {\n                        break;\n                    }\n                }\n                if (swapHappened) {\n                    break;\n                }\n            }\n        }\n        console.log(\"num swaps: \".concat(numSwaps));\n        bestGroups.forEach((inner_group)=>{\n            inner_group.sort((a, b)=>a.ID - b.ID);\n            inner_group.sort((a, b)=>a.Type - b.Type);\n        });\n        return bestGroups;\n    },\n    calcBestTokenGroup: function(petsCollection, defaultRank, numGroups, other) {\n        const k = 4; // Size of each group\n        numGroups = numGroups ? numGroups : 7;\n        let damageMode = 1; //1 = max damage, 2 = min\n        const memo = {};\n        const memoizedGroupScore = (innerGroup)=>{\n            const key = innerGroup.ID;\n            if (!memo[key] || memo[key]) {\n                let res = this.calculateGroupScore(innerGroup.team, defaultRank);\n                let sum = res.tokenMult;\n                memo[key] = {\n                    token: sum,\n                    damage: res.groupScore,\n                    other: res\n                };\n            }\n            return memo[key];\n        };\n        const getCombinationsInner = (array, k, requiredPetsObj)=>{\n            // let temp = [];\n            let best = -1;\n            const f = (start, prevCombination)=>{\n                let required = 0;\n                let ignored = 0;\n                let requiredPets = [];\n                let ignoredPets = [];\n                if (requiredPetsObj) {\n                    required = requiredPetsObj.min ? requiredPetsObj.min : 0;\n                    requiredPets = requiredPetsObj.pets ? requiredPetsObj.pets : [];\n                    ignoredPets = requiredPetsObj.ignoredPets ? requiredPetsObj.ignoredPets : [];\n                }\n                let requiredFound = 0;\n                if (prevCombination.length > 0) {\n                    let id = \"\";\n                    for(let i = 0; i < prevCombination.length; i++){\n                        id = id + prevCombination[i].ID;\n                        if (i + 1 !== prevCombination.length) {\n                            id = id + \",\";\n                        }\n                        if (required > 0) {\n                            for(let x = 0; x < requiredPets.length; x++){\n                                if (prevCombination[i].ID == requiredPets[x].ID) requiredFound++;\n                            }\n                        }\n                        if (ignoredPets.length > 0) {\n                            for(let x = 0; x < ignoredPets.length; x++){\n                                if (prevCombination[i].ID == ignoredPets[x].ID) {\n                                    ignored++;\n                                }\n                            }\n                        }\n                    }\n                    if (requiredFound === required && ignored === 0) {\n                        let x = {\n                            ID: id,\n                            team: prevCombination\n                        };\n                        // temp.push(x);\n                        if (best === -1) {\n                            best = {\n                                ID: id,\n                                team: prevCombination,\n                                score: memoizedGroupScore(x)\n                            };\n                        } else {\n                            let cur = memoizedGroupScore(x);\n                            //Max damage\n                            if (damageMode === 1) {\n                                if (cur.damage > best.score.damage) {\n                                    best = {\n                                        ID: id,\n                                        team: prevCombination,\n                                        score: cur\n                                    };\n                                }\n                            } else {\n                                if (cur.token === best.score.token) {\n                                    // if (cur.other.tokenRewardCount === 4) {\n                                    if (cur.other.tokenRewardCount > 0) {\n                                        if (cur.damage < best.score.damage) {\n                                            best = {\n                                                ID: id,\n                                                team: prevCombination,\n                                                score: cur\n                                            };\n                                        }\n                                    } else {\n                                        if (cur.damage > best.score.damage) {\n                                            best = {\n                                                ID: id,\n                                                team: prevCombination,\n                                                score: cur\n                                            };\n                                        }\n                                    }\n                                } else if (cur.token > best.score.token) {\n                                    best = {\n                                        ID: id,\n                                        team: prevCombination,\n                                        score: cur\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        let temper = 3;\n                    }\n                }\n                if (prevCombination.length === k) {\n                    return;\n                }\n                for(let i = start; i < array.length; i++){\n                    f(i + 1, [\n                        ...prevCombination,\n                        array[i]\n                    ]);\n                }\n            };\n            f(0, []);\n            if (best.team) best.team.sort((a, b)=>{\n                if (a.Type === b.Type) {\n                    return a.ID - b.ID;\n                }\n                return a.Type - b.Type;\n            });\n            return best;\n        };\n        let time3 = new Date();\n        let time4 = new Date();\n        let bestGroups = [];\n        for(let g = 0; g < numGroups; g++){\n            let combinations = -1;\n            let newPetsCollection = JSON.parse(JSON.stringify(petsCollection));\n            let numTokens = 0;\n            let avgTokenPetDmg = 0;\n            let tokenPets = [];\n            let maxDmgPet;\n            let avgdMaxDmg = 0;\n            let tknAir = 0;\n            let tknGnd = 0;\n            newPetsCollection.forEach((pet1)=>{\n                pet1.BonusList.forEach((bonus)=>{\n                    //token bonus\n                    if (bonus.ID === 1016) {\n                        tokenPets.push(pet1);\n                        avgTokenPetDmg += this.calculatePetBaseDamage(pet1, defaultRank);\n                        numTokens++;\n                        if (pet1.Type === 1) {\n                            tknGnd++;\n                        } else if (pet1.Type === 2) {\n                            tknAir++;\n                        }\n                    }\n                });\n            });\n            avgTokenPetDmg /= numTokens;\n            newPetsCollection = this.getBestDamagePets(newPetsCollection, defaultRank, {\n                requiredPets: tokenPets\n            });\n            newPetsCollection = newPetsCollection.sort((a, b)=>this.calculatePetBaseDamage(b, defaultRank) - this.calculatePetBaseDamage(a, defaultRank));\n            for(let i = 0; i < 2; i++){\n                avgdMaxDmg += this.calculatePetBaseDamage(newPetsCollection[i], defaultRank);\n            }\n            avgdMaxDmg /= 2;\n            let bestDamageTeam = this.calcBestDamageGroup(newPetsCollection, defaultRank, 1)[0];\n            avgdMaxDmg = bestDamageTeam ? this.calculateGroupScore(bestDamageTeam, defaultRank) : [];\n            //Create a trash team first\n            if (numTokens >= 4 && tknAir >= 2 && tknGnd >= 2) {\n                //Only force 4 if there are enough for a full synergy\n                damageMode = 2; //Set damage mode to min\n                combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length), {\n                    pets: tokenPets,\n                    min: 4\n                });\n                damageMode = 1; //Set damage back to max\n            } else if (numTokens === 1) {\n                //If it's the last team, slot it in forcefully\n                if (g === numGroups - 1) {\n                    combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length), {\n                        pets: tokenPets,\n                        min: tokenPets.length\n                    });\n                } else {\n                    combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length));\n                }\n            } else if (numTokens > 1) {\n                let percent = (100 - other.tokenDamageBias) / 100;\n                let cutOff = percent * avgdMaxDmg.groupScore; //% of highest available pet's base damage          \n                cutOff /= 5.75; // used for comparing with full team score\n                let minPets = 2;\n                if (tknAir > 1 && tknGnd > 0 || tknGnd > 1 && tknAir > 0) {\n                    minPets = 3;\n                }\n                let numTokenGroups = Math.ceil(numTokens / minPets);\n                //Maximise this team, this turn\n                if (numTokenGroups >= numGroups - g) {\n                    //There are not enough groups for all token pets\n                    if (numTokenGroups - (numGroups - g) >= 0) {\n                        damageMode = 1;\n                    } else damageMode = 2;\n                    combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length), {\n                        pets: tokenPets,\n                        min: minPets\n                    });\n                    damageMode = 1;\n                } else if (avgTokenPetDmg > cutOff) {\n                    let remainingGroups = numGroups - g;\n                    //There are not enough groups for all token pets\n                    if (remainingGroups - numTokenGroups >= 0) {\n                        damageMode = 1;\n                    } else damageMode = 2;\n                    //Maximise this team\n                    combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length), {\n                        pets: tokenPets,\n                        min: minPets\n                    });\n                    damageMode = 1;\n                } else {\n                    combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length), {\n                        pets: [],\n                        min: 0,\n                        ignoredPets: tokenPets\n                    });\n                }\n            } else {\n                combinations = getCombinationsInner(newPetsCollection, Math.min(k, newPetsCollection.length));\n            }\n            if (combinations === -1) {\n                break;\n            } else {\n                let temp = memoizedGroupScore(combinations);\n                bestGroups.push(combinations.team);\n                petsCollection = petsCollection.filter((pet1)=>{\n                    let res = true;\n                    for(let i = 0; i < combinations.team.length; i++){\n                        if (combinations.team[i].ID === pet1.ID) {\n                            res = false;\n                            break;\n                        }\n                    }\n                    return res;\n                });\n            }\n        }\n        time4 = new Date();\n        console.log(\"time to get best combo: \".concat((time4 - time3) / 1000, \" seconds\"));\n        // bestGroups.sort()\n        return bestGroups;\n    },\n    findBestGroups: function(petsCollection, defaultRank, groupRankCritera, numGroups, other) {\n        switch(groupRankCritera){\n            case 1:\n                return this.calcBestDamageGroup(petsCollection, defaultRank, numGroups, other);\n            case 2:\n                return this.calcBestTokenGroup(petsCollection, defaultRank, numGroups, other);\n            case 3:\n                return this.calcBestDamageGroup(petsCollection, defaultRank, numGroups, other);\n        }\n    },\n    calcEquipBonus: function(pet1, bonusInner) {\n        let bonus = 1;\n        let curr = pet1;\n        if (bonusInner.ID === 23) {\n            if (curr.Level < 1) return 0;\n            let x1 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Level);\n            let x2 = Math.max(0, x1 - 45);\n            let x3 = Math.pow(1.15, x2);\n            let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Rank);\n            let x5 = Math.max(0, x4 - 45);\n            let x6 = Math.pow(1.15, x5);\n            let tot3 = (1 + (24 + x3) * 0.01) * (1 + x6 * 0.01) - 1;\n            bonus = tot3;\n        } else if (bonusInner.ID === 28) {\n            if (curr.Level < 1) return 0;\n            let x1 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Level);\n            let x2 = Math.max(0, x1 - 45);\n            let x3 = Math.pow(1.15, x2);\n            let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Rank);\n            let x5 = Math.max(0, x4 - 45);\n            let x6 = Math.pow(1.15, x5);\n            let tot3 = (1 + (24 + x3) * 0.001) * (1 + x6 * 0.01) - 1;\n            bonus = tot3;\n        } else if (bonusInner.ID === 29) {\n            if (curr.Level < 1) return 0;\n            let x1 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Level);\n            let x2 = Math.max(0, x1 - 45);\n            let x3 = Math.pow(1.15, x2);\n            let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Rank);\n            let x5 = Math.max(0, x4 - 45);\n            let x6 = Math.pow(1.15, x5);\n            let tot3 = (1 + (24 + x3) * 0.0025) * (1 + x6 * 0.01) - 1;\n            bonus = tot3;\n        } else if (bonusInner.ID === 34) {\n            if (curr.Level < 1) return 0;\n            let x1 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Level);\n            let x2 = Math.max(0, x1 - 45);\n            let x3 = Math.pow(1.125, x2);\n            let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Rank);\n            let x5 = Math.max(0, x4 - 45);\n            let x6 = Math.pow(1.15, x5);\n            let tot3 = (1 + (9 + x3) * 0.00025) * (1 + x6 * 0.001) - 1;\n            bonus = tot3;\n        } else if (bonusInner.ID === 35) {\n            if (curr.Level < 1) return 0;\n            let x1 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Level);\n            let x2 = Math.max(0, x1 - 45);\n            let x3 = Math.pow(1.125, x2);\n            let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.1, curr.Rank);\n            let x5 = Math.max(0, x4 - 45);\n            let x6 = Math.pow(1.15, x5);\n            let tot3 = (1 + (9 + x3) * 5E-05) * (1 + x6 * 0.001) - 1;\n            bonus = tot3;\n        } else {\n            let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\n            let x2 = 1 + curr.Rank * 0.02;\n            bonus = x1 * x2;\n        }\n        return bonus * 100;\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (helper);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/util/petHelper.js\n"));

/***/ })

});