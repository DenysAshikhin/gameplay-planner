[{"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js":"1","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js":"2","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx":"3","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js":"4","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx":"5","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js":"6","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx":"7","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js":"8","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx":"9","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx":"10","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js":"11","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx":"12","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx":"13","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js":"14","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx":"15","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js":"16","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js":"17","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx":"18","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js":"19","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx":"20","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx":"21","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js":"22","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx":"23","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js":"24","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js":"25","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx":"26","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx":"27","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js":"28","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx":"29","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js":"30","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx":"31","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js":"32","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx":"33","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx":"34","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js":"35","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx":"36","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js":"37","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js":"38","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js":"39","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js":"40","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js":"41","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx":"42","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js":"43","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js":"44","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx":"45","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx":"46"},{"size":2756,"mtime":1705378582114,"results":"47","hashOfConfig":"48"},{"size":535,"mtime":1699206951135,"results":"49","hashOfConfig":"48"},{"size":85807,"mtime":1707350753573,"results":"50","hashOfConfig":"48"},{"size":684,"mtime":1699484623632,"results":"51","hashOfConfig":"48"},{"size":172607,"mtime":1707418633952,"results":"52","hashOfConfig":"48"},{"size":13449,"mtime":1706117256620,"results":"53","hashOfConfig":"48"},{"size":13228,"mtime":1706585232807,"results":"54","hashOfConfig":"48"},{"size":9432,"mtime":1706585232809,"results":"55","hashOfConfig":"48"},{"size":24720,"mtime":1700458980790,"results":"56","hashOfConfig":"48"},{"size":12181,"mtime":1703455828318,"results":"57","hashOfConfig":"48"},{"size":624,"mtime":1699206951135,"results":"58","hashOfConfig":"48"},{"size":174854,"mtime":1700458831390,"results":"59","hashOfConfig":"48"},{"size":8067,"mtime":1699162746129,"results":"60","hashOfConfig":"48"},{"size":486,"mtime":1699471188929,"results":"61","hashOfConfig":"48"},{"size":12689,"mtime":1699412549470,"results":"62","hashOfConfig":"48"},{"size":3882,"mtime":1701043277740,"results":"63","hashOfConfig":"48"},{"size":140,"mtime":1699108764428,"results":"64","hashOfConfig":"48"},{"size":8225,"mtime":1707350753574,"results":"65","hashOfConfig":"48"},{"size":365,"mtime":1699158751671,"results":"66","hashOfConfig":"48"},{"size":3950,"mtime":1700891658095,"results":"67","hashOfConfig":"48"},{"size":2675,"mtime":1700881584918,"results":"68","hashOfConfig":"48"},{"size":654,"mtime":1699206951135,"results":"69","hashOfConfig":"48"},{"size":86336,"mtime":1707418633953,"results":"70","hashOfConfig":"48"},{"size":20933,"mtime":1706117256620,"results":"71","hashOfConfig":"48"},{"size":99899,"mtime":1707419859374,"results":"72","hashOfConfig":"48"},{"size":4016,"mtime":1704817323685,"results":"73","hashOfConfig":"48"},{"size":7728,"mtime":1706585232810,"results":"74","hashOfConfig":"48"},{"size":552,"mtime":1699287646541,"results":"75","hashOfConfig":"48"},{"size":26138,"mtime":1706585232811,"results":"76","hashOfConfig":"48"},{"size":552,"mtime":1700590266467,"results":"77","hashOfConfig":"48"},{"size":27714,"mtime":1706585232811,"results":"78","hashOfConfig":"48"},{"size":23861,"mtime":1707350222230,"results":"79","hashOfConfig":"48"},{"size":437,"mtime":1706585232812,"results":"80","hashOfConfig":"48"},{"size":315,"mtime":1698849505297,"results":"81","hashOfConfig":"48"},{"size":39699,"mtime":1706585232812,"results":"82","hashOfConfig":"48"},{"size":1664,"mtime":1699498174255,"results":"83","hashOfConfig":"48"},{"size":4091,"mtime":1700603484820,"results":"84","hashOfConfig":"48"},{"size":27338,"mtime":1706113945464,"results":"85","hashOfConfig":"48"},{"size":4663,"mtime":1704747926494,"results":"86","hashOfConfig":"48"},{"size":3682,"mtime":1698938060827,"results":"87","hashOfConfig":"48"},{"size":2128,"mtime":1706585232812,"results":"88","hashOfConfig":"48"},{"size":6168,"mtime":1700889351697,"results":"89","hashOfConfig":"48"},{"size":98227,"mtime":1707418633955,"results":"90","hashOfConfig":"48"},{"size":3502,"mtime":1698849505364,"results":"91","hashOfConfig":"48"},{"size":3043,"mtime":1707350753575,"results":"92","hashOfConfig":"48"},{"size":3503,"mtime":1707350753575,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17kfkn8",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx",["233"],[],"\"use client\"\r\n\r\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport ComboListCSS from './comboList.css';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { petNameArray, BonusMap, petNames, getPet } from \"../util/itemMapping.js\";\r\nimport { StaticPetItem } from './PetItem.js';\r\nimport ReactGA from \"react-ga4\";\r\nimport helper from '../util/helper.js';\r\nimport petHelper from '../util/petHelper.js';\r\nimport SearchBox from '../util/search.jsx';\r\n\r\nimport { Reorder } from 'framer-motion'\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport CrossIcon from '../../../public/images/icons/x_icon.svg';\r\nimport DragIcon from '../../../public/images/icons/drag_icon.svg';\r\n\r\nimport DefaultSave from '../util/tempSave.json';\r\nimport { mainTeamSuggestions, reincTeamSuggestions, gearTeamSuggestions, statTeamSuggestions, statTeamMasterList } from './teamSuggestions.js';\r\n\r\nimport Image from 'next/image';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\n\r\n\r\nconst bonusCutOff = 1000;\r\n\r\nfunction PetComboDisplay({ petCombos, unlockedPets, petMap }) {\r\n\r\n    if (!BonusMap[petCombos[0].BonusID]) return <></>\r\n\r\n    const comboBonusLabel = BonusMap[petCombos[0].BonusID].label;\r\n    const numCombos = petCombos.length;\r\n    let numPossibleCombos = 0;\r\n    let possibleCombosMap = {};\r\n\r\n    for (let i = 0; i < petCombos.length; i++) {\r\n        let cur = petCombos[i];\r\n        let possible = true;\r\n\r\n        if (!(cur.BonusID in possibleCombosMap)) {\r\n\r\n            possibleCombosMap[cur.BonusID] = {};\r\n        }\r\n        //\r\n        for (let j = 0; j < cur.PetID.length; j++) {\r\n            if (cur.PetID[j] === -99) {\r\n                continue;\r\n            }\r\n            if (!(cur.PetID[j] in unlockedPets)) {\r\n                possible = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        //s\r\n        if (possible) {\r\n            numPossibleCombos++;\r\n            possibleCombosMap[cur.BonusID][cur.ID] = true;\r\n        }\r\n\r\n        if (cur.PetID.length === 2) {\r\n            cur.PetID.push(-99)\r\n        }\r\n\r\n    }\r\n\r\n    let completeArray = Array(numCombos).fill(true);\r\n\r\n    for (let i = 0; i < numCombos; i++) {\r\n        if (i + 1 > numPossibleCombos) {\r\n            completeArray[i] = false;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Accordion>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flex: '1',\r\n                        justifyContent: 'space-between',\r\n                        // backgroundColor: '#4b4b4b',\r\n                    }}\r\n                >\r\n                    <div>\r\n                        {comboBonusLabel}\r\n                    </div>\r\n                    <div\r\n                        style={{ marginLeft: '12px' }}\r\n                    >\r\n                        {completeArray.map((e, index) => {\r\n\r\n                            if (e) {\r\n                                return (\r\n                                    <span className='greenDot'\r\n                                        style={{\r\n                                            margin: '0 1px 0 1px'\r\n                                        }}\r\n                                        key={index}\r\n                                    >\r\n\r\n                                    </span>\r\n                                )\r\n                            }\r\n                            return (\r\n                                <span className='redDot'\r\n                                    style={{\r\n                                        margin: '0 1px 0 1px'\r\n                                    }}\r\n                                    key={index}\r\n                                >\r\n                                </span>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </AccordionSummary>\r\n            <AccordionDetails >\r\n                <div\r\n                    style={{\r\n                        display: 'flex', flexDirection: 'column', width: '270px',\r\n                        position: 'relative'\r\n                    }}\r\n                    // className={`greenStripes`}\r\n                    className={`grayStripes`}\r\n                >\r\n                    {petCombos && petCombos.map((petCombo, i) => {\r\n                        const PetIDArray = petCombo.PetID;\r\n                        let margin = ``;\r\n                        if (i === 0) {\r\n                            margin = '0'\r\n                        }\r\n                        else if (possibleCombosMap[petCombo.BonusID][petCombo.ID] === possibleCombosMap[petCombos[i - 1].BonusID][petCombos[i - 1].ID]) {\r\n                            margin = '-5px 0 0 0'\r\n                        }\r\n                        else {\r\n                            margin = '0 0 0 0'\r\n                        }\r\n\r\n\r\n\r\n                        return (\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                margin: margin,\r\n                                border: `5px solid ${possibleCombosMap[petCombo.BonusID][petCombo.ID] ? 'green' : 'red'}`\r\n                            }} key={i}>\r\n                                {PetIDArray.map((petId, j) => {\r\n\r\n                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === petId)\r\n                                    return (\r\n                                        <div key={j}\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                                alignItems: \"center\",\r\n                                                width: '90px',\r\n                                                height: '90px',\r\n                                                opacity: petId in unlockedPets || petId === -99 ? `` : `0.6`\r\n                                                // margin: j % 2 === 0 ? '1px 1px 1px 1px' : '1px 0 1px 0'\r\n                                                // border: '1px solid black'\r\n                                            }}\r\n                                            // className={petId in unlockedPets ? `` : 'whiteBackground redBorder'}\r\n                                            className={petId in unlockedPets || petId === -99 ? `lightGrayBackground` : ``}\r\n                                        >\r\n                                            {petId !== -99 && (\r\n                                                <StaticPetItem petData={{ ...staticPetData, pet: petMap[petId] }} highlight={petId in unlockedPets} />\r\n                                            )}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {/* <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            top: '0',\r\n                            left: '0',\r\n                            // zIndex: '-2'\r\n                        }}\r\n                        className={`greenStripes`}\r\n                    /> */}\r\n\r\n\r\n                </div>\r\n            </AccordionDetails>\r\n        </Accordion >\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default function Pets() {\r\n\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n    }, [clientData]);\r\n\r\n\r\n    const [clientUseExpedition, setUseExpedition] = useLocalStorage('useExpedition', false);\r\n    const [useExpedition, setRunTimeUseExpedition] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setRunTimeUseExpedition(clientUseExpedition);\r\n    }, [clientUseExpedition]);\r\n\r\n    const [manualEnabledPetsLoaded, setManualEnabledPetsLoaded] = useState(false);\r\n    const [manualEnabledPets, setManualEnabledPetsRunTime] = useState({});\r\n    const [manualEnabledPetsClient, setManualEnabledPets] = useLocalStorage(\"manualEnabledPets\", {});\r\n    useEffect(() => {\r\n        setManualEnabledPetsLoaded(true);\r\n        setManualEnabledPetsRunTime(manualEnabledPetsClient);\r\n    }, [manualEnabledPetsClient])\r\n\r\n\r\n    const [priorityList, setPriorityList] = useState([]);\r\n\r\n    const [priorityMap, setPriorityMap] = useState({\r\n        // 1: { mode: 'max', label: BonusMap[1].label, id: 1 },\r\n        // 2: { mode: 'max', label: BonusMap[2].label, id: 2 },\r\n        // 3: { mode: 'max', label: BonusMap[3].label, id: 3 },\r\n        // 4: { mode: 'max', label: BonusMap[4].label, id: 4 },\r\n        // 28: { mode: 'max', label: BonusMap[28].label, id: 28 },s\r\n    });\r\n\r\n    const [currentPresetName, setCurrentPresetName] = useState('');\r\n    const [petWhiteList, setPetWhiteList] = useState({});\r\n    const [recommendedSelected, setRecommendedSelected] = useState(false);\r\n    const [customeSelected, setCustomSelected] = useState(false);\r\n\r\n    const [customPresets, setCustomPresetsRuntTime] = useState({});\r\n    const [customPresetsClient, setCustomPresets] = useLocalStorage(`customPresets`, {});\r\n    useEffect(() => {\r\n        setCustomPresetsRuntTime(customPresetsClient);\r\n    }, [customPresetsClient]);\r\n\r\n\r\n\r\n    const [loadPreset, setLoadPreset] = useState('');\r\n\r\n\r\n    const comboList = data.PetsSpecial;\r\n\r\n    let airPets, groundPets, currentBonuses, selectedPetMap;\r\n    [airPets, groundPets, currentBonuses, selectedPetMap] = useMemo(() => {\r\n        let result = petHelper.findBestTeam(data, { manualEnabledPets: useExpedition ? manualEnabledPets : {}, priorityList: priorityList, priorityMap: priorityMap, petWhiteList: petWhiteList });\r\n        let currentBonuses = result[2];\r\n\r\n        for (const [key, value] of Object.entries(priorityMap)) {\r\n            if (value.id >= 1000) {\r\n                continue;\r\n            }\r\n            if (!currentBonuses[value.id] && value.count !== 0) {\r\n                currentBonuses[value.id] = { ID: value.id, Power: 0, Gain: 0, count: 0, sum: 0, label: value.label }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n        [data, priorityList, priorityMap, petWhiteList, useExpedition, manualEnabledPets]\r\n    );\r\n\r\n\r\n    const [statPriorityList, setStatPriorityList] = useState({});\r\n    const [statPriorityMap, setStatPriorityMap] = useState({});\r\n    const [statPriorityWhitelist, setStatPriorityWhitelist] = useState({});\r\n\r\n    let preGeneratedTeams = useMemo(() => {\r\n\r\n        setRecommendedSelected(true);\r\n        let priorityList = {};\r\n        let priorityMap = {};\r\n        let petWhiteList = {};\r\n        let presetPets = {};\r\n\r\n        let mainTeam = {};\r\n        let reincTeam = {};\r\n        let gearTeam = {};\r\n        for (let i = 0; i < 3; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    priorityList = mainTeamSuggestions[data.AscensionCount].priorityList;\r\n                    priorityMap = mainTeamSuggestions[data.AscensionCount].priorityMap;\r\n                    presetPets = mainTeamSuggestions[data.AscensionCount].petWhiteList ? mainTeamSuggestions[data.AscensionCount].petWhiteList : {};\r\n                    break;\r\n                case 1:\r\n                    priorityList = reincTeamSuggestions[data.AscensionCount].priorityList;\r\n                    priorityMap = reincTeamSuggestions[data.AscensionCount].priorityMap;\r\n                    presetPets = reincTeamSuggestions[data.AscensionCount].petWhiteList ? reincTeamSuggestions[data.AscensionCount].petWhiteList : {};\r\n                    break;\r\n                case 2:\r\n                    priorityList = gearTeamSuggestions[data.AscensionCount].priorityList;\r\n                    priorityMap = gearTeamSuggestions[data.AscensionCount].priorityMap;\r\n                    presetPets = gearTeamSuggestions[data.AscensionCount].petWhiteList ? gearTeamSuggestions[data.AscensionCount].petWhiteList : {};\r\n                    break;\r\n                case 'None':\r\n                    priorityList = [];\r\n                    priorityMap = {};\r\n                    break;\r\n                default:\r\n            }\r\n            let airPets, groundPets, currentBonuses, selectedPetMap;\r\n            [airPets, groundPets, currentBonuses, selectedPetMap] = petHelper.findBestTeam(\r\n                data,\r\n                { manualEnabledPets: manualEnabledPets, priorityList: priorityList, priorityMap: priorityMap, petWhiteList: petWhiteList }\r\n            );\r\n\r\n            let combinedList = airPets.concat(groundPets);\r\n            switch (i) {\r\n                case 0:\r\n                    mainTeam = combinedList;\r\n                    break;\r\n\r\n                case 1:\r\n                    reincTeam = combinedList;\r\n                    break;\r\n\r\n                case 2:\r\n                    gearTeam = combinedList;\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        let existingStats = {};\r\n\r\n        let poopCombo = {\r\n            satisfied: false,\r\n            requiredID: {\r\n                4: true,\r\n                16: true,\r\n            }\r\n        };\r\n\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = mainTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = mainTeam;\r\n            }\r\n        }\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = reincTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = reincTeam;\r\n            }\r\n        }\r\n        if (!poopCombo.satisfied) {\r\n            let missed = false;\r\n            Object.keys(poopCombo.requiredID).forEach((inner_val) => {\r\n                let temp = gearTeam.find((a) => {\r\n                    return a.BonusList.find(\r\n                        (b) => {\r\n                            return b.ID === Number(inner_val)\r\n                        }\r\n                    )\r\n                })\r\n                if (!temp) {\r\n                    missed = true;\r\n                }\r\n            });\r\n            if (!missed) {\r\n                poopCombo.satisfied = true;\r\n                poopCombo.team = gearTeam;\r\n            }\r\n        }\r\n        \r\n        let fullPetList = mainTeam.concat(reincTeam.concat(gearTeam));\r\n        fullPetList.forEach((inner_val) => {\r\n            inner_val.BonusList.forEach((inner_bonus) => {\r\n                if (inner_bonus.ID >= 1000) return;\r\n                if (!existingStats[inner_bonus.ID]) {\r\n                    existingStats[inner_bonus.ID] = 0;\r\n                }\r\n                existingStats[inner_bonus.ID]++;\r\n            })\r\n        });\r\n\r\n        let newPriorityList = JSON.parse(JSON.stringify(statTeamMasterList.priorityList));\r\n        let newPriorityMap = JSON.parse(JSON.stringify(statTeamMasterList.priorityMap));\r\n        let newPetWhiteList = statTeamMasterList.petWhiteList ? JSON.parse(JSON.stringify(statTeamMasterList.petWhiteList)) : {};\r\n\r\n        setStatPriorityList(newPriorityList);\r\n        setStatPriorityMap(newPriorityMap);\r\n        setStatPriorityWhitelist(newPetWhiteList);\r\n\r\n        for (const [key, value] of Object.entries(newPriorityMap)) {\r\n            //only turn off poop stuff if we have the combo in the other teams\r\n            if (key in poopCombo.requiredID) {\r\n                if (poopCombo.satisfied) {\r\n                    newPriorityMap[key].count = 0;\r\n                }\r\n            }\r\n            //Do not reset card power or exp, also reinc and ir for lower A fallback\r\n            else if (key in existingStats && key !== '21' && key !== '22'\r\n            && key !== '5' && key !== '6'\r\n            ) {\r\n                newPriorityMap[key].count = 0;\r\n            }\r\n        }\r\n    },\r\n        [data, petWhiteList, useExpedition, manualEnabledPets])\r\n    // statTeamMasterList\r\n\r\n    let specialCombos = {};\r\n    let partialCombos = {};\r\n\r\n    comboList.forEach((combo, index) => {\r\n        if (index === 0) return;\r\n\r\n        if (!BonusMap[combo.BonusID]) return;\r\n\r\n        let matched = true;\r\n        let required = 0;\r\n        let partial = 0;\r\n\r\n        for (let i = 0; i < combo.PetID.length; i++) {\r\n\r\n            if (combo.PetID[i] <= 0) {\r\n                continue;\r\n            }\r\n\r\n            required++;\r\n\r\n            let found = false;\r\n\r\n            found = airPets.find((pet) => pet.ID === combo.PetID[i]);\r\n            if (found) {\r\n                partial++;\r\n                continue\r\n            }\r\n            found = groundPets.find((pet) => pet.ID === combo.PetID[i]);\r\n            if (found) {\r\n                partial++;\r\n                continue\r\n            }\r\n        }\r\n\r\n        if (partial === required) {\r\n            if (!specialCombos[combo.BonusID]) {\r\n                specialCombos[combo.BonusID] = { ...combo, rootName: BonusMap[combo.BonusID].rootName, odd: BonusMap[combo.BonusID].odd, name: BonusMap[combo.BonusID].label, count: 1 };\r\n            }\r\n            else {\r\n                specialCombos[combo.BonusID].count++;\r\n            }\r\n\r\n        }\r\n        else if (partial > 0) {\r\n            if (!partialCombos[combo.BonusID]) {\r\n                partialCombos[combo.BonusID] = { ...combo, rootName: BonusMap[combo.BonusID].rootName, odd: BonusMap[combo.BonusID].odd, name: BonusMap[combo.BonusID].label, count: 1 };\r\n            }\r\n            else {\r\n                partialCombos[combo.BonusID].count++;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n    const comboByBonusId = comboList.reduce((accum, combo, i) => {\r\n        if (i === 0) return accum;\r\n        accum[combo.BonusID] = accum[combo.BonusID] ? [...accum[combo.BonusID], combo] : [combo];\r\n        return accum;\r\n    }, {});\r\n\r\n    let unlockedPetsMap = {};\r\n    let petMap = {};\r\n\r\n    const positiveRankedPets = data.PetsCollection.filter(\r\n        (pet) => {\r\n            // const isValidRank = !!pet.Rank;//Instead of relying on defaultRank always = 0, select valid ranks if they exist (not 0)\r\n            petMap[pet.ID] = pet;\r\n            const isValidLocked = !!pet.Locked;\r\n            return isValidLocked;\r\n        }\r\n    )\r\n\r\n    let petSearchList = [];\r\n    for (let i = 0; i < positiveRankedPets.length; i++) {\r\n        let cur = positiveRankedPets[i];\r\n        unlockedPetsMap[cur.ID] = cur;\r\n        if (!petWhiteList[cur.ID]) {\r\n            petSearchList.push({ label: cur.name, id: cur.ID });\r\n        }\r\n    }\r\n\r\n    let bonusesWithPets = {};\r\n    data.PetsCollection.forEach((bonus_pet) => {\r\n        bonus_pet.BonusList.forEach((pet_bonus_inner) => {\r\n            bonusesWithPets[pet_bonus_inner.ID] = bonus_pet;\r\n        })\r\n    })\r\n\r\n    let searchList = [];\r\n    for (const [key, value] of Object.entries(BonusMap)) {\r\n\r\n        if (value.id >= bonusCutOff || priorityMap[key] || !bonusesWithPets[value.id]) {\r\n            continue;\r\n        }\r\n        searchList.push({ label: value.label, id: value.id });\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                backgroundColor: 'black',\r\n                position: 'relative',\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flex: '1',\r\n                    // alignItems: 'center',\r\n                    // justifyContent: 'center',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    paddingLeft: '12px'\r\n                }}\r\n            >\r\n                {/* Pet Combos */}\r\n                <div style={{\r\n                    marginTop: '12px',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    maxHeight: 'calc(100% - 40px)',\r\n                    // overflowY: 'auto',\r\n                    padding: '6px',\r\n                    borderRadius: '6px',\r\n                    border: `2px solid rgba(255,255,255,0.7)`,\r\n                }}>\r\n                    <h2 className='importantText' style={{ textAlign: 'center', marginTop: '0', marginBottom: '12px' }}>Pet Combo List</h2>\r\n                    <div style={{ borderRadius: '6px', maxHeight: 'calc(100% - 42px)', height: 'calc(100% - 42px)', overflow: 'hidden' }}>\r\n                        <div\r\n                            className='importantText'\r\n                            style={{\r\n                                display: 'flex', flexDirection: 'column',\r\n                                maxHeight: '100%',\r\n                                overflowY: 'auto'\r\n\r\n                            }}>\r\n                            {comboByBonusId && Object.values(comboByBonusId).map((comboArray, i) => {\r\n                                return <PetComboDisplay\r\n                                    petMap={petMap}\r\n                                    petCombos={comboArray}\r\n                                    key={i}\r\n                                    unlockedPets={unlockedPetsMap}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <>\r\n                    {/* Active team builder */}\r\n                    {true && (<div className='teamBuilder importantText'\r\n                        style={{\r\n                            borderRadius: '6px',\r\n                            border: `2px solid rgba(255,255,255,0.7)`,\r\n                            margin: '12px 24px',\r\n                            maxHeight: 'calc(100% - 24px)',\r\n                            overflow: 'auto',\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)'\r\n                        }}>\r\n\r\n                        {/* List Table */}\r\n                        <div\r\n                            style={{ alignSelf: 'flex-start', minWidth: '580px', margin: '0 12px' }}\r\n                        >\r\n                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                {/* Priority List */}\r\n                                <div\r\n                                    style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center', }}\r\n                                >\r\n                                    Priority List\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    // flexDirection: 'column',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    marginTop: '12px'\r\n                                }}>\r\n\r\n                                <SearchBox\r\n                                    margin='1px 0 0 6px'\r\n                                    data={{\r\n                                        list: searchList\r\n                                    }}\r\n                                    placeholder={`Select a bonus`}\r\n                                    onSelect={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"pets_interaction\",\r\n                                            action: `whitelist_bonus`,\r\n                                            label: e.label,\r\n                                            value: e.id\r\n                                        })\r\n\r\n                                        setPriorityMap((curMap) => {\r\n                                            let newMap = { ...curMap };\r\n                                            newMap[e.id] = { mode: 'max', label: BonusMap[e.id].label, id: e.id, count: -1, current: 0 };\r\n                                            return newMap;\r\n                                        });\r\n                                        setPriorityList((curList) => {\r\n                                            let newList = [...curList];\r\n                                            newList.push(e.id);\r\n                                            return newList;\r\n                                        });\r\n                                    }}\r\n                                />\r\n                                <div className='rainbowBorder' style={{ margin: '0 12px 0 0', display: 'flex', borderWidth: '4px', padding: '3px' }}>\r\n                                    <div>\r\n                                        Recommended Presets\r\n                                    </div>\r\n                                    <div>\r\n                                        <select\r\n                                            className='importantText'\r\n                                            aria-label='Select a default team preset'\r\n                                            style={{ maxWidth: '144px', marginLeft: '12px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                            onChange={\r\n                                                (selected_mode) => {\r\n                                                    setRecommendedSelected(true);\r\n                                                    ReactGA.event({\r\n                                                        category: \"pets_interaction\",\r\n                                                        action: `selected_recommended_team`,\r\n                                                        label: selected_mode.target.value\r\n                                                    })\r\n                                                    let presetPets = {};\r\n                                                    switch (selected_mode.target.value) {\r\n                                                        case 'Main Team':\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount].priorityMap)));\r\n                                                            presetPets = mainTeamSuggestions[data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(mainTeamSuggestions[data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Reinc. Team':\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount].priorityMap)));\r\n                                                            presetPets = reincTeamSuggestions[data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(reincTeamSuggestions[data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Gear Team':\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount].priorityList)))\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount].priorityMap)));\r\n                                                            presetPets = gearTeamSuggestions[data.AscensionCount].petWhiteList ? JSON.parse(JSON.stringify(gearTeamSuggestions[data.AscensionCount].petWhiteList)) : {};\r\n                                                            break;\r\n                                                        case 'Stat Team':\r\n                                                            // setPriorityList(statTeamSuggestions[data.AscensionCount].priorityList)\r\n                                                            // setPriorityMap(statTeamSuggestions[data.AscensionCount].priorityMap);\r\n                                                            // presetPets = statTeamSuggestions[data.AscensionCount].petWhiteList ? statTeamSuggestions[data.AscensionCount].petWhiteList : {};\r\n                                                            setPriorityList(JSON.parse(JSON.stringify(statPriorityList)));\r\n                                                            setPriorityMap(JSON.parse(JSON.stringify(statPriorityMap)));\r\n                                                            presetPets = JSON.parse(JSON.stringify(statPriorityWhitelist));\r\n                                                            break;\r\n                                                        case 'None':\r\n                                                            setPriorityList([]);\r\n                                                            setPriorityMap({});\r\n                                                            setPetWhiteList({});\r\n                                                            // setRecommendedSelected(true);\r\n                                                            break;\r\n                                                        default:\r\n\r\n                                                    }\r\n\r\n                                                    let petWhiteListNew = {};\r\n                                                    for (const [key, value] of Object.entries(presetPets)) {\r\n                                                        if (!unlockedPetsMap[key]) {\r\n                                                            petWhiteListNew[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                        }\r\n                                                        else {\r\n                                                            petWhiteListNew[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                        }\r\n                                                    }\r\n                                                    setPetWhiteList(petWhiteListNew);\r\n                                                }\r\n                                            }\r\n                                            defaultValue={'None'}\r\n                                        // value={petWhiteList[e.ID].mode}\r\n                                        >\r\n                                            {!recommendedSelected && (<option value=\"None\">Select Preset</option>)}\r\n                                            <option value=\"Main Team\">Main Team</option>\r\n                                            <option value=\"Reinc. Team\">Reinc. Team</option>\r\n                                            <option value=\"Gear Team\">Gear Team</option>\r\n                                            {data.AscensionCount >= 5 && (\r\n                                                <option value=\"Stat Team\">Stat Team</option>\r\n                                            )}\r\n                                            {recommendedSelected && (<option value=\"None\">Blank</option>)}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* List of priorities */}\r\n                            <div style={{\r\n                                display: 'flex', flex: '1',\r\n                                border: '1px solid gray',\r\n                                margin: '6px', justifyContent: 'center',\r\n                                // padding: '6px 0',\r\n                                backgroundColor: 'rgba(255,255,255, 0.04)',\r\n                                borderRadius: '6px',\r\n                                maxHeight: '58vh',\r\n                                paddingLeft: '6px',\r\n                                overflow: \"hidden\"\r\n                            }}>\r\n                                <div style={{ width: '100%', overflow: 'auto' }}>\r\n                                    <Reorder.Group\r\n                                        axis=\"y\"\r\n                                        values={priorityList}\r\n                                        // layoutScroll\r\n                                        // style={{ overflowY: \"scroll\" }}\r\n                                        onReorder={setPriorityList\r\n                                            //     (newList) => {\r\n\r\n                                            //     for (let i = 0; i < newList.length; i++) {\r\n                                            //         if (newList[i] !== priorityList[i]) {\r\n                                            //             return setPriorityList(newList)\r\n                                            //         }\r\n                                            //     }\r\n                                            // }sss\r\n                                        }>\r\n                                        {priorityList.map((item, index) => {\r\n                                            let showSelectedPets = false;\r\n                                            let color = 'gray';\r\n                                            let priority = priorityMap[item];\r\n                                            let current = currentBonuses[item];\r\n                                            if (priority.count === -1) {\r\n                                                color = 'white';\r\n                                            }\r\n                                            else if (priority.count === 0) {\r\n                                                color = 'gray';\r\n                                            }\r\n                                            else if (priority.count === current?.count) {\r\n                                                color = '#4caf50'\r\n                                            }\r\n                                            else if (priority.count < current?.count) {\r\n                                                color = '#ffeb3b'\r\n                                            }\r\n                                            else {\r\n                                                color = '#e53935';\r\n                                            }\r\n                                            if (selectedPetMap[item]) {\r\n                                                if (selectedPetMap[item].length > 0) {\r\n                                                    showSelectedPets = true;\r\n                                                }\r\n                                            }//\r\n                                            return (\r\n                                                < Reorder.Item key={item} value={item} style={{ marginLeft: '6px' }}>\r\n                                                    <div\r\n                                                        className='drag'\r\n                                                        style={{\r\n                                                            margin: '6px 3px',\r\n                                                            border: `2px solid ${color}`,\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center', flexDirection: 'column',\r\n                                                            width: '220px',\r\n                                                            backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                                            borderRadius: '6px'\r\n                                                        }}>\r\n                                                        <div style={{\r\n                                                            display: 'flex', justifyContent: 'space-between', alignItems: 'center',\r\n                                                            width: '100%', margin: '3px 0 6px 0',\r\n                                                            borderBottom: '1px solid black'\r\n                                                        }}>\r\n\r\n                                                            <Image\r\n                                                                className='drag noPointerEvents'\r\n                                                                src={DragIcon}\r\n                                                                style={{ height: '24px', width: 'auto', marginLeft: '3px' }}\r\n                                                                alt='hand in a fist with index poting at a vertical line with arrows on both ends'\r\n                                                            />\r\n                                                            {/* <img \r\n                                                        className='drag noPointerEvents' \r\n                                                        src={DragIcon} \r\n                                                        style={{ height: '24px', marginLeft: '3px' }} \r\n                                                        alt='hand in a fist with index poting at a vertical line with arrows on both ends' \r\n                                                        /> */}\r\n\r\n                                                            <div style={{ marginLeft: '6px' }}>\r\n                                                                {` ${priorityMap[item].label}`}\r\n                                                            </div>\r\n                                                            <Image\r\n                                                                onClick={(e) => {\r\n                                                                    setPriorityMap((curMap) => {\r\n                                                                        let newMap = { ...curMap };\r\n                                                                        delete newMap[item];\r\n                                                                        return newMap;\r\n                                                                    });\r\n                                                                    setPriorityList((curList) => {\r\n                                                                        let newList = [...curList];\r\n                                                                        newList = newList.filter((cur) => cur !== item);\r\n                                                                        return newList;\r\n                                                                    });\r\n                                                                }}\r\n                                                                className='hover'\r\n                                                                src={CrossIcon}\r\n                                                                alt='red x'\r\n                                                                style={{ height: '16px', width: 'auto', marginRight: '6px' }} />\r\n                                                        </div>\r\n\r\n                                                        {/* Extra options */}\r\n                                                        <div style={{ alignSelf: 'flex-start', marginLeft: '6px', marginBottom: '3px' }}>\r\n                                                            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                <div style={{ marginRight: '6px' }}>\r\n                                                                    Max Pets:\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <input\r\n                                                                        aria-label='Select how the bonus will be rewarded'\r\n                                                                        // className='importantText textMedium2'\r\n                                                                        style={{\r\n                                                                            //  borderRadius: '4px',\r\n                                                                            width: '30px',\r\n                                                                            //    height: '65%', \r\n                                                                            //    backgroundColor: index % 2 === 0 ? '#2D2D2D' : '#353535'\r\n                                                                            backgroundColor: '#f3f0f5'\r\n                                                                        }}\r\n                                                                        type='number' value={priorityMap[item].count}\r\n                                                                        onChange={\r\n                                                                            (inner_e) => {\r\n                                                                                try {\r\n                                                                                    let x = Number(inner_e.target.value);\r\n                                                                                    x = Math.floor(x);\r\n                                                                                    if (x < -1 || x > 6) {\r\n                                                                                        return;\r\n                                                                                    }\r\n                                                                                    setPriorityMap((current_map) => {\r\n                                                                                        let newMap = { ...current_map };\r\n                                                                                        newMap[item].count = x;\r\n                                                                                        return newMap;\r\n                                                                                    })\r\n\r\n                                                                                    ReactGA.event({\r\n                                                                                        category: \"pet_team_builder\",\r\n                                                                                        action: `changed_bonus_max_pets`,\r\n                                                                                        label: `${priorityMap[item].label}`,\r\n                                                                                        value: x\r\n                                                                                    });\r\n                                                                                }\r\n                                                                                catch (err) {\r\n                                                                                    console.log(err);\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        min=\"-1\"\r\n                                                                        max=\"6\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </Reorder.Item>\r\n                                            )\r\n                                        })}\r\n                                    </Reorder.Group>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                            {/* List of whitelisted pets*/}\r\n                            <div\r\n                                style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center' }}\r\n                            >\r\n                                Manual Pet Selection\r\n                            </div>\r\n\r\n                            <SearchBox\r\n                                margin='0 0 0 6px'\r\n                                data={{\r\n                                    list: petSearchList\r\n                                }}\r\n                                placeholder={`Select a pet`}\r\n                                onSelect={(e) => {\r\n\r\n                                    ReactGA.event({\r\n                                        category: \"pets_interaction\",\r\n                                        action: `whitelist_pet`,\r\n                                        label: e.label,\r\n                                        value: e.id\r\n                                    })\r\n\r\n\r\n\r\n                                    setPetWhiteList((curr_whitelist) => {\r\n                                        let newList = { ...curr_whitelist };\r\n\r\n                                        newList[e.id] = { ...unlockedPetsMap[e.id], mode: 'include' };\r\n                                        return newList;\r\n                                    })\r\n                                }}\r\n                            />\r\n\r\n\r\n                            <div style={{\r\n                                display: 'flex', flex: '1',\r\n                                flexDirection: 'column',\r\n                                border: '1px solid gray',\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                margin: '6px',\r\n                                backgroundColor: 'rgba(255,255,255, 0.04)',\r\n                                borderRadius: '6px',\r\n                                maxHeight: '19.5vh',\r\n                                overflow: 'hidden'\r\n                            }}>\r\n                                <div style={{ maxHeight: '100%', overflow: 'auto', width: '100%' }}>\r\n                                    <div\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                            justifyContent: \"center\",\r\n                                            alignItems: \"center\"\r\n                                        }}\r\n                                    >\r\n                                        {Object.values(petWhiteList).map((e, index) => (\r\n                                            <div\r\n                                                key={index}\r\n                                                style={{\r\n                                                    display: 'flex', flexDirection: 'column',\r\n                                                    width: '250px', height: '60px',\r\n                                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                                    borderRadius: '6px',\r\n                                                    margin: '6px  12px'\r\n                                                }}>\r\n                                                <div style={{\r\n                                                    display: 'flex', justifyContent: 'space-between', alignItems: 'center',\r\n                                                    width: '100%', height: '32px',\r\n                                                    borderBottom: '1px solid black'\r\n                                                }}>\r\n                                                    <div style={{ fontSize: '24px', marginLeft: '6px' }}>\r\n                                                        {e.name}\r\n                                                    </div>\r\n                                                    <Image\r\n                                                        className='hover'\r\n                                                        src={CrossIcon}\r\n                                                        alt='red x'\r\n                                                        style={{ height: '16px', width: 'auto', marginRight: '6px' }}\r\n                                                        onClick={(click_e) => {\r\n                                                            setPetWhiteList((cur_whitelist) => {\r\n                                                                let newList = { ...cur_whitelist };\r\n                                                                delete newList[e.ID];\r\n                                                                return newList;\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n\r\n\r\n                                                <div>\r\n                                                    <div style={{ display: 'flex', alignItems: 'center', margin: '6px' }}>\r\n                                                        <div style={{ marginRight: '6px' }}>\r\n                                                            Placement:\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <select\r\n                                                                aria-label='Specifiy if the pet is included or excluded'\r\n                                                                style={{ maxWidth: '144px' }}\r\n                                                                onChange={\r\n                                                                    (selected_mode) => {\r\n                                                                        setPetWhiteList((cur_whitelist) => {\r\n                                                                            let newList = { ...cur_whitelist };\r\n                                                                            newList[e.ID].mode = selected_mode.target.value;\r\n                                                                            return newList;\r\n                                                                        });\r\n                                                                    }\r\n                                                                }\r\n                                                                defaultValue={petWhiteList[e.ID].mode}\r\n                                                                value={petWhiteList[e.ID].mode}\r\n                                                            >\r\n                                                                <option value=\"include\">include</option>\r\n                                                                <option value=\"exclude\">exclude</option>\r\n                                                            </select>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Actual team */}\r\n                        <div style={{ marginRight: '6px', marginTop: '6px' }}>\r\n                            <div\r\n                                style={{\r\n                                    backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                    padding: '6px',\r\n                                    borderRadius: '6px'\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center' }}\r\n                                >\r\n                                    Best Team\r\n\r\n                                </div>\r\n                                {!!recommendedSelected && (\r\n                                    <>\r\n                                        {/* Current Team Bonuses! s*/}\r\n                                        <div style={{ padding: '12px' }}>\r\n                                            {Object.values(currentBonuses).map((e, index) => {\r\n                                                if (e.ID >= bonusCutOff) {\r\n                                                    return null\r\n                                                }\r\n                                                let color = 'lightgray';\r\n                                                let priority = priorityMap[e.ID];\r\n                                                if (priority) {\r\n                                                    if (priority.count === -1) {\r\n                                                        color = 'white';\r\n                                                    }\r\n                                                    else if (priority.count === 0) {\r\n                                                        color = 'gray';\r\n                                                    }\r\n                                                    else if (priority.count === e.count) {\r\n                                                        color = '#4caf50'\r\n                                                    }\r\n                                                    else if (priority.count < e.count) {\r\n                                                        color = '#ffeb3b'; //yellow\r\n                                                    }\r\n                                                    else {\r\n                                                        color = '#e53935'; //reds\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    color = 'lightgray';\r\n                                                }\r\n                                                return (\r\n                                                    <div key={index} style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                                        <div style={{ width: '150px' }}>\r\n                                                            {e.label}\r\n                                                        </div>\r\n                                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                            <div style={{ color: color, }}>\r\n                                                                {e.sum.toExponential(2) + '%'}\r\n                                                            </div>\r\n                                                            <div style={{ color: color, marginLeft: '6px' }}>\r\n                                                                {` (${currentBonuses[e.ID].count})`}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }, [])}\r\n                                        </div>\r\n\r\n                                        {Object.values(specialCombos).length > 0 && (\r\n                                            <>\r\n                                                < div\r\n                                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center' }}\r\n                                                >\r\n                                                    Team Combos\r\n                                                </div>\r\n\r\n                                                <div style={{ padding: '12px' }}>\r\n                                                    {Object.values(specialCombos).map((e, index) => {\r\n                                                        return (\r\n                                                            <div key={index} style={{ display: 'flex' }}>\r\n                                                                <div style={{ width: '150px' }}>\r\n                                                                    {e.rootName}\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    {e.odd && (<>\r\n                                                                        {`x${e.count}`}\r\n                                                                    </>\r\n                                                                    )}\r\n                                                                    {!e.odd && (\r\n                                                                        <>\r\n                                                                            {helper.roundInt((e.BonusPower * e.count)) + '%'}\r\n                                                                        </>\r\n                                                                    )}\r\n\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }, [])}\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n\r\n                                        {/* Pets */}\r\n                                        <div>\r\n\r\n                                            {/* Ground Pets */}\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {groundPets.map((e, index) => {\r\n\r\n                                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === e.ID)\r\n                                                    return (\r\n                                                        <div key={index}\r\n                                                            style={{\r\n                                                                display: \"flex\",\r\n                                                                justifyContent: \"center\",\r\n                                                                alignItems: \"center\",\r\n                                                                width: '90px',\r\n                                                                height: '90px',\r\n                                                                border: '1px gray solid',\r\n                                                                borderRadius: '6px'\r\n                                                            }}\r\n                                                        >\r\n                                                            <StaticPetItem petData={{ ...staticPetData, pet: petMap[e.ID] }} />\r\n                                                        </div>\r\n                                                    );\r\n                                                }, [])}\r\n                                            </div>\r\n                                            {/* Air Pets */}\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {airPets.map((e, index) => {\r\n\r\n                                                    let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === e.ID)\r\n                                                    return (\r\n                                                        <div key={index}\r\n                                                            style={{\r\n                                                                display: \"flex\",\r\n                                                                justifyContent: \"center\",\r\n                                                                alignItems: \"center\",\r\n                                                                width: '90px',\r\n                                                                height: '90px',\r\n                                                                border: '1px gray solid',\r\n                                                                borderRadius: '6px'\r\n                                                            }}\r\n                                                        >\r\n\r\n                                                            <StaticPetItem petData={{ ...staticPetData, pet: petMap[e.ID] }} />\r\n\r\n                                                        </div>\r\n                                                    );\r\n                                                }, [])}\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )}\r\n\r\n                            </div>\r\n\r\n                            {/* Custom Preset Area */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Custom Presets\r\n                                </div>\r\n                                {/* Save current preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n                                    <input type='text'\r\n                                        aria-label='Specify name of the current preset to save it under'\r\n                                        onChange={(e) => {\r\n\r\n                                            setCurrentPresetName(e.target.value);\r\n                                        }}\r\n                                        style={{\r\n                                            width: '141px', marginRight: '12px'\r\n                                        }}\r\n                                    />\r\n                                    <button disabled={currentPresetName.trim().length === 0}\r\n                                        onClick={(e) => {\r\n                                            ReactGA.event({\r\n                                                category: \"pets_interaction\",\r\n                                                action: `save_custom_preset`,\r\n                                                label: currentPresetName\r\n                                            })\r\n\r\n                                            setCustomPresets((currentPresets) => {\r\n                                                let newPresets = { ...currentPresets };\r\n                                                let newPetWhiteList = {};\r\n\r\n                                                for (const [key, value] of Object.entries(petWhiteList)) {\r\n                                                    newPetWhiteList[key] = { ID: key, mode: value.mode }\r\n                                                }\r\n\r\n                                                newPresets[currentPresetName] = {\r\n                                                    priorityList: priorityList,\r\n                                                    priorityMap: priorityMap,\r\n                                                    petWhiteList: newPetWhiteList\r\n                                                };\r\n                                                return newPresets;\r\n                                            });\r\n                                        }}\r\n                                    >Save Current</button>\r\n                                </div>\r\n                                {/* Select saved preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '6px' }}>\r\n                                    <div style={{ marginRight: '12px', marginLeft: '5px', width: '141px' }}>\r\n                                        Select saved preset\r\n                                    </div>\r\n                                    <select\r\n                                        aria-label='Specify which custom preset to load in'\r\n                                        style={{ width: '90px', marginLeft: '12px' }}\r\n                                        onChange={\r\n                                            (selected_mode) => {\r\n                                                setCustomSelected(true);\r\n                                                setRecommendedSelected(true);\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `load_custom_preset`,\r\n                                                    label: selected_mode.target.value\r\n                                                })\r\n\r\n\r\n                                                switch (selected_mode.target.value) {\r\n                                                    case 'None':\r\n                                                        setCustomSelected(true);\r\n                                                        return;\r\n                                                    default:\r\n\r\n                                                }\r\n\r\n                                                setPriorityList(customPresets[selected_mode.target.value].priorityList);\r\n                                                setPriorityMap(customPresets[selected_mode.target.value].priorityMap);\r\n                                                let petWhiteListNew = {};\r\n                                                for (const [key, value] of Object.entries(customPresets[selected_mode.target.value].petWhiteList)) {\r\n                                                    if (!unlockedPetsMap[key]) {\r\n                                                        petWhiteListNew[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                    }\r\n                                                    else {\r\n                                                        petWhiteListNew[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                    }\r\n                                                }\r\n\r\n                                                setPetWhiteList(petWhiteListNew);\r\n                                            }\r\n                                        }\r\n                                        defaultValue={' '}\r\n                                    // value={petWhiteList[e.ID].mode}\r\n                                    >\r\n                                        {!customeSelected && (<option value=\"None\">None</option>)}\r\n                                        {Object.keys(customPresets).map((e) => <option key={e} value={e}>{e}</option>)}\r\n                                    </select>\r\n                                </div>\r\n                                {/* Delete saved preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '6px' }}>\r\n                                    <div style={{ marginRight: '12px', marginLeft: '5px', width: '141px' }}>\r\n                                        Delete preset\r\n                                    </div>\r\n                                    <select\r\n                                        aria-label='Specify which custom preset to delete'\r\n                                        style={{ width: '90px', marginLeft: '12px' }}\r\n                                        onChange={\r\n                                            (selected_mode) => {\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `delete_custom_preset`,\r\n                                                    label: selected_mode.target.value\r\n                                                })\r\n\r\n                                                setCustomPresets((current_presets) => {\r\n                                                    let newMap = { ...current_presets };\r\n                                                    delete newMap[selected_mode.target.value];\r\n                                                    return newMap;\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        value={'None'}\r\n                                    >\r\n                                        <option value=\"None\">None</option>\r\n                                        {Object.keys(customPresets).map((e) => <option key={e} value={e}>{e}</option>)}\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Share/Load presets */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Share Presets\r\n                                </div>\r\n                                {/* import preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n                                    <input type='text'\r\n                                        aria-label='Enter a preset code to import it'\r\n                                        onChange={(e) => {\r\n                                            setLoadPreset(e.target.value);\r\n                                        }}\r\n                                        style={{\r\n                                            width: '141px', marginRight: '12px'\r\n                                        }}\r\n                                    />\r\n                                    <button disabled={loadPreset.trim().length === 0}\r\n                                        onClick={(e) => {\r\n                                            try {\r\n                                                ReactGA.event({\r\n                                                    category: \"pets_interaction\",\r\n                                                    action: `imported_custom_preset`,\r\n                                                })\r\n                                                setRecommendedSelected(true);\r\n                                                let importPresetObj = JSON.parse(loadPreset);\r\n                                                setPriorityList(importPresetObj.priorityList);\r\n                                                setPriorityMap(importPresetObj.priorityMap);\r\n\r\n                                                let newPetWhiteList = {};\r\n                                                for (const [key, value] of Object.entries(importPresetObj.petWhiteList)) {\r\n                                                    if (!unlockedPetsMap[key]) {\r\n                                                        newPetWhiteList[key] = { ID: key, name: petNames[key].name, mode: value.mode };\r\n                                                    }\r\n                                                    else {\r\n                                                        newPetWhiteList[key] = { ...unlockedPetsMap[key], mode: value.mode };\r\n                                                    }\r\n                                                }\r\n\r\n                                                setPetWhiteList(newPetWhiteList);\r\n                                            }\r\n                                            catch (err) {\r\n\r\n                                            }\r\n\r\n                                        }}\r\n                                    >Import Preset</button>\r\n                                </div>\r\n                                {/* export preset */}\r\n                                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '12px' }} >\r\n\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            ReactGA.event({\r\n                                                category: \"pets_interaction\",\r\n                                                action: `exported_custom_preset`,\r\n                                            })\r\n\r\n                                            let presetObj = {};\r\n                                            let newPetWhiteList = {};\r\n\r\n                                            for (const [key, value] of Object.entries(petWhiteList)) {\r\n                                                newPetWhiteList[key] = { ID: key, mode: value.mode }\r\n                                            }\r\n\r\n                                            presetObj = {\r\n                                                priorityList: priorityList,\r\n                                                priorityMap: priorityMap,\r\n                                                petWhiteList: newPetWhiteList\r\n                                            };\r\n                                            navigator.clipboard.writeText(JSON.stringify(presetObj));\r\n                                        }}\r\n                                    >Copy Current Preset to Clipboard</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Miscellaneous settings */}\r\n                            <div style={{\r\n                                backgroundColor: 'rgba(255,255,255, 0.07)',\r\n                                padding: '6px',\r\n                                marginTop: '12px',\r\n                                borderRadius: '6px'\r\n                            }}>\r\n                                {/* header */}\r\n                                <div\r\n                                    style={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'center', marginBottom: \"6px\" }}\r\n                                >\r\n                                    Miscellaneous Settings\r\n                                </div>\r\n                                <div style={{ display: 'flex', justifyContent: 'center' }} >\r\n\r\n\r\n                                    <div style={{}}>\r\n                                        Use expedition pets\r\n                                    </div>\r\n                                    <div>\r\n                                        <input\r\n                                            aria-label='use selected pets from expedition page'\r\n                                            type=\"checkbox\"\r\n                                            onChange={(e) => {\r\n                                                setUseExpedition(e.target.checked ? true : false)\r\n                                            }}\r\n                                            checked={!!useExpedition}\r\n                                            value={!!useExpedition}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>)}\r\n\r\n                    {/* How To Use */}\r\n                    <div className='teamBuilder importantText'\r\n                        style={{\r\n                            borderRadius: '6px',\r\n                            border: `2px solid rgba(255,255,255,0.7)`,\r\n                            margin: '12px 12px 12px 0',\r\n                            maxHeight: 'calc(100% - 24px)',\r\n                            overflow: 'auto',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            flex: '1',\r\n                            alignItems: 'flex-start',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                            padding: '6px',\r\n                            minWidth: '260px'\r\n                        }}>\r\n                        <div\r\n                            style={{ fontSize: '32px', fontWeight: 'bold', textAlign: 'center', width: '100%' }}\r\n                        >\r\n                            How To Use\r\n                        </div>\r\n                        <div style={{ display: 'flex', flex: '1', flexDirection: 'column' }}>\r\n                            {/* Priority List */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Priority List:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n\r\n                                        If you are new, it is recommended to select one of the presets from `Recommended Presets`\r\n                                    </div>\r\n                                    <div>\r\n\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Add any bonus to the priority list, bonuses at the top are weighed more than those below them.\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to -1 means it will always reward pets for having this bonus\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to 0 means this bonus is not rewarded at all\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Setting a value to x means this bonus is rewarded until x number of pets have this bonus, then the reward is 0\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Recommended Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Recommended Presets:\r\n                                </div>\r\n                                <div>\r\n\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Main Team: This is the team you will run majority of your run\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Reinc. Team: This is the team you will run when you want to reincarnate - run for at least 1 hour before reincarnation to get pet levels up\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Gear Team: This is the team you will run when searching for new/better gear\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            Stat Team: This is the team you will run on the side for short bursts of time to cover any missing stats from the other 3 team presets\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Custom Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Custom Presets:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            You can save/load your own presets by entering a name and pressing `Save Current`.\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To load preset in, select it from the drop down next to `Select saved preset`\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To delete a preset, select it from the drop down next to `Delete preset`\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Share Presets */}\r\n                            <div style={{ display: 'flex' }}>\r\n                                <div style={{ minWidth: '130px', width: '130px', maxWidth: '130px', marginRight: '12px', fontSize: '20px' }}>\r\n                                    Share Presets:\r\n                                </div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            You can share/import other players presets\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            To share your preset, press `Copy Current Preset...` the value is automatically copied to your clipboard\r\n                                        </div>\r\n                                        <div style={{ margin: '6px 6px 6px 0' }}>\r\n                                            {`To import someone elses preset, copy their shared value into the empty text box and press 'Import Preset'`}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n\r\n\r\n            </div >\r\n        </div >\r\n    )\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx",[],[],{"ruleId":"234","severity":1,"message":"235","line":451,"column":9,"nodeType":"236","endLine":451,"endColumn":63,"suggestions":"237"},"react-hooks/exhaustive-deps","React Hook useMemo has unnecessary dependencies: 'petWhiteList' and 'useExpedition'. Either exclude them or remove the dependency array.","ArrayExpression",["238"],{"desc":"239","fix":"240"},"Update the dependencies array to be: [data, manualEnabledPets]",{"range":"241","text":"242"},[17389,17443],"[data, manualEnabledPets]"]