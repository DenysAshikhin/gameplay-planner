[{"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js":"1","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js":"2","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx":"3","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js":"4","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx":"5","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js":"6","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx":"7","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js":"8","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx":"9","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx":"10","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js":"11","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx":"12","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx":"13","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js":"14","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js":"15","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx":"16","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js":"17","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx":"18","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx":"19","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js":"20","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx":"21","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js":"22","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js":"23","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx":"24","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx":"25","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js":"26","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx":"27","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx":"28","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx":"29","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js":"30","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx":"31","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js":"32","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js":"33","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js":"34","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js":"35","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx":"36","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js":"37","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js":"38","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx":"39","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx":"40","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js":"41","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js":"42","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx":"43","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js":"44","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx":"45","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js":"46"},{"size":2060,"mtime":1699498367504,"results":"47","hashOfConfig":"48"},{"size":535,"mtime":1699206951135,"results":"49","hashOfConfig":"48"},{"size":54665,"mtime":1701105410179,"results":"50","hashOfConfig":"48"},{"size":684,"mtime":1699484623632,"results":"51","hashOfConfig":"48"},{"size":127967,"mtime":1701660982252,"results":"52","hashOfConfig":"48"},{"size":13082,"mtime":1700513419016,"results":"53","hashOfConfig":"48"},{"size":13425,"mtime":1701541888308,"results":"54","hashOfConfig":"48"},{"size":9592,"mtime":1698849505218,"results":"55","hashOfConfig":"48"},{"size":24720,"mtime":1700458980790,"results":"56","hashOfConfig":"48"},{"size":14336,"mtime":1700450970226,"results":"57","hashOfConfig":"48"},{"size":624,"mtime":1699206951135,"results":"58","hashOfConfig":"48"},{"size":174854,"mtime":1700458831390,"results":"59","hashOfConfig":"48"},{"size":8067,"mtime":1699162746129,"results":"60","hashOfConfig":"48"},{"size":3882,"mtime":1701043277740,"results":"61","hashOfConfig":"48"},{"size":140,"mtime":1699108764428,"results":"62","hashOfConfig":"48"},{"size":8578,"mtime":1699932724284,"results":"63","hashOfConfig":"48"},{"size":365,"mtime":1699158751671,"results":"64","hashOfConfig":"48"},{"size":3950,"mtime":1700891658095,"results":"65","hashOfConfig":"48"},{"size":2675,"mtime":1700881584918,"results":"66","hashOfConfig":"48"},{"size":654,"mtime":1699206951135,"results":"67","hashOfConfig":"48"},{"size":85786,"mtime":1701664882861,"results":"68","hashOfConfig":"48"},{"size":21443,"mtime":1699072929196,"results":"69","hashOfConfig":"48"},{"size":96291,"mtime":1701538711801,"results":"70","hashOfConfig":"48"},{"size":4225,"mtime":1699163121040,"results":"71","hashOfConfig":"48"},{"size":6523,"mtime":1699498367500,"results":"72","hashOfConfig":"48"},{"size":552,"mtime":1699287646541,"results":"73","hashOfConfig":"48"},{"size":23533,"mtime":1700084182826,"results":"74","hashOfConfig":"48"},{"size":572,"mtime":1699061430156,"results":"75","hashOfConfig":"48"},{"size":315,"mtime":1698849505297,"results":"76","hashOfConfig":"48"},{"size":40454,"mtime":1700450596280,"results":"77","hashOfConfig":"48"},{"size":1664,"mtime":1699498174255,"results":"78","hashOfConfig":"48"},{"size":4091,"mtime":1700603484820,"results":"79","hashOfConfig":"48"},{"size":23209,"mtime":1701661097408,"results":"80","hashOfConfig":"48"},{"size":3682,"mtime":1698938060827,"results":"81","hashOfConfig":"48"},{"size":1998,"mtime":1698849505306,"results":"82","hashOfConfig":"48"},{"size":6168,"mtime":1700889351697,"results":"83","hashOfConfig":"48"},{"size":88828,"mtime":1700700406843,"results":"84","hashOfConfig":"48"},{"size":3502,"mtime":1698849505364,"results":"85","hashOfConfig":"48"},{"size":3177,"mtime":1698898389355,"results":"86","hashOfConfig":"48"},{"size":3325,"mtime":1701541411417,"results":"87","hashOfConfig":"48"},{"size":4032,"mtime":1699582591361,"results":"88","hashOfConfig":"48"},{"size":486,"mtime":1699471188929,"results":"89","hashOfConfig":"48"},{"size":12689,"mtime":1699412549470,"results":"90","hashOfConfig":"48"},{"size":552,"mtime":1700590266467,"results":"91","hashOfConfig":"48"},{"size":27036,"mtime":1700937976308,"results":"92","hashOfConfig":"48"},{"size":23859,"mtime":1700936849821,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17kfkn8",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\cardMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\cards\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page_content.jsx",["233"],[],"\"use client\"\r\n\r\n\r\nimport Image from 'next/image';\r\nimport { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport useLocalStorage from \"use-local-storage\";\r\nimport './JSONDisplay.css'; // Add this line to import the CSS file\r\nimport { BonusMap, petNameArray, petNames, DefaultWeightMap } from '../util/itemMapping.js';\r\nimport PetItemCoin from './PetItemCoin.jsx';\r\nimport ItemSelection from \"../util/ItemSelection copy\";\r\nimport MouseOverPopover from \"../util/Tooltip\";\r\n\r\nimport helper from '../util/helper.js';\r\nimport xIcon from \"../../../public/images/icons/x_icon.svg\"\r\nimport pinIcon from \"../../../public/images/icons/pin-line-icon.svg\"\r\nimport trashIcon from \"../../../public/images/icons/trash-can-icon.svg\"\r\nimport infoIcon from '../../../public/images/icons/info.svg';\r\nimport infoIconRed from '../../../public/images/icons/info_red.svg';\r\nimport infoIconRedThick from '../../../public/images/icons/info_red_thick.svg';\r\nimport infoIconGreen from '../../../public/images/icons/info_green.svg';\r\nimport infoIconGreenThick from '../../../public/images/icons/info_green_thick.svg';\r\nimport infoIconAmber from '../../../public/images/icons/info_amber.svg';\r\n// import rankExplain from \"../../../public/images/rank_explain.png\"\r\n\r\nimport ReactGA from \"react-ga4\";\r\nimport SearchBox from '../util/search.jsx';\r\nimport petHelper from '../util/petHelper.js';\r\nimport DefaultSave from '../util/tempSave.json';\r\n\r\nReactGA.initialize([{\r\n    trackingId: \"G-GGLPK02VH8\",\r\n    // gaOptions: {...}, // optional\r\n    // gtagOptions: {\r\n    //     send_page_view: false\r\n    // },\r\n}]);\r\nlet groupCache = {};\r\nfunction setGroupCache(newCache) {\r\n    groupCache = newCache;\r\n}\r\n\r\nconst defaultPetSelection = petNameArray.map(petData => petData.petId);\r\n\r\nfunction ScoreSection({ data, group, totalScore, defaultRank }) {\r\n    const { baseGroupScore, groupScoreMax, dmgCount, timeCount, synergyBonus, groupScore } = petHelper.calculateGroupScore(group, defaultRank);\r\n    const score = groupScore;\r\n    const displayedDamage = (score * 5 * data.PetDamageBonuses).toExponential(2);\r\n    return (\r\n        <>\r\n            <ul>\r\n                {/* <li key=\"totalScore\">\r\n                    {`True Damage: ${(5 * groupScoreMax * Number(data?.PetDamageBonuses)).toExponential(2)}`}\r\n                </li> */}\r\n                <li key=\"totalScore\">\r\n                    {`Rank 1 Damage: ${displayedDamage}`}\r\n                </li>\r\n                <li key=\"baseGroupScore\">\r\n                    Group Base: {Number(baseGroupScore).toExponential(2)}\r\n                </li>\r\n                <li key=\"damageBonus\">\r\n                    Dmg Bonus: {Number(1 + dmgCount * petHelper.EXP_DMG_MOD).toFixed(2)}x\r\n                </li>\r\n                <li key=\"timeBonus\">\r\n                    Time Bonus: {Number(1 + timeCount * petHelper.EXP_TIME_MOD).toFixed(2)}x\r\n                </li>\r\n                <li key=\"synergyBonus\">\r\n                    Synergy: {Number(synergyBonus).toFixed(2)}x\r\n                </li>\r\n                <li key=\"petDamageBonus\">\r\n                    PetDmgMod: {Number(data?.PetDamageBonuses).toExponential(2)}\r\n                </li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nimport Head from 'next/head';\r\n\r\n\r\nexport default function Expeditions() {\r\n\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n\r\n    const [petWhiteList, setPetWhiteListRunTime] = useState([]);\r\n    const [petWhiteListClient, setPetWhiteList] = useLocalStorage(\"petWhiteList\", []);\r\n    useEffect(() => {\r\n\r\n        let petWhiteListClientTemp = [];\r\n        let foundOld = false;\r\n        for (const [key, value] of Object.entries(petWhiteListClient)) {\r\n            if (value.placement === 'rel') {\r\n                let bigsad = -1;\r\n                foundOld = true;\r\n            }\r\n            else {\r\n                petWhiteListClientTemp.push(value);\r\n            }\r\n        }\r\n        if (foundOld) {\r\n            setPetWhiteList(petWhiteListClientTemp);\r\n        }\r\n        setPetWhiteListRunTime(petWhiteListClientTemp);\r\n    }, [petWhiteListClient]);\r\n\r\n    const [enabledBonusHighlight, setEnabledBonusHighlightRunTime] = useState({});\r\n    const [enabledBonusHighlightClient, setEnabledBonusHighlight] = useLocalStorage(\"enabledBonusHighlight\", {});\r\n    useEffect(() => {\r\n        setEnabledBonusHighlightRunTime(enabledBonusHighlightClient);\r\n    }, [enabledBonusHighlightClient]);\r\n\r\n    const [showAllBonusTally, setShowAllBonusTallyRunTime] = useState(false);\r\n    const [showAllBonusTallyClient, setShowAllBonusTally] = useLocalStorage(\"showAllBonusTally\", false);\r\n    useEffect(() => {\r\n        setShowAllBonusTallyRunTime(showAllBonusTallyClient);\r\n    }, [showAllBonusTallyClient]);\r\n\r\n    const [leftOverBonus1, setLeftOverBonus1RunTime] = useState(1016);\r\n    const [leftOverBonus1Client, setLeftOverBonus1] = useLocalStorage(\"leftOverBonus1\", 1016);\r\n    useEffect(() => {\r\n        setLeftOverBonus1RunTime(leftOverBonus1Client);\r\n    }, [leftOverBonus1Client]);\r\n\r\n    const [hideLocked, setHideLockedRunTime] = useState(false);\r\n    const [hideLockedClient, setHideLocked] = useLocalStorage(\"hideLocked\", false);\r\n    useEffect(() => {\r\n        setHideLockedRunTime(hideLockedClient);\r\n    }, [hideLockedClient]);\r\n\r\n    const [activeCustomBonuses, setActiveCustomBonusesRunTime] = useState([]);\r\n    const [activeCustomBonusesClient, setActiveCustomBonuses] = useLocalStorage(\"activeCustomBonuses\", []);\r\n    useEffect(() => {\r\n        setActiveCustomBonusesRunTime(activeCustomBonusesClient);\r\n    }, [activeCustomBonusesClient]);\r\n\r\n    const [groupRankCritera, setGroupRankCriteriaRunTime] = useState(1);//1 = overall damage + modifiers, 2 = token/hr + (damage and modifiers), 3 = advanced/custom\r\n    const [groupRankCriteraClient, setGroupRankCriteria] = useLocalStorage(\"groupRankCriteria\", 1);\r\n    useEffect(() => {\r\n        setGroupRankCriteriaRunTime(groupRankCriteraClient);\r\n    }, [groupRankCriteraClient]);\r\n\r\n    const [defaultRank, setDefaultRankRunTime] = useState(1);\r\n    const [defaultRankClient, setDefaultRank] = useLocalStorage(\"defaultRank\", 1);\r\n    useEffect(() => {\r\n        setDefaultRankRunTime(defaultRankClient);\r\n    }, [defaultRankClient]);\r\n\r\n    const [comboSelector, setComboSelectorRunTime] = useState(1);\r\n    const [comboSelectorClient, setComboSelector] = useLocalStorage(\"comboSelector\", 1);\r\n    useEffect(() => {\r\n        setComboSelectorRunTime(comboSelectorClient);\r\n    }, [comboSelectorClient]);\r\n\r\n    const [numTeams, setNumTeamsRunTime] = useState(1);\r\n    const [numTeamsClient, setNumTeams] = useLocalStorage(\"numTeams\", 1);\r\n    useEffect(() => {\r\n        setNumTeamsRunTime(numTeamsClient);\r\n    }, [numTeamsClient]);\r\n\r\n\r\n    const tokenSelections = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0 };\r\n    const [hoveredBonus, setHoveredBonus] = useState(0);\r\n    const [activePet, setActivePet] = useState(-1);\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedPets, setSelectedPets] = useState([]);\r\n    const [failedFilters, setFailedFilters] = useState([]);\r\n    const [originalPets, setOriginalPets] = useState([]);\r\n    const [refreshGroups, setRefreshGroups] = useState(false);\r\n    const [weightMap, setWeightMap] = useState(DefaultWeightMap);\r\n    const [selectedItems, setSelectedItems] = useState(defaultPetSelection);\r\n    const [tokenDamageBias, setTokenDamageBias] = useState(15);\r\n\r\n    const includeLocked = false;\r\n\r\n    useEffect(() => {\r\n        let recalculate = true;\r\n\r\n        setRefreshGroups(false);\r\n        console.log(`handle groups called`)\r\n        const petData = data?.PetsCollection || [];\r\n        if (petData.length === 0) return null;\r\n        const selectedItemsById = petData.reduce((accum, item) => {\r\n            accum[parseInt(item.ID, 10)] = item;\r\n            return accum;\r\n        }, {})\r\n\r\n\r\n        const localPets = selectedItems.filter((e) => e < 9999).map(petId => selectedItemsById[petId]);\r\n        const keyString = selectedItems.sort().join(',');\r\n        let groups = groupCache[keyString];\r\n        if (groups && !recalculate) {\r\n            setGroups(groups);\r\n        } else {\r\n            groups = petHelper.findBestGroups(\r\n                localPets,\r\n                defaultRank,\r\n                groupRankCritera,\r\n                numTeams === -1 ? data.ExpeditionLimit : numTeams,\r\n                {\r\n                    tokenDamageBias: tokenDamageBias,\r\n                    activeBonuses: activeCustomBonuses,\r\n                    setFailedFilters: setFailedFilters,\r\n                    petWhiteList: petWhiteList\r\n                }\r\n            );\r\n            setGroupCache({ ...groupCache, [keyString]: groups })\r\n            setGroups(groups);\r\n\r\n        }\r\n    }, [activeCustomBonuses, defaultRank, groupRankCritera, numTeams, petWhiteList, tokenDamageBias, refreshGroups, data, selectedItems])\r\n\r\n\r\n    const dataLoaded = useRef(false);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (dataLoaded.current === false) {\r\n\r\n            dataLoaded.current = true;\r\n            let uploadedData = clientData;\r\n            uploadedData.PetDamageBonuses = helper.calcPOW(uploadedData.PetDamageBonusesBD);\r\n\r\n            let specialPetCombo = 1;\r\n            for (let i = 0; i < uploadedData.PetsSpecial.length; i++) {\r\n                let t = uploadedData.PetsSpecial[i];\r\n                if (t.BonusID === 5007 && t.Active === 1) {\r\n                    specialPetCombo += t.BonusPower / 100;\r\n                }\r\n            }\r\n            specialPetCombo = helper.roundTwoDecimal(specialPetCombo);\r\n\r\n            setComboSelector(specialPetCombo);\r\n\r\n            if (numTeams === -1) {\r\n                setNumTeams(uploadedData.ExpeditionLimit);\r\n            }\r\n            setGroupCache({});\r\n\r\n            uploadedData.PetsCollection.sort((a, b) => a.ID - b.ID);\r\n\r\n            let tempPets = [];\r\n            const positiveRankedPets = uploadedData.PetsCollection.filter(\r\n                (pet) => {\r\n                    // const isValidRank = !!pet.Rank;//Instead of relying on defaultRank always = 0, select valid ranks if they exist (not 0)\r\n                    const isValidLocked = includeLocked ? true : !!pet.Locked;\r\n                    if (isValidLocked) {\r\n                        tempPets.push(pet);\r\n                    }\r\n                    return isValidLocked;\r\n                    // return isValidRank && isValidLocked;\r\n                }\r\n            ).map((pet) => pet.ID);\r\n            setSelectedItems(positiveRankedPets);\r\n            setOriginalPets(tempPets);\r\n            setSelectedPets(tempPets);\r\n\r\n            setRefreshGroups(true);\r\n\r\n            setRunTimeData(clientData);\r\n        }\r\n    }, [clientData, includeLocked, numTeams, setComboSelector, setData, setNumTeams]);\r\n\r\n\r\n    useEffect(() => {\r\n        setRefreshGroups(true)\r\n    }, [defaultRank, comboSelector, groupRankCritera, numTeams, tokenDamageBias, activeCustomBonuses,])\r\n\r\n\r\n    let whiteListAlertText = '';\r\n\r\n    let totalTokensHR = 0;\r\n    let damageTotal = 0;\r\n\r\n    let bonusTotals = {\r\n        // 1001: 0, //potatoe gain\r\n        // 1002: 0, //class exp gain\r\n        // 1003: 0, //skull gain\r\n        1009: 0, // residue gain\r\n        1010: 0, //card power gain\r\n        1011: 0, // expedition reward\r\n        1012: 0, //dungeon time gain\r\n        1013: 0, //dungeon damage\r\n        1014: 0, //card exp\r\n        1015: 0, //reinc pts gain\r\n        1016: 0 // token gain\r\n    };\r\n    let bonusPets = {};\r\n    let totalMessages = [];\r\n\r\n    let relWhiteListMap = {};\r\n\r\n    let filterablePets = [];\r\n    let equippedPets = {};\r\n    let whitelistedPets = {};\r\n\r\n\r\n    const maxPets = 4;\r\n    const maxType = 2 * numTeams;\r\n    const manualGroups = {};\r\n    let numGround = 0;\r\n    let numAir = 0;\r\n\r\n    for (let i = 0; i < petWhiteList.length; i++) {\r\n        let cur = petWhiteList[i];\r\n        let inner_pet = cur.pet;\r\n\r\n        if (inner_pet.Type === 1) {\r\n            numGround++;\r\n        }\r\n        else {\r\n            numAir++;\r\n        }\r\n\r\n        // used to show which group it got sorted into\r\n        if (cur.placement === `auto`) {\r\n            relWhiteListMap[cur.id] = { ...cur };\r\n        }\r\n        else if (cur.placement === 'team') {\r\n\r\n            if (!manualGroups[cur.parameters]) {\r\n                manualGroups[cur.parameters] = [];\r\n            }\r\n            manualGroups[cur.parameters].push(inner_pet);\r\n            if (manualGroups[cur.parameters].length > maxPets) {\r\n                whiteListAlertText = `Group ${cur.parameters.team + 1} has too many pets!`;\r\n            }\r\n\r\n            if (whiteListAlertText.length === 0) {\r\n\r\n                let airy = 0;\r\n                let groundy = 0;\r\n                manualGroups[cur.parameters].forEach((manual_pet) => {\r\n                    if (manual_pet.Type === 1) {\r\n                        groundy++;\r\n                    }\r\n                    else {\r\n                        airy++;\r\n                    }\r\n                });\r\n                if (airy > (maxPets / 2)) {\r\n                    whiteListAlertText = `Group ${cur.parameters} has too many air pets!`;\r\n                }\r\n                else if (airy > (maxPets / 2)) {\r\n                    whiteListAlertText = `Group ${cur.parameters} has too many ground pets!`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (whiteListAlertText.length === 0) {\r\n        if (numAir > maxType) {\r\n            whiteListAlertText = `There are too many air pets!`;\r\n        }\r\n        else if (numGround > maxType) {\r\n            whiteListAlertText = `There are too many ground pets!`;\r\n        }\r\n    }\r\n\r\n\r\n    // if (groups && groupRankCritera === 2)\r\n    if (groups.length > 0)\r\n        groups.map((group, index) => {\r\n            // damageTotal += (petHelper.calculateGroupScore(group, defaultRank).groupScore) * 5 * data.PetDamageBonuses;\r\n            damageTotal += (petHelper.calculateGroupScore(group, 0).groupScore) * 5 * data.PetDamageBonuses;\r\n            group.forEach((pet) => {\r\n\r\n                if (!equippedPets[pet.ID]) {\r\n                    equippedPets[pet.ID] = pet;\r\n                }\r\n\r\n                if (pet.ID in relWhiteListMap) {\r\n                    relWhiteListMap[pet.ID].finalGroup = index;\r\n                }\r\n\r\n                pet.BonusList.forEach((bon) => {\r\n                    if (bon.ID in bonusTotals) bonusTotals[bon.ID]++;\r\n                })\r\n            })\r\n\r\n\r\n            const groupBests = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector)[tokenSelections[index]];\r\n            // totalTokensHR += groupBests.tokenHR;\r\n            // totalTokensHR += groupBests.totalTokens / groupBests.hours;\r\n            totalTokensHR += groupBests.tokenHR / groupBests.hours;\r\n        })\r\n\r\n    if (selectedPets) {\r\n        for (let i = 0; i < selectedPets.length; i++) {\r\n            selectedPets[i].BonusList.forEach((bonus) => {\r\n                if (!bonusPets[bonus.ID]) {\r\n                    bonusPets[bonus.ID] = { total: 0, pets: [] }\r\n                }\r\n                bonusPets[bonus.ID].total++;\r\n                bonusPets[bonus.ID].pets.push(selectedPets[i])\r\n            })\r\n        }\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(bonusTotals)) {\r\n        if (activeCustomBonuses.find((a) => a.id === Number(key)) || showAllBonusTally)\r\n            totalMessages.push({ text: `${BonusMap[key].label}: ${value}/${bonusPets[key] ? bonusPets[key].total : 0} pets`, bonus: key })\r\n    }\r\n\r\n\r\n    if (groupRankCritera === 1) {\r\n        selectedPets.map((pet) => {\r\n            let found;\r\n            try {\r\n\r\n                //Awful way to do it, but need to check we haven't already added pet to table\r\n                found = petWhiteList.find((a) => a.id === pet.ID);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n\r\n            if (found) {\r\n\r\n                if (!whitelistedPets[pet.ID]) {\r\n                    whitelistedPets[pet.ID] = pet;\r\n                }\r\n\r\n                return;\r\n            }\r\n            try {\r\n                if (pet.ID > 0)\r\n                    filterablePets.push({ id: pet.ID, label: petNames[pet.ID].name })\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n                let x = 0;\r\n            }\r\n        })\r\n    }\r\n\r\n    const leftOverIgnore = {\r\n        17: true,//attack speed\r\n        30: true,//contagion hp damage\r\n        27: true,//fries bonus\r\n        19: true,//Pet LEVEL Exp\r\n        18: true,//Pet Dmg\r\n        20: true,//Pet Rank Exp\r\n        26: true,//Plant Final Prod\r\n        32: true,//Plant Growth\r\n        25: true,//Plant Manual Harvest\r\n        26: true,//Plant Final Prod\r\n        24: true,//Plant Rank Exp\r\n        31: true,//Reinc Point Bonus\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n        18: true,//Pet Dmg\r\n    }\r\n    let leftOver1Pets = [];\r\n\r\n    selectedPets.map((e, index) => {\r\n        let found = e.BonusList.find((inner_bonus) => inner_bonus.ID === leftOverBonus1);\r\n        if (found) {\r\n            let tempy = { ...e };\r\n\r\n            if (equippedPets[e.ID]) {\r\n                tempy.equipped = true;\r\n            }\r\n            if (whitelistedPets[e.ID]) {\r\n                tempy.whitelisted = true;\r\n            }\r\n\r\n            leftOver1Pets.push(tempy);\r\n        }\r\n    });\r\n\r\n    const handleItemSelected = (items) => {\r\n        setSelectedItems(items);\r\n\r\n        const petData = data?.PetsCollection || [];\r\n        let localPets = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            localPets.push(petData[items[i]])\r\n        }\r\n\r\n        setSelectedPets(localPets);\r\n\r\n        if (items) {\r\n            setRefreshGroups(true);\r\n            // handleGroups(data, items);\r\n        }\r\n    };\r\n\r\n    leftOver1Pets = leftOver1Pets.sort((a, b) => petHelper.calculatePetBaseDamage(b, defaultRank) - petHelper.calculatePetBaseDamage(a, defaultRank))\r\n\r\n    let bonusesWithPets = {};\r\n    data.PetsCollection.forEach((bonus_pet) => {\r\n        bonus_pet.BonusList.forEach((pet_bonus_inner) => {\r\n            bonusesWithPets[pet_bonus_inner.ID] = bonus_pet;\r\n        })\r\n    })\r\n\r\n    let filterableBonuses = Object.values(BonusMap)\r\n        .filter((e) => !!e && !leftOverIgnore[e.id] && !!bonusesWithPets[e.id])\r\n        .sort((a, b) => a.label.localeCompare(b.label))\r\n        .map((inner_e) => {\r\n            if (inner_e.id < 5000) {\r\n                if (inner_e.id >= 1000 && !inner_e.label.includes(`Expedition`)) {\r\n                    inner_e.label = `Expedition ` + inner_e.label;\r\n                }\r\n                return inner_e;\r\n            }\r\n        })\r\n\r\n\r\n    return (\r\n        <div\r\n            // className=\"grid-container\"\r\n            style={{\r\n                // gridTemplateColumns: '4fr 4fr 2fr',\r\n                // columnGap: '12px',\r\n                width: 'calc(100% - 0px)',\r\n                background: 'black',\r\n                display: 'flex'\r\n            }}\r\n        >\r\n            {/* Grid Left */}\r\n            <div\r\n                className='importantText'\r\n                style={{\r\n                    height: 'calc(100vh - 52px)',\r\n                    border: '2px solid rgba(255,255,255,0.8)',\r\n                    margin: '6px 12px 6px 6px',\r\n                    padding: '0px 0 0px 0px',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    overflow: 'hidden',\r\n                    borderRadius: '6px',\r\n                    width: '33%',\r\n                    minWidth: '310px',\r\n                    maxWidth: '590px'\r\n\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        minWidth: '300px',\r\n                        height: '100%',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    }}\r\n                >\r\n\r\n                    {/* Title header */}\r\n                    <div style={{ backgroundColor: 'rgba(255,255,255, 0.12)', }}>\r\n\r\n                        <div\r\n                            style={{\r\n                                fontSize: '32px', fontWeight: 'bold', width: '100%', borderBottom: '0px solid rgba(255,255,255,0.8)',\r\n                                textAlign: 'center'\r\n                            }}>\r\n                            Best Teams\r\n                        </div>\r\n                        <div style={{\r\n                            display: 'flex', fontSize: '20px',\r\n                            // fontWeight: 'bold',\r\n                            borderTop: '2px solid rgba(255,255,255,0.8)',\r\n                            borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                            textAlign: 'center'\r\n                        }}>\r\n                            <div style={{ width: '50%', borderRight: '2px solid rgba(255,255,255,0.8)' }}>\r\n                                {`Total Damage: ${damageTotal.toExponential(3)}`}\r\n                            </div>\r\n                            <div style={{ width: '50%' }}>\r\n                                {`Total tokens/hr: ${helper.roundThreeDecimal(totalTokensHR)}`}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{ overflow: 'auto' }}>\r\n\r\n                        {groups.reduce((accum, group, index) => {\r\n                            let groupLabel = ``;\r\n\r\n                            const groupTotal = petHelper.calculateGroupScore(group, defaultRank);\r\n                            // let tokenScore = groupTotal.tokenMult * (Math.pow(1 + petHelper.SOUL_CLOVER_STEP, data.SoulGoldenClover)) * (1 + 0.05 * data.SoulGoldenClover) * comboSelector;s\r\n                            // let tokenScore = groupTotal.tokenMult * (Math.pow(1 + petHelper.SOUL_CLOVER_STEP, data.SoulGoldenClover)) * comboSelector * data.ExpeditionTokenBonuses;\r\n                            // tokenScore = tokenScore.toExponential(3);\r\n                            let tempTokenScore = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector)[tokenSelections[index]]\r\n                            let tokenScore = (tempTokenScore.tokenHR / tempTokenScore.hours).toExponential(3);\r\n                            const score = groupTotal.groupScore;\r\n                            const displayedDamage = (score * 5 * data.PetDamageBonuses).toExponential(2);\r\n                            const trueDamage = (5 * groupTotal.groupScoreMax * Number(data?.PetDamageBonuses)).toExponential(2);\r\n\r\n                            let tokenInfo = ``;\r\n\r\n                            let groupLabelDamage = ``;\r\n                            let groupLabelToken = ``;\r\n                            let groupRankDamage = ``;\r\n\r\n                            switch (groupRankCritera) {\r\n                                case 1://damage\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupRankDamage = `Rank Dmg: ${displayedDamage}`\r\n                                    groupLabelDamage = `Game Dmg: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n\r\n                                    break;\r\n                                case 2://token\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupLabelDamage = `Damage: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n                                    break;\r\n                                case 3://Advanced\r\n                                    groupLabel = `Group ${index + 1}`;\r\n                                    // groupLabelDamage = `Damage: ${displayedDamage}`\r\n                                    groupLabelDamage = `Damage: ${trueDamage}`\r\n                                    groupLabelToken = `Token/hr: ${tokenScore}`\r\n                                    tokenInfo = petHelper.calculateBestHours(group, null, { clover: data.SoulGoldenClover, residueToken: data.CowShopExpeditionToken, data: data }, comboSelector);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n\r\n                            }\r\n\r\n                            const totalScore = Number(Number(data?.PetDamageBonuses) * score * 5).toExponential(3);\r\n                            const groupTooltip = (\r\n                                <div className=\"groups-tooltip\">\r\n                                    <span className=\"groups-tooltip-content\">\r\n                                        <h3>Group Score ({totalScore})</h3>\r\n                                        <ScoreSection data={data} group={group} totalScore={totalScore} defaultRank={defaultRank} />\r\n                                    </span>\r\n                                </div>\r\n                            );\r\n\r\n                            let GroupTitle = <div\r\n                                className=\"grid-row\"\r\n                                key={(1 + index) * 9001}\r\n                                style={{\r\n                                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{ display: 'flex', width: '100%', borderBottom: '1px solid rgba(255,255,255,0.8)' }}\r\n                                >\r\n                                    <div\r\n                                        style={{ borderRight: '1px solid rgba(255,255,255,0.8)', width: '33%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                        {groupRankDamage}\r\n                                    </div>\r\n\r\n\r\n                                    <div\r\n                                        style={{ width: '33%', borderRight: '1px solid rgba(255,255,255,0.8)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                                    >\r\n                                        <div style={{ margin: '0 12px' }}>\r\n\r\n                                            {groupLabelDamage}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ width: '33%', display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '2px 0' }}\r\n                                    >\r\n                                        <div style={{ margin: '0 12px' }}>\r\n                                            {groupLabelToken}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            let GroupIcons =\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex', padding: '6px 6px 3px 6px',\r\n\r\n                                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                                    }}\r\n                                >\r\n                                    {!!group && group.map((petData, idx) => {\r\n                                        const { ID } = petData;\r\n                                        let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === ID)\r\n\r\n                                        if (!staticPetData) {\r\n                                            staticPetData = {\r\n                                                ...petNames[9999]\r\n                                            }\r\n                                        }\r\n\r\n                                        return (\r\n                                            <div\r\n                                                key={ID}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    display: 'flex',\r\n                                                    // flex: '1',\r\n                                                    width: 'calc(25% - 3px)',\r\n                                                    height: 'auto',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center'\r\n                                                }}\r\n                                            >\r\n                                                <PetItemCoin\r\n                                                    petData={staticPetData}\r\n                                                    fullPetData={petData}\r\n                                                    data={data}\r\n                                                    isSelected={true}\r\n                                                    onClick={() => { }}\r\n                                                    weightMap={weightMap}\r\n                                                    defaultRank={defaultRank}\r\n                                                    borderActive={petData.BonusList.find((a) => a.ID === hoveredBonus) || ID === activePet}\r\n                                                    enabledBonusHighlight={enabledBonusHighlight}\r\n                                                />\r\n                                                <div\r\n                                                    className=\"hover\"\r\n                                                    style={{\r\n                                                        position: 'absolute', top: '0', right: '0',\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n\r\n                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === petData.ID);\r\n                                                            if (!pet_inner) {\r\n                                                                temp.push({ label: staticPetData.name, id: staticPetData.petId, placement: 'team', parameters: { team: index, damageBias: 17 }, pet: petData });\r\n                                                            }\r\n                                                            else {\r\n                                                                pet_inner.placement = 'team';\r\n                                                                pet_inner.parameters = { team: index };\r\n                                                                pet_inner.pet = petData;\r\n                                                            }\r\n                                                            return temp;\r\n                                                        })\r\n\r\n                                                        setRefreshGroups(true);\r\n                                                        return;\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ width: '20px', height: '20px', position: 'relative', zIndex: '2' }} >\r\n                                                        <Image\r\n                                                            fill\r\n                                                            src={pinIcon}\r\n                                                            alt='push pin'\r\n                                                        />\r\n                                                    </div>\r\n                                                    {/* <img\r\n                                                        alt='push pin'\r\n                                                        style={{ width: '20px' }}\r\n                                                        src={pinIcon}\r\n                                                    /> */}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"hover\"\r\n                                                    style={{\r\n                                                        position: 'absolute', bottom: '0', right: '0',\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n\r\n                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === petData.ID);\r\n                                                            if (!pet_inner) {\r\n                                                                temp.push({\r\n                                                                    label: staticPetData.name,\r\n                                                                    id: staticPetData.petId,\r\n                                                                    placement: 'blacklist',\r\n                                                                    parameters: { team: 0, damageBias: 17 },\r\n                                                                    pet: petData\r\n                                                                });\r\n                                                            }\r\n                                                            else {\r\n                                                                pet_inner.placement = 'blacklist';\r\n                                                                pet_inner.parameters = { team: 0 }\r\n                                                                pet_inner.pet = petData;\r\n                                                            }\r\n\r\n                                                            return temp;\r\n                                                        })\r\n\r\n                                                        setRefreshGroups(true);\r\n                                                        return;\r\n\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={{ width: '20px', height: '20px', position: 'relative', zIndex: '2' }} >\r\n                                                        <Image\r\n                                                            src={trashIcon}\r\n                                                            alt='trash can'\r\n                                                            fill\r\n                                                        />\r\n                                                    </div>\r\n                                                    {/* <img alt='trash can'\r\n                                                        style={{ width: '20px' }}\r\n                                                        src={trashIcon} /> */}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n\r\n\r\n                            let finalRow = <div\r\n                                key={'group' + index}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    border: groupRankCritera === 2 && groupTotal.tokenRewardCount > 0 ? '1px black rgba(255,255,255,0.8)' : 'none',\r\n                                    marginTop: index === 0 ? '16px' : '22px',\r\n                                    marginLeft: '6px',\r\n                                    marginRight: '6px',\r\n                                    marginBottom: '12px',\r\n                                    border: '1px solid rgba(255,255,255,0.8)',\r\n                                }}>\r\n                                <div\r\n                                    style={{ display: 'flex', backgroundColor: 'rgba(255,255,255, 0.12)', borderRight: `1px solid rgba(255,255,255,0.8)` }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={groupTooltip} extraClasses={`maxHeight`}>\r\n                                        <div\r\n                                            style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '0 2px' }}\r\n                                        >\r\n                                            <div style={{ fontSize: '20px' }}>\r\n                                                {index + 1}\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', margin: '0 0 0 0', position: 'relative' }} >\r\n                                                <Image\r\n                                                    fill\r\n                                                    src={infoIcon}\r\n                                                    alt={`letter \"I\" in a circle, shows more information on hover`}\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt={`letter \"I\" in a circle, shows more information on hover`} style={{ height: '16px', margin: '0 0 0 6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n                                </div>\r\n                                <div\r\n                                    style={{ display: 'flex', flexDirection: 'column', flex: '1' }}\r\n                                >\r\n                                    {GroupTitle}\r\n                                    {GroupIcons}\r\n                                </div>\r\n                            </div>\r\n                            accum.push(finalRow);\r\n\r\n                            return accum;\r\n                        }, [])}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grid Center */}\r\n            <div\r\n                className='importantText'\r\n                style={{\r\n                    border: '2px solid rgba(255,255,255,0.8)',\r\n                    margin: '6px 12px 6px 6px',\r\n                    maxHeight: 'calc(100vh - 46px)',\r\n                    backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                    overflow: 'hidden',\r\n                    borderRadius: '6px',\r\n                    width: '33%',\r\n                    minWidth: '410px',\r\n                    // maxWidth: '590px'\r\n                }}>\r\n\r\n                {/* Header */}\r\n                <div style={{\r\n                    display: 'flex', width: '100%', borderBottom: '2px solid  rgba(255,255,255,0.8)', justifyContent: 'center',\r\n                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                }}>\r\n\r\n                    <div style={{ fontSize: '32px', fontWeight: 'bold', }}>\r\n                        Configuration\r\n                    </div>\r\n                    <div style={{ height: '30px', alignSelf: 'center', marginLeft: '12px' }} >\r\n                        <MouseOverPopover\r\n                            opacity='1'\r\n                            tooltip={\r\n                                <div>\r\n                                    {/* <img alt='screenshot of game text explaining how pet ranks work' src={rankExplain} style={{ height: '50px' }} /> */}\r\n                                    <img alt='screenshot of game text explaining how pet ranks work' src={'/images/rank_explain.png'} style={{ height: '50px' }} />\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div style={{ fontWeight: 'bold', fontSize: '24px', minWidth: \"90px\" }}>Explanation/How To Use: </div>\r\n                                        <div style={{ marginLeft: '12px', maxWidth: '724px' }}>\r\n                                            Whitelist (make sure they are on an expedition team) any important pets (such as those that have item rating, reincarnation exp, residue) or ones that you have equipped\r\n                                            often. The expedition ranks will make those pets level faster and give bigger bonuses when actively equipped </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        >\r\n                            <div style={{ height: '30px', width: '30px', position: 'relative' }} >\r\n\r\n                                <Image\r\n                                    alt='Letter \"I\" inside a circle, shows more information on hover'\r\n                                    src={infoIconAmber}\r\n                                    fill\r\n                                />\r\n                            </div>\r\n                            {/* <img alt='Letter \"I\" inside a circle, shows more information on hover' src={infoIconAmber} style={{ height: '30px' }} /> */}\r\n                        </MouseOverPopover>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* Info Configs */}\r\n                <div\r\n                    style={{ padding: '6px 3px 1px 3px', overflow: 'auto', maxHeight: 'calc(100% - 45px)', overflowAnchor: 'none' }}\r\n                >\r\n                    <div style={{\r\n                        display: 'flex', flexDirection: 'column',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                        margin: '6px 6px',\r\n                        padding: '6px',\r\n                        border: '1px solid rgba(255,255,255,0.8)', overflowAnchor: 'none'\r\n                    }}>\r\n\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n\r\n                            <div>{`Ignore Pets Rank`}</div>\r\n                            <input\r\n                                aria-label='Force pets to rank 1'\r\n                                type=\"checkbox\"\r\n                                onChange={(e) => {\r\n                                    setDefaultRank(e.target.checked ? 1 : 0)\r\n                                }}\r\n                                checked={!!defaultRank}\r\n                                value={!!defaultRank}\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', marginTop: '3px' }}>\r\n                            <div style={{ marginRight: '12px' }}>\r\n                                {`Golden Clover Level: ${data.SoulGoldenClover}`}\r\n                            </div>\r\n                            <div>\r\n\r\n                                {`Token Bonuses: ${helper.roundTwoDecimal(data.ExpeditionTokenBonuses)}`}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n\r\n                            <MouseOverPopover tooltip={\r\n                                <div>\r\n                                    Expedition reward from active pets special combo (0, 10%, 20%)\r\n                                </div>\r\n                            }>\r\n                                <div style={{ marginRight: '12px' }}>\r\n                                    Expedition Reward Combo\r\n                                </div>\r\n                            </MouseOverPopover>\r\n\r\n\r\n\r\n                            <select\r\n                                className='importantText'\r\n                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                aria-label='Specify desired combo bonus'\r\n                                // disabled={refreshGroups}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        setComboSelector(Number(e.target.value))\r\n                                    }\r\n                                }\r\n                                // defaultValue={comboSelector + ''}\r\n                                value={comboSelector + ''}\r\n                            >\r\n                                <option\r\n                                    value=\"1\">1.0</option>\r\n                                <option\r\n                                    value=\"1.1\">1.1</option>\r\n                                <option\r\n                                    value=\"1.2\">1.2</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center' }} >\r\n                            <div\r\n                                style={{\r\n                                    marginRight: '12px'\r\n                                }}>\r\n                                Number of teams:\r\n                            </div>\r\n                            <input\r\n                                id='prepFormInput'\r\n                                className='importantText'\r\n                                style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px', fontSize: '14px' }}\r\n                                aria-label='Number of teams to calculate'\r\n                                type='number'\r\n                                value={numTeams}\r\n                                onChange={\r\n                                    (e) => {\r\n                                        try {\r\n                                            let x = Number(e.target.value);\r\n                                            x = Math.floor(x);\r\n                                            if (x < 1 || x > 7) {\r\n                                                return;\r\n                                            }\r\n                                            setNumTeams(e.target.value);\r\n                                        }\r\n                                        catch (err) {\r\n                                            console.log(err);\r\n                                        }\r\n                                        // console.log(`pressed: ${e.target.value}`)\r\n\r\n                                    }}\r\n                                placeholder={numTeams + ''}\r\n                                min=\"1\"\r\n                                max=\"7\"\r\n                            />\r\n                        </div>\r\n\r\n                        {groupRankCritera === 1 && (\r\n                            <div style={{ display: 'flex', alignItems: 'center', marginTop: '2px' }}>\r\n\r\n                                <div>{`Show all bonus totals`}</div>\r\n                                <input\r\n                                    aria-label='Displays bonuses whose backgrounds can be coloured in'\r\n                                    // disabled={refreshGroups}\r\n                                    type=\"checkbox\" onChange={(e) => {\r\n                                        setShowAllBonusTally(e.target.checked ? true : false)\r\n                                    }} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Card to toggle bonuses */}\r\n                    {showAllBonusTally && (\r\n                        <div style={{\r\n                            display: 'flex', flexDirection: 'column',\r\n                            backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                            margin: '6px 6px',\r\n                            padding: '6px',\r\n                            border: '1px solid rgba(255,255,255,0.8)',\r\n                        }}>\r\n                            <div\r\n                                style={{\r\n                                    margin: '6px 0 6px 0',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column'\r\n                                }}>\r\n                                {totalMessages.map((e, index) => {\r\n                                    if (index % 2 !== 0 && index > 0) return;\r\n\r\n                                    let firstDmgBias = Number(e.bonus);\r\n                                    let secondDmgBias = (index + 1) < totalMessages.length ? Number(totalMessages[index + 1].bonus) : null;\r\n\r\n                                    let firstFailMsg = failedFilters[e.bonus];\r\n                                    let secondFailMsg = secondDmgBias ? failedFilters[totalMessages[index + 1].bonus] : null;\r\n\r\n                                    if (firstFailMsg) {\r\n                                        console.log(`aaa`)\r\n                                    }\r\n\r\n                                    activeCustomBonuses.forEach((active_bon) => {\r\n                                        if (active_bon.placement !== 'rel') return null;\r\n                                        // return;\r\n                                        if (active_bon.id === firstDmgBias) {\r\n                                            firstDmgBias = <div\r\n                                                style={{\r\n                                                    // margin: '6px 0 6px 0',\r\n                                                    display: 'flex'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        marginRight: '12px'\r\n                                                    }}\r\n                                                >\r\n                                                    {`damage bias`}\r\n                                                </div>\r\n                                                <input\r\n                                                    aria-label='Damage bias to control when a pet should be put in'\r\n                                                    type='number'\r\n                                                    className='prepNumber'\r\n                                                    value={active_bon.relThresh}\r\n                                                    onChange={\r\n                                                        (num) => {\r\n                                                            try {\r\n                                                                let x = Number(num.target.value);\r\n                                                                x = Math.floor(x);\r\n                                                                if (x < 0 || x > 100) {\r\n                                                                    return;\r\n                                                                };\r\n\r\n                                                                setActiveCustomBonuses((bonuses) => {\r\n                                                                    let newBonuses = [...bonuses];\r\n                                                                    let bonus = newBonuses.find((a) => a.id === active_bon.id);\r\n                                                                    bonus.relThresh = x;\r\n                                                                    return newBonuses;\r\n                                                                })\r\n                                                            }\r\n                                                            catch (err) {\r\n                                                                console.log(err);\r\n                                                            }\r\n                                                        }}\r\n                                                    placeholder={1 + ''}\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n                                        if (active_bon.id === secondDmgBias) {\r\n                                            secondDmgBias = <div\r\n                                                style={{\r\n                                                    // margin: '6px 0 6px 0',\r\n                                                    display: 'flex'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        marginRight: '12px'\r\n                                                    }}\r\n                                                >\r\n                                                    {`damage bias`}\r\n                                                </div>\r\n                                                <input\r\n                                                    aria-label='Damage bias to control when a pet should be put in'\r\n                                                    type='number'\r\n                                                    className='prepNumber'\r\n                                                    value={active_bon.relThresh}\r\n                                                    onChange={\r\n                                                        (num) => {\r\n                                                            try {\r\n                                                                let x = Number(num.target.value);\r\n                                                                x = Math.floor(x);\r\n                                                                if (x < 0 || x > 100) {\r\n                                                                    return;\r\n                                                                };\r\n\r\n                                                                setActiveCustomBonuses((bonuses) => {\r\n                                                                    let newBonuses = [...bonuses];\r\n                                                                    let bonus = newBonuses.find((a) => a.id === active_bon.id);\r\n                                                                    bonus.relThresh = x;\r\n                                                                    return newBonuses;\r\n                                                                })\r\n                                                            }\r\n                                                            catch (err) {\r\n                                                                console.log(err);\r\n                                                            }\r\n                                                        }}\r\n                                                    placeholder={1 + ''}\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n                                    })\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={e.bonus}\r\n                                            style={{\r\n                                                display: 'flex'\r\n                                            }}\r\n                                        >\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '50%'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        // margin: '6px 0 6px 0'\r\n                                                        // color: helper.bonusColorMap[e.bonus].color\r\n                                                    }}\r\n                                                    onMouseEnter={(e_inner) => {\r\n                                                        setHoveredBonus(Number(e.bonus))\r\n                                                    }}\r\n                                                    onMouseLeave={(e_inner) => {\r\n                                                        setHoveredBonus(-1);\r\n                                                    }}\r\n\r\n                                                >\r\n                                                    {totalMessages[index].text}\r\n                                                    <div>\r\n                                                        <div style={{ display: 'flex' }}>\r\n                                                            <div>{`Enable highlight`}</div>\r\n                                                            <input\r\n                                                                aria-label={`Enables the highlight for this bonus`}\r\n                                                                type=\"checkbox\"\r\n                                                                onChange={(e_inner) => {\r\n                                                                    setEnabledBonusHighlight({ ...enabledBonusHighlight, [e.bonus]: e_inner.target.checked ? 1 : 0 })\r\n                                                                }}\r\n                                                                checked={enabledBonusHighlight[e.bonus]}\r\n                                                            />\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: '24px',\r\n                                                                    background: helper.bonusColorMap[e.bonus].color\r\n                                                                }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"dmgBias\">\r\n                                                        {isNaN(firstDmgBias) &&\r\n\r\n\r\n                                                            <MouseOverPopover tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        How aggressively to slot in these pets\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        Higher value means these pets need to be stronger to considered, lower means smaller threshold to slot them in\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        This is based on the best team at each step without these pets, vs with it.\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n                                                                {firstDmgBias}\r\n                                                            </MouseOverPopover>\r\n\r\n\r\n\r\n                                                        }\r\n                                                    </div>\r\n                                                    {!!firstFailMsg &&\r\n                                                        <div\r\n                                                            style={{ color: 'red' }}>\r\n                                                            {firstFailMsg}\r\n                                                        </div>\r\n                                                    }\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            {(index + 1 < totalMessages.length) && (\r\n                                                <div\r\n                                                    key={totalMessages[index + 1].bonus}\r\n                                                    style={{\r\n                                                        width: '50%'\r\n                                                    }}\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            // margin: '6px 0 6px 0'\r\n                                                        }}\r\n                                                        onMouseEnter={(e_inner) => {\r\n                                                            setHoveredBonus(Number(totalMessages[index + 1].bonus))\r\n                                                        }}\r\n                                                        onMouseLeave={(e_inner) => {\r\n                                                            setHoveredBonus(-1);\r\n                                                        }}\r\n                                                    >\r\n                                                        {totalMessages[index + 1].text}\r\n                                                        <div>\r\n                                                            <div style={{ display: 'flex' }}>\r\n                                                                <div>{`Enable highlight`}</div>\r\n                                                                <input\r\n                                                                    aria-label='Enables highlighting of pets with this bonus'\r\n                                                                    type=\"checkbox\"\r\n                                                                    onChange={(e_inner) => {\r\n                                                                        setEnabledBonusHighlight({ ...enabledBonusHighlight, [totalMessages[index + 1].bonus]: e_inner.target.checked ? 1 : 0 })\r\n                                                                    }}\r\n                                                                    checked={enabledBonusHighlight[totalMessages[index + 1].bonus]}\r\n                                                                />\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width: '24px',\r\n                                                                        background: helper.bonusColorMap[totalMessages[index + 1].bonus].color\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className='dmgBias'>\r\n\r\n                                                            {isNaN(secondDmgBias) && secondDmgBias}\r\n                                                        </div>\r\n                                                        {!!secondFailMsg &&\r\n                                                            <div\r\n                                                                style={{ color: 'red' }}>\r\n                                                                {secondFailMsg}\r\n                                                            </div>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Show Pet Whitelist */}\r\n                    {groupRankCritera === 1 && (\r\n                        <div\r\n                            style={{\r\n                                margin: '16px 6px',\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                flex: '1',\r\n                                border: '1px solid rgba(255,255,255,0.8)',\r\n                                backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                                // padding: '6px 6px 6px 6px'\r\n                            }}\r\n                        >\r\n                            <div style={{}}>\r\n                                <div>\r\n                                    <h4 style={{ margin: '6px', textAlign: 'center', fontSize: '20px' }}>Pet Whitelist</h4>\r\n                                    <h4 style={{ margin: '6px', textAlign: 'center', fontSize: '20px', color: 'red' }}>{`${whiteListAlertText}`}</h4>\r\n                                </div>\r\n                                {/* Pet whitelist stuff */}\r\n                                <div style={{ margin: '6px', display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: '36px' }}>\r\n                                    <SearchBox data={{\r\n                                        list: filterablePets\r\n                                    }}\r\n                                        onSelect={(e) => {\r\n                                            setPetWhiteList((curr) => {\r\n                                                let temp = [...curr];\r\n                                                // let petObj = originalPets.find((search_pet) => search_pet.ID === e.id);\r\n                                                let petObj = data.PetsCollection.find((search_pet) => search_pet.ID === e.id);\r\n                                                temp.push({ ...e, placement: 'blacklist', parameters: { team: 0, damageBias: 17 }, pet: petObj });\r\n                                                return temp;\r\n                                            })\r\n                                            setRefreshGroups(true);\r\n                                        }}\r\n                                    />\r\n                                    <div\r\n                                        style={{ display: 'flex' }}\r\n                                    >\r\n                                        <div\r\n                                            style={{ marginRight: '6px' }}\r\n                                        >\r\n                                            Team Presets\r\n                                        </div>\r\n                                        <select\r\n                                            className='importantText'\r\n                                            style={{ maxWidth: '144px', backgroundColor: '#171717', borderRadius: '4px' }}\r\n                                            aria-label='Select your in game teams to quickly add those pets to whitelist'\r\n                                            onChange={\r\n                                                (e) => {\r\n\r\n                                                    let selectedTeam = data.PetsLoadout[Number(e.target.value)]\r\n                                                    console.log(selectedTeam);\r\n\r\n                                                    setPetWhiteList((curr) => {\r\n                                                        let temp = [...curr];\r\n                                                        // temp.push({ ...e, placement: 'blacklist', parameters: { team: 0, damageBias: 17 } });\r\n\r\n                                                        for (let x = 0; x < selectedTeam.IDs.length; x++) {\r\n                                                            let selected = selectedTeam.IDs[x];\r\n                                                            if (selected > 0) {\r\n                                                                let base = {\r\n                                                                    id: selected,\r\n                                                                    label: petNames[selected].name,\r\n                                                                    // placement: 'rel',\r\n                                                                    placement: 'auto',\r\n                                                                    parameters: { team: 0, damageBias: 17 },\r\n                                                                    pet: data.PetsCollection.find((pet_search) => pet_search.ID === selected)\r\n                                                                }\r\n                                                                if (!temp.find((inner_find) => inner_find.id === base.id)) {\r\n                                                                    temp.push(base);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        return temp;\r\n                                                    })\r\n                                                    setRefreshGroups(true);\r\n\r\n                                                }\r\n                                            }\r\n                                            value={''}\r\n                                        >\r\n                                            {\r\n                                                [<option value='' key={'initial one'}>Select Team</option>, ...data.PetsLoadout.map((cur, index) => {\r\n\r\n                                                    if (cur.Locked === 0) return;\r\n\r\n                                                    return (\r\n                                                        <option\r\n                                                            key={index}\r\n                                                            value={index}\r\n\r\n                                                        >{cur.Name}</option>\r\n                                                    )\r\n                                                })]\r\n                                            }\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Pet white/black list */}\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    margin: '12px 0 0 0',\r\n                                    borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                    borderBottom: '1px solid rgba(255,255,255,0.8)',\r\n                                    backgroundColor: 'rgba(255,255,255, 0.12)',\r\n                                }}\r\n                            >\r\n\r\n                                {/* Pet */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'red',\r\n                                        width: '50%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n\r\n                                    }}\r\n                                >\r\n                                    Pet\r\n                                </div>\r\n\r\n                                {/* placement */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'yellow',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                        borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                        borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                Determines the order in which the pets are slotted in:\r\n                                            </div>\r\n                                            <div>\r\n                                                Blacklist: Omits this pet from any group\r\n                                            </div>\r\n                                            <div>\r\n                                                Group: Forces the pet to go into a certain group\r\n                                            </div>\r\n                                            <div>\r\n                                                Auto:  Tries to find optimal placement automatically\r\n                                            </div>\r\n                                            {/* <div>\r\n                                                Relative: Tries to find optimal placement automatically based on `damage bias`\r\n                                            </div> */}\r\n                                        </div>\r\n                                    }>\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Placement\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n                                </div>\r\n                                {/* Parameters */}\r\n                                <div\r\n                                    style={{\r\n                                        // background: 'blue',\r\n                                        width: '25%',\r\n                                        display: 'flex',\r\n                                        // boxShadow: `0 0 0 1px #ecf0f5`,\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                    }}\r\n                                >\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            <div>\r\n                                                <div>\r\n                                                    In Placement=Group, determines which group the pet is placed in\r\n                                                </div>\r\n                                                <div>\r\n                                                    In Placement=Auto, tried to find the optimal placement automatically\r\n                                                </div>\r\n                                                {/* <div>\r\n                                                    In Placement=Relative, determines which group the pet is placed in based on the bias number (higher means more damage necessary to placed in)\r\n                                                </div> */}\r\n                                            </div>\r\n                                        </div>\r\n                                    }>\r\n\r\n                                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                            <div>\r\n                                                Parameters\r\n                                            </div>\r\n                                            <div style={{ height: '18px', width: '18px', position: 'relative', marginLeft: '6px' }} >\r\n                                                <Image\r\n                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                    src={infoIcon}\r\n                                                    fill\r\n                                                />\r\n                                            </div>\r\n                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover' style={{ height: '16px', marginLeft: '6px' }} src={infoIcon} /> */}\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\r\n                                margin: '0 0 0 0',\r\n                            }}>\r\n                                {petWhiteList.map((pet, index) => {\r\n                                    let petLabel = pet.label;\r\n                                    let petGroup = ``\r\n                                    if (pet.id in relWhiteListMap) {\r\n                                        // petLabel += ` (Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                        petGroup += `(Group: ${relWhiteListMap[pet.id].finalGroup + 1})`\r\n                                    }\r\n\r\n                                    let showRed = false;//Too high\r\n                                    let showGreen = false;// Too low\r\n                                    let hoverMsg = ``;\r\n\r\n                                    //Check whether this pet is placed too low or too high\r\n                                    if (pet.placement !== `blacklist`) {\r\n\r\n                                        let group_index = groups.findIndex((temp_e) => {\r\n                                            return temp_e.find((temp_e2) => temp_e2.ID === pet.id)\r\n                                        });\r\n\r\n                                        if (group_index > -1) {\r\n\r\n                                            //Check if this pet got put in too high\r\n\r\n                                            let group = groups[group_index];\r\n\r\n                                            //Can only check if not on bottom\r\n                                            if (group_index !== (groups.length - 1)) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(group, defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index + 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index + 1][j];\r\n\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n                                                            let bigsad = -1;\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...group];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === pet.pet.ID)\r\n                                                                tempGroup[ind] = temp_pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showRed = true;\r\n                                                        hoverMsg = `${petLabel} might be too high, try ${pet.placement === 'rel' ? `increase` : `lowering`} the value to drop them to a lower team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                            //If they are not too high, check if they are too low (except for team 1)\r\n                                            if (!showRed && group_index > 0) {\r\n                                                //By default only need to check twice (2gnd or 2air)\r\n                                                const maxChecks = 2;\r\n                                                let originalGroupScore = petHelper.calculateGroupScore(groups[group_index - 1], defaultRank).groupScore;\r\n                                                let tempGroup = [];\r\n                                                let triedPets = {};\r\n\r\n                                                for (let i = 0; i < maxChecks; i++) {//\r\n                                                    let foundNew = false;\r\n\r\n                                                    for (let j = 0; j < groups[group_index - 1].length; j++) {\r\n\r\n                                                        let temp_pet = groups[group_index - 1][j];\r\n                                                        if (temp_pet.Type === pet.pet.Type) {\r\n                                                            let bigsad = -1;\r\n                                                            if (!(temp_pet.ID in triedPets) && !foundNew) {\r\n                                                                triedPets[temp_pet.ID] = true;\r\n                                                                foundNew = true;\r\n                                                                tempGroup = [...groups[group_index - 1]];\r\n                                                                let ind = tempGroup.findIndex((temp_repl) => temp_repl.ID === temp_pet.ID)\r\n                                                                tempGroup[ind] = pet.pet;\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    let newGroupScore = petHelper.calculateGroupScore(tempGroup, defaultRank).groupScore;\r\n\r\n                                                    if (newGroupScore > originalGroupScore) {\r\n                                                        showGreen = true;\r\n                                                        hoverMsg = ` ${petLabel} might be too low, try ${pet.placement === 'rel' ? `lowering` : `increasing`} the value to bump them to a higher team`\r\n                                                    }\r\n                                                    tempGroup = [];\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        //Has a nan placement -> suggest decreasing the rel value\r\n                                        else {\r\n                                            hoverMsg = `Try lowering this value until ${petLabel} is put in`;\r\n                                            showGreen = true;\r\n                                        }\r\n\r\n                                    }\r\n\r\n                                    let bigsad = -1;\r\n                                    return (\r\n                                        <div\r\n                                            key={pet.label}\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                width: '100%',\r\n                                                height: '25px',\r\n                                                backgroundColor: (index % 2) === 0 ? 'rgba(255,255,255, 0.07)' : 'rgba(255,255,255, 0.005)',\r\n                                            }}\r\n\r\n                                        >\r\n                                            {/* Pet name + delete */}\r\n                                            <div style={{\r\n                                                width: '50%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                position: 'relative',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                            }}\r\n                                                onMouseEnter={() => {\r\n                                                    setActivePet(pet.id)\r\n                                                }}\r\n                                                onMouseLeave={() => {\r\n                                                    setActivePet(-1);\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        position: 'absolute',\r\n                                                        width: '100%',\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'space-between',\r\n                                                        zIndex: '1'\r\n                                                    }}\r\n\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginLeft: '6px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petLabel}\r\n                                                    </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            marginRight: '34px'\r\n                                                        }}\r\n                                                    >\r\n                                                        {petGroup}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        height: '12px', width: '12px',\r\n                                                        margin: '0 12px 0 auto',\r\n                                                        zIndex: '2',\r\n                                                        position: 'relative'\r\n                                                    }}\r\n                                                    onClick={(e) => {\r\n                                                        setPetWhiteList((curr) => {\r\n                                                            let temp = [...curr];\r\n                                                            temp = temp.filter((inner_pet) => {\r\n                                                                return inner_pet.id !== pet.id\r\n                                                            });\r\n                                                            return temp;\r\n                                                        })\r\n                                                        setRefreshGroups(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <Image\r\n                                                        alt='X (cross to remove)'\r\n                                                        src={xIcon}\r\n                                                        fill\r\n                                                    />\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            {/* Pet Placement */}\r\n                                            <div style={{\r\n                                                width: '25%',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'center',\r\n                                                borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                                borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n\r\n                                            }}>\r\n\r\n                                                <select\r\n                                                    className='importantText'\r\n                                                    style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px' }}\r\n                                                    aria-label='Select what kind of placement the pet will have'\r\n                                                    value={pet.placement}\r\n                                                    onChange={\r\n                                                        (choice) => {\r\n                                                            console.log(choice);\r\n                                                            setPetWhiteList((curr) => {\r\n                                                                let temp = [...curr];\r\n                                                                let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                tempPet.placement = choice.target.value;\r\n                                                                return temp;\r\n                                                            })\r\n                                                            setRefreshGroups(true);\r\n                                                        }\r\n                                                    }\r\n                                                >\r\n                                                    <option value={'blacklist'}>Blacklist</option>\r\n                                                    <option value={'team'}>Group</option>\r\n                                                    <option value={`auto`}>Auto</option>\r\n                                                    {/* <option value={`rel`}>Relative</option> */}\r\n                                                </select>\r\n\r\n                                            </div>\r\n                                            {/* parameters */}\r\n                                            <div\r\n                                                disabled={pet.placement === 'blacklist'}\r\n                                                style={{\r\n                                                    width: '25%',\r\n                                                    position: 'relative',\r\n                                                    opacity: pet.placement === 'blacklist' ? '0.4' : '',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center',\r\n                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                }}\r\n                                            >\r\n                                                {pet.placement === 'team' && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <select\r\n                                                            className='importantText'\r\n                                                            style={{ maxWidth: '144px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', borderRadius: '4px', width: '44px' }}\r\n                                                            aria-label='Select what team the pet will be placed in'\r\n                                                            value={pet.parameters.team}\r\n                                                            onChange={\r\n                                                                (choice) => {\r\n                                                                    setPetWhiteList((curr) => {\r\n                                                                        let temp = [...curr];\r\n                                                                        let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                        tempPet.parameters.team = Number(choice.target.value);\r\n                                                                        return temp;\r\n                                                                    })\r\n                                                                    setRefreshGroups(true);\r\n                                                                }\r\n                                                            }\r\n                                                        >\r\n                                                            {Array.apply(null, Array(Number(numTeams)))\r\n                                                                .map((e, index) => {\r\n                                                                    return <option value={index} key={index}>{index + 1}</option>\r\n                                                                })}\r\n\r\n\r\n                                                        </select>\r\n\r\n                                                    </div>\r\n                                                )}\r\n                                                {pet.placement === `rel` && (\r\n                                                    <div style={{ marginLeft: (showGreen || showRed) ? '22px' : '' }}>\r\n                                                        <input\r\n                                                            className='importantText textMedium2'\r\n                                                            aria-label='Damage bias to control when the pet should go in'\r\n                                                            style={{ maxWidth: '36px', backgroundColor: '#1b1b1b', borderRadius: '4px', backgroundColor: (index % 2) === 0 ? '#252525' : '#171717', }}\r\n                                                            type='number'\r\n                                                            // className='prepNumber'\r\n                                                            value={pet.parameters.damageBias}\r\n                                                            onChange={\r\n                                                                (e) => {\r\n                                                                    try {\r\n                                                                        let x = Number(e.target.value);\r\n                                                                        x = Math.floor(x);\r\n                                                                        if (x < 0 || x > 100) {\r\n                                                                            return;\r\n                                                                        }\r\n\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n                                                                            let tempPet = temp.find((inner_pet) => inner_pet.id === pet.id);\r\n                                                                            tempPet.parameters.damageBias = Number(x);\r\n                                                                            return temp;\r\n                                                                        })\r\n                                                                        setRefreshGroups(true);\r\n                                                                    }\r\n                                                                    catch (err) {\r\n                                                                        console.log(err);\r\n                                                                    }\r\n                                                                }}\r\n                                                            placeholder={pet.parameters.damageBias + ''}\r\n                                                            min=\"0\"\r\n                                                            max=\"100\"\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                                {(pet.placement === 'blacklist' || pet.placement === 'auto') && (\r\n                                                    <>Unavailable</>\r\n                                                )}\r\n                                                {(showGreen || showRed) && (\r\n                                                    <div\r\n                                                    // style={{ position: 'absolute', right: '5%' }}\r\n                                                    >\r\n                                                        <MouseOverPopover muiHeight={'20px'} tooltip={<div>{hoverMsg}</div>} style={{ display: 'flex', alignItems: 'center', height: '20px' }}>\r\n\r\n                                                            <div style={{ height: '20px', width: '20px', marginLeft: '3px', marginTop: '2px', position: 'relative' }}>\r\n                                                                <Image\r\n                                                                    alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                    src={showGreen ? infoIconGreenThick : infoIconRedThick}\r\n                                                                    fill\r\n                                                                />\r\n                                                            </div>\r\n\r\n\r\n                                                            {/* <img alt='on hover I in a cirlce icon, shows more information on hover'\r\n                                                                style={{ height: '18px', marginLeft: '6px', marginTop: '2px' }}\r\n                                                                src={showGreen ? infoIconGreen : infoIconRed} /> */}\r\n                                                        </MouseOverPopover>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Left Over Pets*/}\r\n                    {groupRankCritera === 1 && (\r\n                        <div\r\n                            style={{\r\n                                margin: '12px 6px',\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                flex: '1',\r\n                                border: '1px solid rgba(255,255,255,0.8)',\r\n                            }}\r\n                        >\r\n                            {/* Alerting overall impossible filters combinations */}\r\n                            {failedFilters['generic'] && (\r\n                                <div\r\n                                    style={{ fontWeight: 'bold', color: 'red', display: 'flex', width: '100%', justifyContent: 'center' }}\r\n\r\n                                >\r\n                                    {failedFilters['generic']}\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* left over pets */}\r\n                            {(\r\n                                <div\r\n                                    style={{ display: 'flex', width: '100%', flexDirection: 'column', }}\r\n                                >\r\n                                    {/* Title */}\r\n                                    <div\r\n                                        style={{ display: 'flex', margin: '6px', alignSelf: 'center' }}\r\n                                    >\r\n                                        <h4 style={{ margin: '0', fontSize: '20px', textAlign: 'center' }}> Leftover Pets</h4>\r\n\r\n                                    </div>\r\n\r\n                                    {/* Table */}\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            margin: '6px 0 0 0',\r\n                                            // paddingLeft: '6px'\r\n                                        }}\r\n                                    >\r\n                                        <div style={{ marginLeft: '6px' }}>\r\n\r\n                                            <SearchBox\r\n                                                updateBox={true}\r\n                                                placeholder='Enter a bonus'\r\n                                                data={{\r\n                                                    list: filterableBonuses\r\n                                                }}\r\n                                                onSelect={(e) => {\r\n                                                    console.log(e);\r\n                                                    setLeftOverBonus1(Number(e.id));\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Headers */}\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            borderTop: '1px solid rgba(255,255,255,0.8)',\r\n                                            borderBottom: '1px solid rgba(255,255,255,0.8)',\r\n                                            backgroundColor: 'rgba(255,255,255, 0.14)',\r\n                                            margin: '6px 0 0 0'\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                width: '70%',\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                borderRight: '1px solid rgba(255,255,255,0.8)',\r\n                                            }}\r\n                                        >\r\n                                            {`${BonusMap[leftOverBonus1].label} Pets`}\r\n                                        </div>\r\n\r\n                                        {/* placement */}\r\n                                        <div\r\n                                            style={{\r\n                                                width: '30%',\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center'\r\n                                            }}\r\n                                        >\r\n                                            <MouseOverPopover tooltip={\r\n                                                <div style={{ padding: '6px' }}>\r\n                                                    <div>The {`pet's`} damage </div>\r\n                                                </div>\r\n                                            }>\r\n                                                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                    <div>\r\n                                                        Damage\r\n                                                    </div>\r\n                                                </div>\r\n                                            </MouseOverPopover>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    {/* Pets */}\r\n                                    <div style={{ margin: '0 0px 0 0px', }}>\r\n                                        {leftOver1Pets.map((pet, index) => {\r\n                                            let staticPetData = petNameArray.find(staticPetDatum => staticPetDatum.petId === pet.ID)\r\n\r\n                                            if (!staticPetData) {\r\n                                                staticPetData = {\r\n                                                    img: '/images/pets/missing.png',\r\n                                                    location: '??-??',\r\n                                                    name: 'Unknown',\r\n                                                    petId: pet.ID\r\n                                                }\r\n                                            }\r\n                                            return (\r\n                                                <div\r\n                                                    key={pet.ID}\r\n                                                    style={{\r\n                                                        display: 'flex',\r\n                                                        width: '100%',\r\n                                                        backgroundColor: (index % 2) === 0 ? 'rgba(255,255,255, 0.09)' : 'rgba(255,255,255, 0.03)',\r\n                                                    }}\r\n                                                >\r\n                                                    {/* Pet name + pin */}\r\n                                                    <div style={{\r\n                                                        width: '70%',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        position: 'relative',\r\n                                                    }}\r\n                                                    >\r\n                                                        <div\r\n                                                            style={{\r\n                                                                // position: 'absolute',\r\n                                                                width: '100%',\r\n                                                                display: 'flex',\r\n                                                                flex: '1',\r\n                                                                justifyContent: 'space-between',\r\n                                                                // alignContent: 'space-between',\r\n                                                                // zIndex: '-1'\r\n                                                            }}\r\n\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                                    paddingLeft: '6px',\r\n\r\n                                                                }}\r\n                                                            >\r\n                                                                {/* {petNames[pet.ID].name} */}\r\n                                                                <PetItemCoin\r\n                                                                    showNameOnly={true}\r\n                                                                    grayBackground={pet.equipped}\r\n                                                                    key={pet.ID}\r\n                                                                    petData={staticPetData}\r\n                                                                    fullPetData={pet}\r\n                                                                    data={data}\r\n                                                                    onClick={() => { }}\r\n                                                                    weightMap={weightMap}\r\n                                                                    defaultRank={defaultRank}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        {/* Pin icon */}\r\n                                                        {!pet.whitelisted && (\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    height: 'calc(100% - 1px)',\r\n                                                                    width: '24px',\r\n                                                                    display: 'flex',\r\n                                                                    alignItems: 'center',\r\n                                                                    justifyContent: 'center',\r\n                                                                    borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n\r\n                                                                }}\r\n                                                            >\r\n                                                                <div style={{\r\n                                                                    position: 'relative',\r\n                                                                    width: '20px', height: '20px'\r\n                                                                }}\r\n                                                                    onClick={(e) => {\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n\r\n                                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === pet.ID);\r\n                                                                            if (!pet_inner) {\r\n                                                                                temp.push({ label: petNames[pet.ID].name, pet: pet, id: pet.ID, placement: 'auto', parameters: { team: 0, damageBias: 17 } });\r\n                                                                            }\r\n                                                                            else {\r\n                                                                                throw new Error(`should not have an existing pet in this list!`)\r\n                                                                            }\r\n                                                                            return temp;\r\n                                                                        })\r\n\r\n                                                                        setRefreshGroups(true);\r\n                                                                        return;\r\n\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <Image\r\n                                                                        fill\r\n                                                                        src={pinIcon}\r\n                                                                        alt='push pin'\r\n                                                                    />\r\n                                                                </div>\r\n                                                                {/* <img alt='push pin'\r\n                                                                    style={{\r\n                                                                        maxHeight: '12px',\r\n                                                                    }}\r\n                                                                    onClick={(e) => {\r\n                                                                        setPetWhiteList((curr) => {\r\n                                                                            let temp = [...curr];\r\n\r\n                                                                            let pet_inner = temp.find((sample_pet) => sample_pet.id === pet.ID);\r\n                                                                            if (!pet_inner) {\r\n                                                                                temp.push({ label: petNames[pet.ID].name, id: pet.ID, placement: 'rel', parameters: { team: 0, damageBias: 17 } });\r\n                                                                            }\r\n                                                                            else {\r\n                                                                                throw new Error(`should not have an existing pet in this list!`)\r\n                                                                            }\r\n                                                                            return temp;\r\n                                                                        })\r\n\r\n                                                                        setRefreshGroups(true);\r\n                                                                        return;\r\n\r\n                                                                    }}\r\n                                                                    src={pinIcon}\r\n                                                                /> */}\r\n                                                            </div>\r\n                                                        )}\r\n\r\n                                                    </div>\r\n                                                    {/* Pet Damage */}\r\n                                                    <div style={{\r\n                                                        width: '30%',\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                        borderTop: index === 0 ? '' : '1px solid rgba(255,255,255,0.8)',\r\n                                                        borderLeft: '1px solid rgba(255,255,255,0.8)',\r\n                                                    }}>\r\n                                                        {helper.roundTwoDecimal(petHelper.calculatePetBaseDamage(pet, defaultRank))}\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            )\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grid Right */}\r\n            <div style={{ display: 'flex', flex: '1' }}>\r\n                <div\r\n                    className='importantText'\r\n                    style={{\r\n                        border: '2px solid rgba(255,255,255,0.8)',\r\n                        borderRadius: '6px',\r\n                        marginTop: '6px',\r\n                        marginRight: '6px',\r\n                        maxHeight: 'calc(100vh - 50px)',\r\n                        backgroundColor: 'rgba(255,255,255, 0.05)',\r\n                        // width: 'calc(100% - 66%)',\r\n                        minWidth: '200px',\r\n                        overflow: 'hidden'\r\n                    }}\r\n                >\r\n                    <div style={{ display: 'flex', flexDirection: 'column', marginBottom: '0' }}>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            width: '100%',\r\n                            borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                            backgroundColor: 'rgba(255,255,255,0.12)',\r\n                            justifyContent: 'center'\r\n                        }}>\r\n                            <div style={{ fontWeight: 'bold', fontSize: '30px' }}>\r\n                                Pets\r\n                            </div>\r\n                            <div style={{ fontWeight: 'bold', alignSelf: 'end', marginLeft: '6px', marginBottom: '5px', fontSize: '16px' }}>\r\n                                (click to enable/disable)\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ display: 'flex' }}>\r\n\r\n                            <div className='hover' style={{\r\n                                width: '100%',\r\n                                borderBottom: '2px solid rgba(255,255,255,0.8)',\r\n                                display: 'flex',\r\n                                backgroundColor: 'rgba(255,255,255,0.12)'\r\n                            }}>\r\n                                <div style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }} onClick={(e) => {\r\n                                    ReactGA.event({\r\n                                        category: \"expedition_pets\",\r\n                                        action: 'enabled_all',\r\n                                        label: 'expedition'\r\n                                    })\r\n                                    if (data.PetsCollection) {\r\n                                        let petArr = [];\r\n                                        for (let i = 1; i < data.PetsCollection.length; i++) {\r\n                                            petArr.push(data.PetsCollection[i].ID)\r\n                                        }\r\n                                        handleItemSelected(petArr);\r\n                                    }\r\n\r\n                                }}>\r\n                                    Enable All\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'disabled_all',\r\n                                            label: 'expedition'\r\n                                        })\r\n                                        if (data.PetsCollection) {\r\n                                            handleItemSelected([]);\r\n                                        }\r\n\r\n                                    }}>\r\n                                    Disable All\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', borderRight: '2px solid rgba(255,255,255,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'reset_all',\r\n                                            label: 'expedition'\r\n                                        })\r\n                                        if (data.PetsCollection) {\r\n                                            let petArr = [];\r\n                                            for (let i = 0; i < originalPets.length; i++) {\r\n                                                petArr.push(originalPets[i].ID)\r\n                                            }\r\n                                            handleItemSelected(petArr);\r\n                                        }\r\n\r\n                                    }}>\r\n                                    Reset\r\n                                </div>\r\n                                <div className='hover' style={{ width: '25%', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '1px' }}\r\n                                    onClick={(e) => {\r\n                                        ReactGA.event({\r\n                                            category: \"expedition_pets\",\r\n                                            action: 'toggle_hide_locked',\r\n                                            label: hideLocked ? 'show_locked' : 'hide_locked',\r\n                                            value: hideLocked\r\n                                        })\r\n                                        setHideLocked(!hideLocked);\r\n                                    }}\r\n                                >\r\n                                    {hideLocked ? `Show Locked` : `Hide Locked`}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <ItemSelection\r\n                        weightMap={weightMap}\r\n                        data={data}\r\n                        selectedItems={selectedItems}\r\n                        onItemSelected={handleItemSelected}\r\n                        defaultRank={defaultRank}\r\n                        showLocked={!hideLocked}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItemCoin.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\PetItem.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\pets\\teamSuggestions.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyItem.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\AssemblyLine.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\protein\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\BlinkingDot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection copy.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\gratitude\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\page_content.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\residue\\residueMapping.js",[],[],{"ruleId":"234","severity":1,"message":"235","line":108,"column":8,"nodeType":"236","endLine":108,"endColumn":28,"suggestions":"237"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPetWhiteList'. Either include it or remove the dependency array.","ArrayExpression",["238"],{"desc":"239","fix":"240"},"Update the dependencies array to be: [petWhiteListClient, setPetWhiteList]",{"range":"241","text":"242"},[4146,4166],"[petWhiteListClient, setPetWhiteList]"]