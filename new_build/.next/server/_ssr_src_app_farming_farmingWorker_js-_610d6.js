/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "(ssr)/./src/app/farming/farmingWorker.js":
/*!******************************************!*\
  !*** ./src/app/farming/farmingWorker.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/farmingHelper.js */ \"(ssr)/./src/app/util/farmingHelper.js\");\n/* harmony import */ var _util_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/math.js */ \"(ssr)/./src/app/util/math.js\");\n/* harmony import */ var _util_helper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/helper.js */ \"(ssr)/./src/app/util/helper.js\");\n\n\n\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = ({ data: { data, id, data1 } })=>{\n    try {\n        let finalPlants = data.finalPlants;\n        //for some reason the break-infinity values get changed into {mantissa: x, exponent: y} objects, revert\n        for(let i = 0; i < finalPlants.length; i++){\n            let cur = finalPlants[i];\n            cur.created = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(cur.created);\n            cur.totalMade = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(cur.totalMade);\n            cur.production = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(cur.production);\n        }\n        let modifiers = data.modifiers;\n        //Same thing for modifiers\n        modifiers.shopProdBonus = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.shopProdBonus);\n        modifiers.hpBonus = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.hpBonus);\n        modifiers.curPotatoes = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.curPotatoes);\n        modifiers.totalPotatoes = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.totalPotatoes);\n        const mode = data.mode;\n        const secondsHour = 3600;\n        let futureTime = data.time;\n        const numSimulatedAutos = data.numSimulatedAutos ? data.numSimulatedAutos : 1;\n        // let totalNumAutos = data.FarmingShopAutoPlotBought;\n        // let numPlants = finalPlants.length;\n        let combinations = data.combinations;\n        let totalPot = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(0);\n        let totalPotCombo = {};\n        let bestProd = _util_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(0);\n        let bestProdCombo = {};\n        let bestPIC = 0;\n        let bestPicCombo = {\n            potatoeProduction: 0\n        };\n        let bestPICPerc = 0;\n        let bestPICPercCombo = {\n            potatoeProduction: 0\n        };\n        let dataObj = {\n            ...modifiers,\n            time: secondsHour * futureTime\n        };\n        let top10DataPointsPotatoes = [];\n        let top10DataPointsFries = [];\n        let counter = 0;\n        let counterMax = data.end - data.start;\n        for(let i = data.start; i <= data.end; i++){\n            counterMax--;\n            counter++;\n            let combo = combinations[i];\n            dataObj.numAutos = combo;\n            let result;\n            switch(mode){\n                case \"afk\":\n                    result = _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcHPProd(finalPlants, dataObj);\n                    break;\n                case \"carlo\":\n                    result = _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcStepHPProd(finalPlants, {\n                        ...dataObj,\n                        steps: combo\n                    });\n                    break;\n                case \"step\":\n                    if (combo[0] === 0 && combo[1] === 0 && combo[2] === 0 && combo[3] === 0 && combo[4] === 0) {\n                        let bigsad = -1;\n                    }\n                    let steps = [];\n                    let curStep = 0;\n                    let numSteps = 0;\n                    let minTime = 0;\n                    for(let j = 0; j < combo.length; j++){\n                        if (combo[j] > 0) {\n                            numSteps++;\n                            minTime += combo[j] * data.baseTimers[j];\n                        }\n                    }\n                    let remaining = secondsHour * futureTime - minTime;\n                    for(let j = 0; j < data.baseTimers.length; j++){\n                        if (combo[j] > 0) {\n                            curStep++;\n                        }\n                        let autos = Array(data.baseTimers.length).fill(0);\n                        autos[j] = numSimulatedAutos;\n                        autos.reverse();\n                        let runTime = combo[j] * data.baseTimers[j];\n                        //If its the last plant that will be grown, give the remaining time to it\n                        if (curStep === numSteps && combo[j] > 0) {\n                            runTime += remaining;\n                        } else if (combo[j] > 0) {\n                            let curPlant = finalPlants[finalPlants.length - 1 - j];\n                            let remainder = runTime % curPlant.growthTime;\n                            //Round down, add run time\n                            if (remainder <= curPlant.growthTime * 0.5) {\n                                runTime -= remainder;\n                                remaining += remainder;\n                            } else {\n                                let diff = curPlant.growthTime - remainder;\n                                //Only subtract time from final plant IF there is enough remaining time\n                                if (remaining >= diff) {\n                                    runTime += diff;\n                                    remaining -= diff;\n                                }\n                            }\n                        }\n                        steps.push({\n                            time: _util_helper_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].roundInt(runTime),\n                            autos: autos\n                        });\n                    }\n                    result = _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcStepHPProd(finalPlants, {\n                        ...dataObj,\n                        steps: steps\n                    });\n                    break;\n                default:\n                    result = _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcHPProd(finalPlants, dataObj);\n                    break;\n            }\n            let picGained = 0;\n            let picPercent = 0;\n            let temp;\n            for(let j = 0; j < result.plants.length; j++){\n                let picIncrease = _util_farmingHelper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcMaxPrestige(result.plants[j]);\n                picGained += picIncrease;\n                picPercent += Math.pow(1.02, result.plants[j].prestige + picIncrease) - Math.pow(1.02, result.plants[j].prestige);\n                result.plants[j].picIncrease = picIncrease;\n            }\n            if (result.totalPotatoes.greaterThanOrEqualTo(totalPot) === true) {\n                totalPot = result.totalPotatoes;\n                totalPotCombo = {\n                    combo: combo,\n                    result: result,\n                    plants: result.plants\n                };\n                top10DataPointsPotatoes.unshift({\n                    data: result.dataPointsPotatoes,\n                    result: totalPot\n                });\n                if (top10DataPointsPotatoes.length > 10) {\n                    top10DataPointsPotatoes.pop();\n                }\n                top10DataPointsFries.unshift({\n                    data: result.dataPointsFries,\n                    result: totalPot\n                });\n                if (top10DataPointsFries.length > 10) {\n                    top10DataPointsFries.pop();\n                }\n            }\n            if (result.potatoeProduction.greaterThanOrEqualTo(bestProd) === true) {\n                bestProd = result.potatoeProduction;\n                bestProdCombo = {\n                    combo: combo,\n                    result: result,\n                    plants: result.plants\n                };\n            }\n            if (picGained > bestPIC) {\n                temp = {\n                    combo: combo,\n                    result: result,\n                    plants: result.plants,\n                    potatoeProduction: result.potatoeProduction,\n                    picGain: picGained,\n                    picStats: {\n                        picLevel: picGained,\n                        picPercent: picPercent\n                    }\n                };\n                bestPIC = picGained;\n                bestPicCombo = temp;\n            } else if (picGained === bestPIC) {\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPicCombo.potatoeProduction)) {\n                    temp = {\n                        combo: combo,\n                        result: result,\n                        plants: result.plants,\n                        potatoeProduction: result.potatoeProduction,\n                        picGain: picGained,\n                        picStats: {\n                            picLevel: picGained,\n                            picPercent: picPercent\n                        }\n                    };\n                    bestPIC = picGained;\n                    bestPicCombo = temp;\n                }\n            }\n            if (picPercent > bestPICPerc) {\n                temp = {\n                    combo: combo,\n                    result: result,\n                    plants: result.plants,\n                    potatoeProduction: result.potatoeProduction,\n                    picGain: picPercent,\n                    picStats: {\n                        picLevel: picGained,\n                        picPercent: picPercent\n                    }\n                };\n                bestPICPerc = picPercent;\n                bestPICPercCombo = temp;\n            } else if (picPercent === bestPICPerc) {\n                if (result.potatoeProduction.greaterThanOrEqualTo(bestPICPercCombo.potatoeProduction)) {\n                    temp = {\n                        combo: combo,\n                        result: result,\n                        plants: result.plants,\n                        potatoeProduction: result.potatoeProduction,\n                        picGain: picPercent,\n                        picStats: {\n                            picLevel: picGained,\n                            picPercent: picPercent\n                        }\n                    };\n                    bestPICPerc = picPercent;\n                    bestPICPercCombo = temp;\n                }\n            }\n            if (counter % 100 === 0) {\n                // eslint-disable-next-line no-restricted-globals\n                self.postMessage({\n                    update: true,\n                    temp: temp,\n                    updateAmount: 100\n                });\n            }\n        }\n        // eslint-disable-next-line no-restricted-globals\n        self.postMessage({\n            update: true,\n            updateAmount: counterMax\n        });\n        // eslint-disable-next-line no-restricted-globals\n        self.postMessage({\n            success: true,\n            totalPotCombo: totalPotCombo,\n            bestProdCombo: bestProdCombo,\n            bestPicCombo: bestPicCombo,\n            bestPICPercCombo: bestPICPercCombo,\n            top10DataPointsPotatoes: top10DataPointsPotatoes,\n            top10DataPointsFries: top10DataPointsFries\n        });\n    } catch (err) {\n        console.log(err);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/app/farming/farmingWorker.js\n");

/***/ }),

/***/ "(ssr)/./src/app/util/farmingHelper.js":
/*!***************************************!*\
  !*** ./src/app/util/farmingHelper.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper.js */ \"(ssr)/./src/app/util/helper.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./src/app/util/math.js\");\n\n\nvar farmingHelper = {\n    findMultipliersWithMinPercentage: function(sum, numbers, minPercentage) {\n        const multipliers = [];\n        let count = 0;\n        function backtrack(index, currentSum, currentMultipliers) {\n            count++;\n            if (index === numbers.length) {\n                const productSum = currentMultipliers.reduce((acc, multiplier, i)=>acc + multiplier * numbers[i], 0);\n                if (productSum >= minPercentage * sum) {\n                    multipliers.push([\n                        ...currentMultipliers\n                    ]);\n                }\n                return;\n            }\n            let max = Math.floor((sum - currentSum) / numbers[index]);\n            for(let multiplier = 0; multiplier <= max; multiplier++){\n                currentMultipliers[index] = multiplier;\n                let tempSum = currentSum + multiplier * numbers[index];\n                if (tempSum < sum) {\n                    backtrack(index + 1, currentSum + multiplier * numbers[index], currentMultipliers);\n                }\n            }\n        }\n        backtrack(0, 0, []);\n        console.log(count);\n        return multipliers;\n    },\n    calcGrowthTime: function(plant, modifiers) {\n        let growingBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.originalShopGrowingBonus);\n        growingBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(growingBonus, 1 + 0.05 * modifiers.originalShopGrowingLevel);\n        growingBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(growingBonus, 1 + 0.05 * modifiers.shopGrowingSpeed).toNumber();\n        let num = Math.floor(plant.TimeNeeded / plant.prestigeBonus / growingBonus);\n        return num < 10 ? 10 : num;\n    },\n    calcPlantHarvest: function(plant, modifiers) {\n        let num = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].roundInt((1 + plant.Rank) * Math.pow(1.05, plant.Rank)) * Math.pow(1.02, plant.prestige) * modifiers.manualHarvestBonus;\n        return num;\n    },\n    calcShopProdBonus: function(modifiers_input, shopLevel) {\n        shopLevel = shopLevel || shopLevel === 0 ? shopLevel : modifiers_input.FarmingShopPlantTotalProduction;\n        return _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(1.25, shopLevel);\n    },\n    calcProdOutput: function(plant_input, modifiers_input) {\n        let TotalCreated = plant_input.totalMade;\n        // let ManuallyCreated = plant_input.created;\n        // let shovel = modifiers_input.manualHarvestFormula;\n        let shopProdBonus = modifiers_input.shopProdBonus;\n        //note bigsad = -1 -> need to take into account assumbly in the future\n        // const assemblyBonus = modifiers_input.assemblyProduction;\n        let prestige = plant_input.prestige;\n        // GM.PD.PlantTotalProductionBonus = 1 * BigDouble.Pow(1.25, GM.PD.FarmingShopPlantTotalProduction) * GM.ASMA.GetAssemblerBonus(26) * GM.GHLM.GetBonus(3) * Math.Pow(1.01, Math.Max(0, GM.PD.CurrentEventPoint - 75));\n        // let PlantTotalProductionBonus = mathHelper.multiplyDecimal(mathHelper.multiplyDecimal(shopProdBonus, assemblyBonus), modifiers_input.contagionPlantProd);\n        let PlantTotalProductionBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers_input.originalShopProdBonus);\n        PlantTotalProductionBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(PlantTotalProductionBonus, this.calcShopProdBonus(null, modifiers_input.originalShopProdLevel));\n        PlantTotalProductionBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(shopProdBonus, PlantTotalProductionBonus);\n        let plantMult = plant_input.futureMult;\n        let output = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(TotalCreated, plantMult), PlantTotalProductionBonus), _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(Math.pow(1.02, prestige)));\n        if (plant_input.ID === 1) {\n            output = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(output, modifiers_input.hpBonus);\n        }\n        return output;\n    },\n    calcFryOutput: function(potatoes, modifiers) {\n        if (potatoes.lessThan(10000000000000000)) return 0;\n        let timerBonus = 0;\n        let timePassed = modifiers.timePassed ? modifiers.timePassed : 0;\n        if (timePassed > 1800) {\n            if (timePassed < 86400) {\n                timerBonus = timePassed / 86400;\n            } else {\n                // 1.0 + (timePassed - 86400.0) / (172800.0 + (timePassed - 86400.0) * 0.5);\n                //1 + (step1) / (172800 + (step2) * 0.5)\n                let step1 = timePassed - 86400;\n                let step2 = timePassed - 86400;\n                let step3 = 172800 + step2 * 0.5;\n                let step4 = step1 / step3;\n                timerBonus = 1 + step4;\n            }\n        }\n        // BigDouble.Round(\n        // (Log10(HealthyPotatoTotal) - 15.75)\n        //  * (36 - Min(Log10(HealthyPotatoTotal), 31))\n        //  * Pow(1.15, Log10(HealthyPotatoTotal) - 16.0)\n        //  * FrenchFriesBonus \n        //  * TimerFriesPrestigeBonuses);\n        // BigDouble.Round(step1 * step2 * step3  * GM.PD.FrenchFriesBonus * GM.PD.TimerFriesPrestigeBonuses);\n        let log10 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].logDecimal(potatoes, 10);\n        let step1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(log10, 15.75);\n        let log2 = log10;\n        log2 = log2.lessThan(31) ? log2 : 31;\n        let step2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(36, log2);\n        let log3 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(log10, 16);\n        let step3 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(1.15, log3);\n        let inter1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(step1, step2);\n        let inter2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(inter1, step3);\n        let frenchBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.fryBonus);\n        let step4 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(inter2, frenchBonus);\n        let step5 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(step4, timerBonus);\n        return step5;\n    },\n    calcCarryOverEXP_OLD: function({ plant, numAutos, expTick }) {\n        let leftOver = 0;\n        let numLevels = 1;\n        if (numAutos > 1) {\n            let individualEXP = expTick / numAutos;\n            let ticksNeededEXP = Math.ceil((plant.reqExp - plant.curExp) / individualEXP);\n            if (numAutos > ticksNeededEXP) {\n                leftOver = (numAutos - ticksNeededEXP) * individualEXP;\n                let futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\n                while(leftOver > futureReq){\n                    leftOver -= futureReq;\n                    numLevels++;\n                    futureReq = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\n                }\n            } else {\n                leftOver = 0;\n            }\n        } else {\n            leftOver = 0;\n        }\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\n        return {\n            leftOver,\n            numLevels,\n            reqExp\n        };\n    },\n    calcCarryOverEXP: function({ plant, numAutos, expTick }) {\n        let leftOver = 0;\n        let numLevels = 0;\n        let numEXP = plant.curExp + numAutos * expTick;\n        let reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\n        //need to handle two cases: 1 auto, just go up as much as you can\n        // >1 autos\n        while(numEXP >= reqExp){\n            numEXP -= reqExp;\n            numLevels++;\n            reqExp = 10 + 5 * (plant.Rank + numLevels) * Math.pow(1.05, plant.Rank + numLevels);\n        }\n        leftOver = numEXP;\n        return {\n            leftOver,\n            numLevels,\n            reqExp\n        };\n    },\n    calcEXPBonus: function(modifiers) {\n        let originalBonus = modifiers.originalRankLevelBonus;\n        let originalLevel = modifiers.originalShopRankLevel;\n        let currentShopLevel = modifiers.shopRankLevel;\n        let originalPotion = modifiers.originalPotionRank;\n        let currentPotion = modifiers.potionRank;\n        let expBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(originalBonus);\n        expBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(expBonus, 1 + originalLevel * 0.1);\n        expBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(expBonus, originalPotion > 0 ? 1.5 : 1);\n        expBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(expBonus, 1 + currentShopLevel * 0.1);\n        expBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(expBonus, currentPotion);\n        expBonus = expBonus.toNumber();\n        return expBonus;\n    },\n    futureMultBD: function(plant, modifiers) {\n        return _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(1 + 0.05 * (1 + modifiers.manualHarvestFormula * 0.02), _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].logDecimal(plant.created, 1.25));\n    },\n    calcFutureMult: function(plant_input, modifiers_input) {\n        //bigsad = -1 need to make costs big decimal as well now\n        // console.log(`calcing future mult${plant_input.ID}`)\n        let plant = modifiers_input.string === false ? plant_input : JSON.parse(JSON.stringify(plant_input));\n        let modifiers = modifiers_input.string === false ? modifiers_input : JSON.parse(JSON.stringify(modifiers_input));\n        let remainingTime = modifiers.time;\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\n        let newExpBonus = this.calcEXPBonus(modifiers);\n        let expTick = plant.prestigeBonus * newExpBonus;\n        plant.growthTime = this.calcGrowthTime(plant, modifiers);\n        if (numAutos === 0) {\n            let newOutPut = this.calcProdOutput(plant, modifiers);\n            plant.production = newOutPut;\n            return plant;\n        }\n        while(remainingTime > 0){\n            plant.timeToLevel = this.calcTimeTillLevel(plant, modifiers);\n            let elapsedTime = 0;\n            let rankIncrease = false;\n            if (plant.timeToLevel > remainingTime) {\n                elapsedTime = remainingTime;\n            } else {\n                elapsedTime = plant.timeToLevel;\n                rankIncrease = true;\n            }\n            remainingTime -= elapsedTime;\n            plant.elapsedTime += elapsedTime;\n            let numHarvests = 0;\n            if (plant.elapsedTime >= plant.growthTime) {\n                numHarvests = Math.floor(plant.elapsedTime / plant.growthTime);\n                let toCreate = plant.perHarvest * numHarvests * numAutos;\n                plant.created = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.created, toCreate);\n                plant.totalMade = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.totalMade, toCreate);\n                plant.futureMult = this.futureMultBD(plant, modifiers);\n                if (rankIncrease) {\n                    let leftOver = this.calcCarryOverEXP({\n                        plant,\n                        expTick: expTick * numHarvests,\n                        numAutos\n                    });\n                    // let leftOver = this.calcCarryOverEXP({ plant, expTick: expTick , numAutos });\n                    plant.curExp = leftOver.leftOver;\n                    plant.Rank += leftOver.numLevels;\n                    plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\n                    // plant.reqExp = 10 + 5 * plant.Rank * Math.pow(1.05, plant.Rank);\n                    plant.reqExp = leftOver.reqExp;\n                } else {\n                    let gainedEXP = numHarvests * expTick * numAutos;\n                    let totalExp = plant.curExp + gainedEXP;\n                    plant.curExp = totalExp;\n                }\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\n            }\n        }\n        let newOutPut = this.calcProdOutput(plant, modifiers);\n        plant.production = newOutPut;\n        return plant;\n    },\n    calcTimeTillLevel: function(plant_input, modifiers_input) {\n        let plant = plant_input;\n        let modifiers = modifiers_input;\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\n        if (numAutos === 0) return Infinity;\n        let remExp = plant.reqExp - plant.curExp;\n        let newExpBonus = this.calcEXPBonus(modifiers);\n        let expBonus = plant.prestigeBonus * newExpBonus * numAutos;\n        let ticksTillLevel = Math.ceil(remExp / expBonus);\n        return ticksTillLevel * plant.growthTime - plant.elapsedTime;\n    },\n    getNextShopCosts: function(data) {\n        let prodCost = 1;\n        let prodLevel = data.FarmingShopPlantTotalProduction || data.FarmingShopPlantTotalProduction === 0 ? data.FarmingShopPlantTotalProduction : data.shopProdLevel;\n        let growthCost = 1;\n        let growthLevel = data.FarmingShopPlantGrowingSpeed || data.FarmingShopPlantGrowingSpeed === 0 ? data.FarmingShopPlantGrowingSpeed : data.shopGrowingSpeed;\n        let expCost = 1;\n        let expLevel = data.FarmingShopPlantRankExpEarned || data.FarmingShopPlantRankExpEarned === 0 ? data.FarmingShopPlantRankExpEarned : data.shopRankLevel;\n        let temp1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(1.05, prodLevel - 50);\n        let temp2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(100, temp1);\n        let temp3 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(temp2, prodLevel);\n        let temp4 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(100000000, temp3);\n        prodCost = prodLevel > 50 ? temp4 : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(100000000, _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(100, prodLevel));\n        growthCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(500, growthLevel), 10000000000);\n        expCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(250, expLevel), 1000000000000000);\n        return {\n            prodCost,\n            growthCost,\n            expCost\n        };\n    },\n    calcMaxPrestige: function(plant_input) {\n        let start = plant_input.prestige;\n        let runningHarvests = 0;\n        let flag = true;\n        while(flag){\n            let requiredPerPic = 10 * Math.pow(2, start);\n            let requiredHarvests = runningHarvests + requiredPerPic;\n            if (plant_input.created.greaterThanOrEqualTo(requiredHarvests)) {\n                start++;\n                runningHarvests += requiredPerPic;\n            } else {\n                flag = false;\n            }\n        }\n        return start - plant_input.prestige;\n    },\n    calcTimeTillPrestige: function(plant_input, modifiers_input) {\n        let plant = JSON.parse(JSON.stringify(plant_input));\n        this.resetPlantBD(plant);\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\n        this.resetModifiersBD(modifiers);\n        let numAutos = modifiers.numAuto || modifiers?.numAuto === 0 ? modifiers.numAuto : 1;\n        let prestiged = false;\n        let totalTime = 0;\n        let runningHarvests = 0;\n        let newExpBonus = this.calcEXPBonus(modifiers);\n        let expTick = plant.prestigeBonus * newExpBonus;\n        while(!prestiged){\n            let timeToLevel = this.calcTimeTillLevel(plant, modifiers);\n            let requiredPerPic = 10 * Math.pow(2, plant.prestige);\n            let requiredHarvests = runningHarvests + requiredPerPic;\n            let remainingHarvests = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(requiredHarvests, plant.created); //minimum number of ticks\n            let timeTillPrestige = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(remainingHarvests, plant.perHarvest * numAutos).ceil(), plant.growthTime).ceil().toNumber();\n            if (numAutos === 0 && remainingHarvests.greaterThan(0)) {\n                prestiged = true;\n                totalTime = Infinity;\n            } else if (timeTillPrestige <= 0) {\n                prestiged = true;\n                if (totalTime <= 0) {\n                    plant.prestige++;\n                    prestiged = false;\n                    runningHarvests += requiredPerPic;\n                }\n            } else if (timeTillPrestige > timeToLevel) {\n                plant.elapsedTime += timeToLevel;\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\n                plant.created = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\n                plant.totalMade = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\n                let rankRes = this.calcCarryOverEXP({\n                    plant,\n                    numAutos,\n                    expTick: expTick * ticks\n                });\n                plant.Rank += rankRes.numLevels;\n                plant.curExp = rankRes.leftOver;\n                plant.reqExp = rankRes.reqExp;\n                plant.perHarvest = this.calcPlantHarvest(plant, modifiers);\n                totalTime += timeToLevel;\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\n            } else {\n                prestiged = true;\n                plant.elapsedTime += timeTillPrestige;\n                let ticks = Math.floor(plant.elapsedTime / plant.growthTime);\n                plant.created = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.created, ticks * plant.perHarvest * numAutos);\n                plant.totalMade = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(plant.totalMade, ticks * plant.perHarvest * numAutos);\n                totalTime += timeTillPrestige;\n                plant.elapsedTime = plant.elapsedTime % plant.growthTime;\n            }\n        }\n        return {\n            remainingTime: totalTime,\n            prestige: plant.prestige,\n            prestiged: prestiged\n        };\n    },\n    resetPlantBD: function(plant) {\n        plant.totalMade = plant?.totalMade?.mantissa || plant?.totalMade?.mantissa === 0 ? plant.totalMade : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(plant.totalMade);\n        plant.created = plant?.created?.mantissa || plant?.created?.mantissa === 0 ? plant.created : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(plant.created);\n        plant.production = plant?.production?.mantissa || plant?.production?.mantissa === 0 ? plant.production : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(plant.production);\n        plant.futureMult = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(plant.futureMult);\n    },\n    resetModifiersBD: function(modifiers) {\n        modifiers.shopProdBonus = modifiers?.shopProdBonus?.mantissa || modifiers?.shopProdBonus?.mantissa === 0 ? modifiers.shopProdBonus : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.shopProdBonus);\n        modifiers.hpBonus = modifiers?.hpBonus?.mantissa || modifiers?.hpBonus?.mantissa === 0 ? modifiers.hpBonus : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.hpBonus);\n        modifiers.curPotatoes = modifiers?.curPotatoes?.mantissa || modifiers?.curPotatoes.mantissa === 0 ? modifiers.curPotatoes : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.curPotatoes);\n        modifiers.totalPotatoes = modifiers?.totalPotatoes?.mantissa || modifiers?.totalPotatoes?.mantissa === 0 ? modifiers.totalPotatoes : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.totalPotatoes);\n    },\n    calcHPProd: function(plants_input, modifiers_input) {\n        let plants = JSON.parse(JSON.stringify(plants_input));\n        for(let i = 0; i < plants.length; i++){\n            this.resetPlantBD(plants[i]);\n        }\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\n        this.resetModifiersBD(modifiers);\n        modifiers.nextCosts.prodCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.nextCosts.prodCost);\n        modifiers.nextCosts.growthCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.nextCosts.growthCost);\n        modifiers.nextCosts.expCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(modifiers.nextCosts.expCost);\n        let numAutos = modifiers.numAutos;\n        let simulationTime = modifiers.time; //time in seconds\n        let startTime = modifiers.startTime ? modifiers.startTime : 0; //used for consistent tick timings\n        const runningTime = modifiers.runningTime ? modifiers.runningTime : 0; //Used for calculating end timings if necessary\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\n        const tickStart = modifiers.tickStart ? modifiers.tickStart : 0;\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\n        let dataPointThreshold = modifiers.dataPointThreshold ? modifiers.dataPointThreshold : simulationTime / tickRate < dataPointsMax ? 1 : _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].roundInt(simulationTime / tickRate / dataPointsMax);\n        let dataPointsPotatoes = [];\n        let dataPointsFries = [];\n        let totalPotatoes = modifiers.totalPotatoes;\n        let currPotatoes = modifiers.curPotatoes;\n        let prevPlantsProd = Array(plants.length).fill(0);\n        for(let i = 0; i < plants.length; i++){\n            prevPlantsProd[i] = plants[i].production;\n        }\n        // let runTime = 0;\n        let i = 0;\n        let finalPass = false;\n        // tickRate = 2;\n        let prodMult = 1;\n        if (tickRate > 2) {\n            if (tickRate >= 2592) {\n                prodMult = 0.95;\n            } else if (tickRate >= 1728) {\n                prodMult = 0.95;\n            } else if (tickRate >= 864) {\n                prodMult = 0.95;\n            } else if (tickRate >= 140) {\n                prodMult = 0.95;\n            } else {\n                prodMult = 0.95;\n            }\n        }\n        const fryMult = 1.05;\n        //Iterate over each second\n        for(; i < simulationTime / tickRate || finalPass; i++){\n            //Calculate new values for each plant\n            let HPInitial = 0;\n            for(let j = plants.length - 1; j >= 0; j--){\n                let curr = plants[j];\n                let toAdd = j === plants.length - 1 ? 0 : tickRate > 1 ? //Some basic calculus to find total assuming linear growth\n                _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(prevPlantsProd[j + 1], plants[j + 1].production), 0.5 * tickRate * prodMult) : _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(plants[j + 1].production, tickRate);\n                curr.totalMade = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(curr.totalMade, toAdd);\n                let res = this.calcFutureMult(curr, {\n                    ...modifiers,\n                    time: tickRate,\n                    numAuto: numAutos[j],\n                    string: false\n                });\n                curr = res;\n                if (curr.ID === 1) {\n                    HPInitial = prevPlantsProd[j];\n                }\n                prevPlantsProd[j] = curr.production;\n            }\n            // modifiers.passedTime += tickRate;\n            modifiers.timePassed += tickRate;\n            //Reduce plant rank potion timer, or set it the bonus to 0 if necessary\n            if (modifiers.potionRank > 1 && !modifiers.forceRankPotion) {\n                modifiers.potionRankTime -= tickRate;\n                if (modifiers.potionRankTime < 0) {\n                    modifiers.potionRank = 1;\n                }\n            }\n            let curTime = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].roundInt(i * tickRate + startTime);\n            let HPToAdd = tickRate > 1 ? _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(HPInitial, plants[0].production), 0.525 * tickRate * prodMult) : plants[0].production;\n            totalPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(totalPotatoes, HPToAdd);\n            currPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(currPotatoes, HPToAdd);\n            if (modifiers.autoBuyPBC) {\n                let updateCosts = false;\n                let boughtUpgrade = true;\n                while(boughtUpgrade){\n                    boughtUpgrade = false;\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.prodCost) === true) {\n                        currPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(currPotatoes, modifiers.nextCosts.prodCost);\n                        modifiers.shopProdLevel++;\n                        modifiers.shopProdBonus = this.calcShopProdBonus(modifiers, modifiers.shopProdLevel);\n                        updateCosts = true;\n                        boughtUpgrade = true;\n                    }\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.growthCost) === true) {\n                        // currPotatoes -= modifiers.nextCosts.growthCost;\n                        currPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(currPotatoes, modifiers.nextCosts.growthCost);\n                        modifiers.shopGrowingSpeed++;\n                        updateCosts = true;\n                        boughtUpgrade = true;\n                    }\n                    if (currPotatoes.greaterThanOrEqualTo(modifiers.nextCosts.expCost) === true) {\n                        currPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(currPotatoes, modifiers.nextCosts.expCost);\n                        modifiers.shopRankLevel++;\n                        modifiers.shopRankEXP = 1 + modifiers.shopRankLevel * 0.1;\n                        updateCosts = true;\n                        boughtUpgrade = true;\n                    }\n                    if (updateCosts) {\n                        let nextCosts = this.getNextShopCosts(modifiers);\n                        modifiers.nextCosts = nextCosts;\n                    }\n                }\n            }\n            if (i % dataPointThreshold === 0 && curTime >= tickStart && curTime <= simulationTime + runningTime) {\n                dataPointsPotatoes.push({\n                    \"time\": curTime,\n                    \"production\": totalPotatoes\n                });\n                dataPointsFries.push({\n                    \"time\": curTime,\n                    \"fries\": _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(farmingHelper.calcFryOutput(totalPotatoes, modifiers), fryMult)\n                });\n            }\n            if (!modifiers.skipFinal) {\n                if (finalPass && curTime >= simulationTime + runningTime) {\n                    break;\n                }\n                if (!finalPass && curTime < simulationTime + runningTime) {\n                    finalPass = true;\n                }\n            }\n        }\n        if (i > 0 && !modifiers.skipFinal) {\n            let curTime = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].roundInt(i * tickRate + startTime);\n            modifiers.passedTime = i * tickRate + startTime;\n            //Handling rare case when you have to add, but only once due to intervals duration, but only at the end, and didn't fit in the for loop above\n            if (dataPointsPotatoes.length === 0) {\n                dataPointsPotatoes.push({\n                    \"time\": curTime,\n                    \"production\": totalPotatoes\n                });\n                dataPointsFries.push({\n                    \"time\": curTime,\n                    \"fries\": _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(farmingHelper.calcFryOutput(totalPotatoes, modifiers), fryMult)\n                });\n            } else if (dataPointsPotatoes[dataPointsPotatoes.length - 1].production !== totalPotatoes) {\n                if (curTime > simulationTime + runningTime) {\n                    let timeIncrease = curTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\n                    let increase = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(totalPotatoes, dataPointsPotatoes[dataPointsPotatoes.length - 1].production), timeIncrease);\n                    // let temp_increase =  mathHelper.multiplyDecimal(mathHelper.addDecimal(HPInitial, plants[0].production), 0.5 * tickRate * prodMult);\n                    let trueTimeIncrease = simulationTime + runningTime - dataPointsPotatoes[dataPointsPotatoes.length - 1].time;\n                    let finalPotatoes = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(dataPointsPotatoes[dataPointsPotatoes.length - 1].production, _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(increase, trueTimeIncrease));\n                    let newObj = {\n                        time: dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease,\n                        production: finalPotatoes\n                    };\n                    dataPointsPotatoes.push(newObj);\n                    dataPointsFries.push({\n                        \"time\": dataPointsPotatoes[dataPointsPotatoes.length - 1].time + trueTimeIncrease,\n                        \"fries\": _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(farmingHelper.calcFryOutput(totalPotatoes, modifiers), fryMult)\n                    });\n                    //This means the `current` potatoes aren't updated to reflect the backwards fill/fix but it shouldn't be a big deal, and not used for anything atm\n                    totalPotatoes = finalPotatoes;\n                }\n            }\n        }\n        return {\n            totalPotatoes: totalPotatoes,\n            potatoeProduction: plants[0].production,\n            plants: plants,\n            nextCosts: modifiers.nextCosts,\n            dataPointsPotatoes: dataPointsPotatoes,\n            dataPointsFries: dataPointsFries,\n            finalModifiers: modifiers\n        };\n    },\n    calcStepHPProd: function(plants_input, modifiers_input) {\n        let plants = JSON.parse(JSON.stringify(plants_input));\n        for(let i = 0; i < plants.length; i++){\n            this.resetPlantBD(plants[i]);\n        }\n        let modifiers = JSON.parse(JSON.stringify(modifiers_input));\n        this.resetModifiersBD(modifiers);\n        let steps = modifiers.steps;\n        let res = -1;\n        let potatoeSteps = [];\n        let frySteps = [];\n        let runningTime = 0;\n        const dataPointsMax = modifiers.maxSteps ? modifiers.maxSteps : 100;\n        let tickRate = modifiers.tickRate ? modifiers.tickRate : 60 * 1;\n        let dataPointThreshold = modifiers_input.time / tickRate < dataPointsMax ? 1 : _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].roundInt(modifiers_input.time / tickRate / dataPointsMax);\n        for(let i = 0; i < steps.length; i++){\n            if (steps[i].time === 0) continue;\n            res = this.calcHPProd(plants, {\n                ...modifiers,\n                numAutos: steps[i].autos,\n                time: steps[i].time,\n                dataPointThreshold: dataPointThreshold,\n                startTime: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time : 0,\n                runningTime: runningTime,\n                skipFinal: i < steps.length - 1,\n                tickStart: potatoeSteps.length > 0 ? potatoeSteps[potatoeSteps.length - 1].time + dataPointThreshold * tickRate : 0\n            });\n            modifiers = res.finalModifiers;\n            modifiers.totalPotatoes = res.totalPotatoes;\n            plants = res.plants;\n            potatoeSteps = potatoeSteps.concat(res.dataPointsPotatoes);\n            frySteps = frySteps.concat(res.dataPointsFries);\n            steps[i].obj = {\n                text: `P${steps.length - i} for ${steps[i].time}`,\n                numAutos: steps[i].autos,\n                time: steps[i].time\n            };\n            runningTime += steps[i].time;\n        }\n        res.dataPointsPotatoes = potatoeSteps;\n        res.dataPointsFries = frySteps;\n        res.steps = steps;\n        return res;\n    },\n    calcAssemblyHP: function(data) {\n        let bonus = 1;\n        if (data?.AssemblerCollection[0].BonusList[0].StartingLevel <= data?.AssemblerCollection[0].Level) {\n            let gain = data?.AssemblerCollection[0].BonusList[0].Gain;\n            let level = data?.AssemblerCollection[0].Level - data?.AssemblerCollection[0].BonusList[0].StartingLevel;\n            bonus = Math.pow(1 + gain, level);\n        }\n        return bonus;\n    },\n    calcAssembly: function(data, line_num, bonus_num) {\n        let bonus = 1;\n        if (data?.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel <= data?.AssemblerCollection[line_num].Level) {\n            let gain = data?.AssemblerCollection[line_num].BonusList[bonus_num].Gain;\n            let level = Math.max(0, data.AssemblerCollection[line_num].Level - (data.AssemblerCollection[line_num].BonusList[bonus_num].StartingLevel - 1));\n            bonus = Math.pow(1 + gain, level);\n        }\n        return bonus;\n    },\n    calcAssemblyLine: function(line, al_level) {\n        let bonus = 1;\n        if (line.StartingLevel <= al_level) {\n            let gain = line.Gain;\n            let level = Math.max(0, al_level - (line.StartingLevel - 1));\n            bonus = Math.pow(1 + gain, level);\n        }\n        return bonus;\n    },\n    calcAssemblyCost: function(id, data) {\n        let finalCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(-1);\n        let costReduction = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(data.AssemblyCostReductionBonus);\n        let assembly = data.AssemblerCollection[id];\n        let baseCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(assembly.BaseCost);\n        let step1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addDecimal(baseCost, _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(baseCost, assembly.Level));\n        let temp = 1 + assembly.CostExpo + assembly.CostExpo * assembly.Level * 0.02;\n        let powStepBase = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(temp);\n        let step2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(powStepBase, assembly.Level);\n        finalCost = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divideDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(step1, step2), costReduction);\n        // finalCost =\n        //     (level + startingCost * level)\n        //     * pow(1 + assembly.CostExpo + assembly.CostExpo * assembly.BaseCost * 0.02, assembly.BaseCost)\n        //     / costReduction;\n        return finalCost;\n    },\n    calcProteinPerSecond: function(data) {\n        let proteinBonus = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(data.ProteinBonus);\n        let frenchTotal = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(data.FrenchFriesTotal);\n        let result = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createDecimal(1);\n        if (frenchTotal.greaterThan(10000000000.0)) {\n            let log1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].logDecimal(frenchTotal, 5);\n            log1 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(log1, 13.48);\n            let log2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].logDecimal(frenchTotal, 10.0);\n            log2 = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtractDecimal(log2, 8);\n            result = _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(_math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiplyDecimal(log1, _math_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pow(1.1, log2)), proteinBonus);\n        }\n        return result;\n    },\n    calcContagionBonus: function(data, index) {\n        let bonus = 1;\n        if (data.GrasshopperCollection[index].Locked > 0) {\n            let base = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcPOW(data.GrasshopperCollection[index].BaseBonus);\n            let level = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcPOW(data.GrasshopperCollection[index].Level);\n            bonus *= Math.pow(1 + base * 0.01, level);\n        }\n        return bonus;\n    },\n    calcExpeditionHP: function(data) {\n        let bonus = 1;\n        if (data.ExpeditionsCollection[16].Locked > 0) {\n            let temp = data.ExpeditionsCollection[16];\n            let res = Math.pow(1 + temp.BonusPower, temp.Room - 1);\n            bonus = res;\n        }\n        return bonus;\n    },\n    calcUniqueHPBonus: function(data) {\n        let bonus = 1;\n        for(let i = 0; i < data.FarmingShopUniqueHealthy.length; i++){\n            bonus *= data.FarmingShopUniqueHealthy[i] + 1;\n        }\n        return bonus;\n    },\n    calcFriesHPBonus: function(data) {\n        let bonus = 1;\n        let totalFries = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcPOW(data.FrenchFriesTotal);\n        let shopFryBonus = 0.01 * data.FarmingShopFriesHealthyBonus + 0.1;\n        let contagionFryBonus = this.calcContagionBonus(data, 5);\n        let fryBonus = shopFryBonus * contagionFryBonus;\n        bonus *= 1 + totalFries * fryBonus;\n        return bonus;\n    },\n    calcPetHPBonus: function(data) {\n        let bonus = 1;\n        let activePets = data.EquipedPetID;\n        let allPets = data.PetsCollection;\n        let neededMap = {};\n        for(let i = 0; i < activePets.length; i++){\n            if (activePets[i] > 0) {\n                neededMap[activePets[i]] = true;\n            }\n        }\n        for(let i = 0; i < allPets.length; i++){\n            let curr = allPets[i];\n            if (curr.ID in neededMap) {\n                // let rank = curr.Rank;\n                // let bonusInner = 0;\n                for(let j = 0; j < curr.BonusList.length; j++){\n                    let bonusInner = curr.BonusList[j];\n                    if (bonusInner.ID === 23) {\n                        //public double GetPetBonus(int Bonus)\n                        //(Math.Pow(1.0 + petDataBonus.Gain, petData.Level) - 1.0 + Math.Max(0.0, (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)) * (1.0 + Math.Log(petData.Rank + 1, 1.075) * 0.005) * 0.5\n                        //(x1                                                     + x3) * (x5) * 0.5\n                        // (\n                        //     Math.Pow(1.0 + petDataBonus.Gain, petData.Level)\n                        //     - 1.0\n                        //     + Math.Max(\n                        //         0.0, \n                        //         (Math.Log(petData.Level + 1, 1.0125) * 0.005 - 1.0) * 0.5)\n                        // )\n                        let x1 = Math.pow(1.0 + bonusInner.Gain, curr.Level) - 1.0;\n                        let x2 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.0125, curr.Level + 1);\n                        let x3 = Math.max(0.0, (x2 * 0.005 - 1.0) * 0.5);\n                        let x4 = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calculateLogarithm(1.075, curr.Rank + 1);\n                        let x5 = 1.0 + x4 * 0.005;\n                        let tot1 = x1 + x3;\n                        let tot2 = tot1 * x5;\n                        let tot3 = tot2 * 0.5;\n                        bonus += tot3;\n                    }\n                }\n            }\n        }\n        return bonus;\n    },\n    calcHPBonus: function(data) {\n        // let bonus = 1;\n        // let assemblyHP = this.calcAssemblyHP(data);\n        // bonus *= assemblyHP;\n        // let contagionHP = this.calcContagionBonus(data, 0);\n        // bonus *= contagionHP;\n        // let soulBonus = Math.pow(1.25, data.SoulFertilizer);\n        // bonus *= soulBonus;\n        // let expeditionBonus = this.calcExpeditionHP(data);\n        // bonus *= expeditionBonus;\n        // let FarmingShopPlantHealthyPotatoEarning = Math.pow(1.1, data.FarmingShopPlantHealthyPotatoEarning);\n        // bonus *= FarmingShopPlantHealthyPotatoEarning;\n        // let uniqueHPBonus = this.calcUniqueHPBonus(data);\n        // bonus *= uniqueHPBonus;\n        // let fryHPBonus = this.calcFriesHPBonus(data);\n        // bonus *= fryHPBonus;\n        // let petHPBonus = this.calcPetHPBonus(data);\n        // bonus *= petHPBonus;\n        // let residueHPBonus = Math.pow(1.05, data.CowShopHealthyPotato ? data.CowShopHealthyPotato : 0);\n        // bonus *= residueHPBonus;\n        // //(1 + \n        // // milk: \n        // let step1 = Math.max(0,\n        //     helper.calcPOW(data.BoostHealthyPotatoMilkBD) >= 1E+20 ?\n        //         helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1, 1.001) - 10.0), helper.calcPOW(data.BoostHealthyPotatoMilkBD) + 1)\n        //         :\n        //         0\n        // );\n        // let temp2 = (1.0 + data.BrewingHealthyPotatoLevel * 0.005) * ((helper.calcPOW(data.BoostHealthyPotatoCalciumBD) >= 1E+20)\n        //     ? (Math.pow(1.05, helper.calculateLogarithm(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228)\n        //     : 1)\n        // let tempy = (Math.pow(1.05, helper.calculateLogarithm(helper.calcPOW(Math.max(1.001, helper.calculateLogarithm(1.001, helper.calcPOW(data.BoostHealthyPotatoCalciumBD) + 1) - 10.0), data.BoostHealthyPotatoCalciumBD) + 1)) - 0.228);\n        // let temp3 = helper.calculateLogarithm(data.BoostHealthyPotatoMilkBD + 1, 1.001)\n        // //brewing:  \n        // //fermenting: (1.0 + GM.PD.HealthyPotatoPetRankExpFermentingLevel * 0.0025)))\n        // let milkHPBonus = helper.calcPOW(data.BoostHealthyPotatoMilkBD);\n        // // bonus *= milkHPBonus;\n        let legitBonus = _helper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].calcPOW(data.HealthyPotatoBonus);\n        return legitBonus;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (farmingHelper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RkFBa0Y7UUFDbEYsZUFBZTtRQUNmLGdGQUFnRjtRQUNoRixtRUFBbUU7UUFDbkUsMkJBQTJCO1FBRTNCLElBQUl3SixhQUFhaFMsa0RBQU1BLENBQUNrUSxPQUFPLENBQUMxSCxLQUFLeUosa0JBQWtCO1FBQ3ZELE9BQU9EO0lBQ1g7QUFDSjtBQUVBLGlFQUFlOVIsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dhbWVwbGF5LXBsYW5uZXIvLi9zcmMvYXBwL3V0aWwvZmFybWluZ0hlbHBlci5qcz9jMmY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoZWxwZXIgZnJvbSAnLi9oZWxwZXIuanMnO1xyXG5pbXBvcnQgbWF0aEhlbHBlciBmcm9tICcuL21hdGguanMnO1xyXG5cclxudmFyIGZhcm1pbmdIZWxwZXIgPSB7XHJcbiAgICBmaW5kTXVsdGlwbGllcnNXaXRoTWluUGVyY2VudGFnZTogZnVuY3Rpb24gKHN1bSwgbnVtYmVycywgbWluUGVyY2VudGFnZSkge1xyXG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXJzID0gW107XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYmFja3RyYWNrKGluZGV4LCBjdXJyZW50U3VtLCBjdXJyZW50TXVsdGlwbGllcnMpIHtcclxuICAgICAgICAgICAgY291bnQrKztcclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gbnVtYmVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RTdW0gPSBjdXJyZW50TXVsdGlwbGllcnMucmVkdWNlKChhY2MsIG11bHRpcGxpZXIsIGkpID0+IGFjYyArIG11bHRpcGxpZXIgKiBudW1iZXJzW2ldLCAwKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0U3VtID49IG1pblBlcmNlbnRhZ2UgKiBzdW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVycy5wdXNoKFsuLi5jdXJyZW50TXVsdGlwbGllcnNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbWF4ID0gTWF0aC5mbG9vcigoc3VtIC0gY3VycmVudFN1bSkgLyBudW1iZXJzW2luZGV4XSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG11bHRpcGxpZXIgPSAwOyBtdWx0aXBsaWVyIDw9IG1heDsgbXVsdGlwbGllcisrKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TXVsdGlwbGllcnNbaW5kZXhdID0gbXVsdGlwbGllcjtcclxuICAgICAgICAgICAgICAgIGxldCB0ZW1wU3VtID0gY3VycmVudFN1bSArIG11bHRpcGxpZXIgKiBudW1iZXJzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wU3VtIDwgc3VtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja3RyYWNrKGluZGV4ICsgMSwgY3VycmVudFN1bSArIG11bHRpcGxpZXIgKiBudW1iZXJzW2luZGV4XSwgY3VycmVudE11bHRpcGxpZXJzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYmFja3RyYWNrKDAsIDAsIFtdKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjb3VudCk7XHJcbiAgICAgICAgcmV0dXJuIG11bHRpcGxpZXJzO1xyXG4gICAgfSxcclxuICAgIGNhbGNHcm93dGhUaW1lOiBmdW5jdGlvbiAocGxhbnQsIG1vZGlmaWVycykge1xyXG4gICAgICAgIGxldCBncm93aW5nQm9udXMgPSBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLm9yaWdpbmFsU2hvcEdyb3dpbmdCb251cyk7XHJcbiAgICAgICAgZ3Jvd2luZ0JvbnVzID0gbWF0aEhlbHBlci5kaXZpZGVEZWNpbWFsKGdyb3dpbmdCb251cywgKDEgKyAwLjA1ICogbW9kaWZpZXJzLm9yaWdpbmFsU2hvcEdyb3dpbmdMZXZlbCkpO1xyXG4gICAgICAgIGdyb3dpbmdCb251cyA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKGdyb3dpbmdCb251cywgKDEgKyAwLjA1ICogbW9kaWZpZXJzLnNob3BHcm93aW5nU3BlZWQpKS50b051bWJlcigpO1xyXG5cclxuICAgICAgICBsZXQgbnVtID0gTWF0aC5mbG9vcihwbGFudC5UaW1lTmVlZGVkIC8gcGxhbnQucHJlc3RpZ2VCb251cyAvIGdyb3dpbmdCb251cyk7XHJcbiAgICAgICAgcmV0dXJuIG51bSA8IDEwID8gMTAgOiBudW07XHJcbiAgICB9LFxyXG4gICAgY2FsY1BsYW50SGFydmVzdDogZnVuY3Rpb24gKHBsYW50LCBtb2RpZmllcnMpIHtcclxuICAgICAgICBsZXQgbnVtID0gaGVscGVyLnJvdW5kSW50KCgxICsgcGxhbnQuUmFuaykgKiBNYXRoLnBvdygxLjA1LCBwbGFudC5SYW5rKSkgKiBNYXRoLnBvdygxLjAyLCBwbGFudC5wcmVzdGlnZSkgKiBtb2RpZmllcnMubWFudWFsSGFydmVzdEJvbnVzO1xyXG4gICAgICAgIHJldHVybiBudW07XHJcbiAgICB9LFxyXG4gICAgY2FsY1Nob3BQcm9kQm9udXM6IGZ1bmN0aW9uIChtb2RpZmllcnNfaW5wdXQsIHNob3BMZXZlbCkge1xyXG4gICAgICAgIHNob3BMZXZlbCA9IHNob3BMZXZlbCB8fCBzaG9wTGV2ZWwgPT09IDAgPyBzaG9wTGV2ZWwgOiBtb2RpZmllcnNfaW5wdXQuRmFybWluZ1Nob3BQbGFudFRvdGFsUHJvZHVjdGlvbjtcclxuICAgICAgICByZXR1cm4gbWF0aEhlbHBlci5wb3coMS4yNSwgc2hvcExldmVsKTtcclxuICAgIH0sXHJcbiAgICBjYWxjUHJvZE91dHB1dDogZnVuY3Rpb24gKHBsYW50X2lucHV0LCBtb2RpZmllcnNfaW5wdXQpIHtcclxuXHJcbiAgICAgICAgbGV0IFRvdGFsQ3JlYXRlZCA9IHBsYW50X2lucHV0LnRvdGFsTWFkZTtcclxuICAgICAgICAvLyBsZXQgTWFudWFsbHlDcmVhdGVkID0gcGxhbnRfaW5wdXQuY3JlYXRlZDtcclxuICAgICAgICAvLyBsZXQgc2hvdmVsID0gbW9kaWZpZXJzX2lucHV0Lm1hbnVhbEhhcnZlc3RGb3JtdWxhO1xyXG4gICAgICAgIGxldCBzaG9wUHJvZEJvbnVzID0gbW9kaWZpZXJzX2lucHV0LnNob3BQcm9kQm9udXM7XHJcbiAgICAgICAgLy9ub3RlIGJpZ3NhZCA9IC0xIC0+IG5lZWQgdG8gdGFrZSBpbnRvIGFjY291bnQgYXNzdW1ibHkgaW4gdGhlIGZ1dHVyZVxyXG4gICAgICAgIC8vIGNvbnN0IGFzc2VtYmx5Qm9udXMgPSBtb2RpZmllcnNfaW5wdXQuYXNzZW1ibHlQcm9kdWN0aW9uO1xyXG4gICAgICAgIGxldCBwcmVzdGlnZSA9IHBsYW50X2lucHV0LnByZXN0aWdlO1xyXG4gICAgICAgIC8vIEdNLlBELlBsYW50VG90YWxQcm9kdWN0aW9uQm9udXMgPSAxICogQmlnRG91YmxlLlBvdygxLjI1LCBHTS5QRC5GYXJtaW5nU2hvcFBsYW50VG90YWxQcm9kdWN0aW9uKSAqIEdNLkFTTUEuR2V0QXNzZW1ibGVyQm9udXMoMjYpICogR00uR0hMTS5HZXRCb251cygzKSAqIE1hdGguUG93KDEuMDEsIE1hdGguTWF4KDAsIEdNLlBELkN1cnJlbnRFdmVudFBvaW50IC0gNzUpKTtcclxuICAgICAgICAvLyBsZXQgUGxhbnRUb3RhbFByb2R1Y3Rpb25Cb251cyA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKHNob3BQcm9kQm9udXMsIGFzc2VtYmx5Qm9udXMpLCBtb2RpZmllcnNfaW5wdXQuY29udGFnaW9uUGxhbnRQcm9kKTtcclxuICAgICAgICBsZXQgUGxhbnRUb3RhbFByb2R1Y3Rpb25Cb251cyA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChtb2RpZmllcnNfaW5wdXQub3JpZ2luYWxTaG9wUHJvZEJvbnVzKTtcclxuICAgICAgICBQbGFudFRvdGFsUHJvZHVjdGlvbkJvbnVzID0gbWF0aEhlbHBlci5kaXZpZGVEZWNpbWFsKFBsYW50VG90YWxQcm9kdWN0aW9uQm9udXMsIHRoaXMuY2FsY1Nob3BQcm9kQm9udXMobnVsbCwgbW9kaWZpZXJzX2lucHV0Lm9yaWdpbmFsU2hvcFByb2RMZXZlbCkpO1xyXG4gICAgICAgIFBsYW50VG90YWxQcm9kdWN0aW9uQm9udXMgPSBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChzaG9wUHJvZEJvbnVzLCBQbGFudFRvdGFsUHJvZHVjdGlvbkJvbnVzKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBwbGFudE11bHQgPSBwbGFudF9pbnB1dC5mdXR1cmVNdWx0O1xyXG5cclxuICAgICAgICBsZXQgb3V0cHV0ID0gbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoXHJcbiAgICAgICAgICAgIG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKFxyXG4gICAgICAgICAgICAgICAgbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoXHJcbiAgICAgICAgICAgICAgICAgICAgVG90YWxDcmVhdGVkLCBwbGFudE11bHQpLFxyXG4gICAgICAgICAgICAgICAgUGxhbnRUb3RhbFByb2R1Y3Rpb25Cb251cyksXHJcbiAgICAgICAgICAgIG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChNYXRoLnBvdygxLjAyLCBwcmVzdGlnZSkpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKHBsYW50X2lucHV0LklEID09PSAxKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKG91dHB1dCwgbW9kaWZpZXJzX2lucHV0LmhwQm9udXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH0sXHJcbiAgICBjYWxjRnJ5T3V0cHV0OiBmdW5jdGlvbiAocG90YXRvZXMsIG1vZGlmaWVycykge1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHBvdGF0b2VzLmxlc3NUaGFuKDEwMDAwMDAwMDAwMDAwMDAwKSkgcmV0dXJuIDA7XHJcblxyXG5cclxuICAgICAgICBsZXQgdGltZXJCb251cyA9IDA7XHJcbiAgICAgICAgbGV0IHRpbWVQYXNzZWQgPSBtb2RpZmllcnMudGltZVBhc3NlZCA/IG1vZGlmaWVycy50aW1lUGFzc2VkIDogMDtcclxuICAgICAgICBpZiAodGltZVBhc3NlZCA+IDE4MDApIHtcclxuICAgICAgICAgICAgaWYgKHRpbWVQYXNzZWQgPCA4NjQwMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZXJCb251cyA9IHRpbWVQYXNzZWQgLyA4NjQwMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIDEuMCArICh0aW1lUGFzc2VkIC0gODY0MDAuMCkgLyAoMTcyODAwLjAgKyAodGltZVBhc3NlZCAtIDg2NDAwLjApICogMC41KTtcclxuICAgICAgICAgICAgICAgIC8vMSArIChzdGVwMSkgLyAoMTcyODAwICsgKHN0ZXAyKSAqIDAuNSlcclxuICAgICAgICAgICAgICAgIGxldCBzdGVwMSA9IHRpbWVQYXNzZWQgLSA4NjQwMDtcclxuICAgICAgICAgICAgICAgIGxldCBzdGVwMiA9IHRpbWVQYXNzZWQgLSA4NjQwMDtcclxuICAgICAgICAgICAgICAgIGxldCBzdGVwMyA9ICgxNzI4MDAgKyBzdGVwMiAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RlcDQgPSBzdGVwMSAvIHN0ZXAzO1xyXG4gICAgICAgICAgICAgICAgdGltZXJCb251cyA9IDEgKyBzdGVwNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmlnRG91YmxlLlJvdW5kKFxyXG4gICAgICAgIC8vIChMb2cxMChIZWFsdGh5UG90YXRvVG90YWwpIC0gMTUuNzUpXHJcbiAgICAgICAgLy8gICogKDM2IC0gTWluKExvZzEwKEhlYWx0aHlQb3RhdG9Ub3RhbCksIDMxKSlcclxuICAgICAgICAvLyAgKiBQb3coMS4xNSwgTG9nMTAoSGVhbHRoeVBvdGF0b1RvdGFsKSAtIDE2LjApXHJcbiAgICAgICAgLy8gICogRnJlbmNoRnJpZXNCb251cyBcclxuICAgICAgICAvLyAgKiBUaW1lckZyaWVzUHJlc3RpZ2VCb251c2VzKTtcclxuICAgICAgICAvLyBCaWdEb3VibGUuUm91bmQoc3RlcDEgKiBzdGVwMiAqIHN0ZXAzICAqIEdNLlBELkZyZW5jaEZyaWVzQm9udXMgKiBHTS5QRC5UaW1lckZyaWVzUHJlc3RpZ2VCb251c2VzKTtcclxuICAgICAgICBsZXQgbG9nMTAgPSBtYXRoSGVscGVyLmxvZ0RlY2ltYWwocG90YXRvZXMsIDEwKTtcclxuICAgICAgICBsZXQgc3RlcDEgPSBtYXRoSGVscGVyLnN1YnRyYWN0RGVjaW1hbChsb2cxMCwgMTUuNzUpO1xyXG5cclxuICAgICAgICBsZXQgbG9nMiA9IGxvZzEwO1xyXG4gICAgICAgIGxvZzIgPSBsb2cyLmxlc3NUaGFuKDMxKSA/IGxvZzIgOiAzMTtcclxuICAgICAgICBsZXQgc3RlcDIgPSBtYXRoSGVscGVyLnN1YnRyYWN0RGVjaW1hbCgzNiwgbG9nMik7XHJcblxyXG4gICAgICAgIGxldCBsb2czID0gbWF0aEhlbHBlci5zdWJ0cmFjdERlY2ltYWwobG9nMTAsIDE2KTtcclxuICAgICAgICBsZXQgc3RlcDMgPSBtYXRoSGVscGVyLnBvdygxLjE1LCBsb2czKTtcclxuXHJcbiAgICAgICAgbGV0IGludGVyMSA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKHN0ZXAxLCBzdGVwMik7XHJcbiAgICAgICAgbGV0IGludGVyMiA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKGludGVyMSwgc3RlcDMpO1xyXG4gICAgICAgIGxldCBmcmVuY2hCb251cyA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChtb2RpZmllcnMuZnJ5Qm9udXMpO1xyXG4gICAgICAgIGxldCBzdGVwNCA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKGludGVyMiwgZnJlbmNoQm9udXMpO1xyXG4gICAgICAgIGxldCBzdGVwNSA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKHN0ZXA0LCB0aW1lckJvbnVzKTtcclxuICAgICAgICByZXR1cm4gc3RlcDU7XHJcblxyXG4gICAgfSxcclxuICAgIGNhbGNDYXJyeU92ZXJFWFBfT0xEOiBmdW5jdGlvbiAoeyBwbGFudCwgbnVtQXV0b3MsIGV4cFRpY2sgfSkge1xyXG5cclxuICAgICAgICBsZXQgbGVmdE92ZXIgPSAwO1xyXG4gICAgICAgIGxldCBudW1MZXZlbHMgPSAxO1xyXG4gICAgICAgIGlmIChudW1BdXRvcyA+IDEpIHtcclxuICAgICAgICAgICAgbGV0IGluZGl2aWR1YWxFWFAgPSBleHBUaWNrIC8gbnVtQXV0b3M7XHJcbiAgICAgICAgICAgIGxldCB0aWNrc05lZWRlZEVYUCA9IE1hdGguY2VpbCgocGxhbnQucmVxRXhwIC0gcGxhbnQuY3VyRXhwKSAvIGluZGl2aWR1YWxFWFApO1xyXG4gICAgICAgICAgICBpZiAobnVtQXV0b3MgPiB0aWNrc05lZWRlZEVYUCkge1xyXG4gICAgICAgICAgICAgICAgbGVmdE92ZXIgPSAobnVtQXV0b3MgLSB0aWNrc05lZWRlZEVYUCkgKiBpbmRpdmlkdWFsRVhQO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZ1dHVyZVJlcSA9IDEwICsgNSAqIChwbGFudC5SYW5rICsgbnVtTGV2ZWxzKSAqIE1hdGgucG93KDEuMDUsIChwbGFudC5SYW5rICsgbnVtTGV2ZWxzKSk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobGVmdE92ZXIgPiBmdXR1cmVSZXEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0T3ZlciAtPSBmdXR1cmVSZXE7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtTGV2ZWxzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgZnV0dXJlUmVxID0gMTAgKyA1ICogKHBsYW50LlJhbmsgKyBudW1MZXZlbHMpICogTWF0aC5wb3coMS4wNSwgKHBsYW50LlJhbmsgKyBudW1MZXZlbHMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxlZnRPdmVyID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGxlZnRPdmVyID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXFFeHAgPSAxMCArIDUgKiAocGxhbnQuUmFuayArIG51bUxldmVscykgKiBNYXRoLnBvdygxLjA1LCBwbGFudC5SYW5rICsgbnVtTGV2ZWxzKTtcclxuICAgICAgICByZXR1cm4geyBsZWZ0T3ZlciwgbnVtTGV2ZWxzLCByZXFFeHAgfTtcclxuICAgIH0sXHJcbiAgICBjYWxjQ2FycnlPdmVyRVhQOiBmdW5jdGlvbiAoeyBwbGFudCwgbnVtQXV0b3MsIGV4cFRpY2sgfSkge1xyXG5cclxuICAgICAgICBsZXQgbGVmdE92ZXIgPSAwO1xyXG4gICAgICAgIGxldCBudW1MZXZlbHMgPSAwO1xyXG4gICAgICAgIGxldCBudW1FWFAgPSBwbGFudC5jdXJFeHAgKyBudW1BdXRvcyAqIGV4cFRpY2s7XHJcbiAgICAgICAgbGV0IHJlcUV4cCA9IDEwICsgNSAqIChwbGFudC5SYW5rICsgbnVtTGV2ZWxzKSAqIE1hdGgucG93KDEuMDUsIHBsYW50LlJhbmsgKyBudW1MZXZlbHMpO1xyXG5cclxuICAgICAgICAvL25lZWQgdG8gaGFuZGxlIHR3byBjYXNlczogMSBhdXRvLCBqdXN0IGdvIHVwIGFzIG11Y2ggYXMgeW91IGNhblxyXG4gICAgICAgIC8vID4xIGF1dG9zXHJcblxyXG4gICAgICAgIHdoaWxlIChudW1FWFAgPj0gcmVxRXhwKSB7XHJcbiAgICAgICAgICAgIG51bUVYUCAtPSByZXFFeHA7XHJcbiAgICAgICAgICAgIG51bUxldmVscysrO1xyXG4gICAgICAgICAgICByZXFFeHAgPSAxMCArIDUgKiAocGxhbnQuUmFuayArIG51bUxldmVscykgKiBNYXRoLnBvdygxLjA1LCBwbGFudC5SYW5rICsgbnVtTGV2ZWxzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxlZnRPdmVyID0gbnVtRVhQO1xyXG4gICAgICAgIHJldHVybiB7IGxlZnRPdmVyLCBudW1MZXZlbHMsIHJlcUV4cCB9O1xyXG4gICAgfSxcclxuICAgIGNhbGNFWFBCb251czogZnVuY3Rpb24gKG1vZGlmaWVycykge1xyXG4gICAgICAgIGxldCBvcmlnaW5hbEJvbnVzID0gbW9kaWZpZXJzLm9yaWdpbmFsUmFua0xldmVsQm9udXM7XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsTGV2ZWwgPSBtb2RpZmllcnMub3JpZ2luYWxTaG9wUmFua0xldmVsO1xyXG4gICAgICAgIGxldCBjdXJyZW50U2hvcExldmVsID0gbW9kaWZpZXJzLnNob3BSYW5rTGV2ZWw7XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsUG90aW9uID0gbW9kaWZpZXJzLm9yaWdpbmFsUG90aW9uUmFuaztcclxuICAgICAgICBsZXQgY3VycmVudFBvdGlvbiA9IG1vZGlmaWVycy5wb3Rpb25SYW5rO1xyXG4gICAgICAgIGxldCBleHBCb251cyA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChvcmlnaW5hbEJvbnVzKTtcclxuICAgICAgICBleHBCb251cyA9IG1hdGhIZWxwZXIuZGl2aWRlRGVjaW1hbChleHBCb251cywgMSArIG9yaWdpbmFsTGV2ZWwgKiAwLjEpO1xyXG4gICAgICAgIGV4cEJvbnVzID0gbWF0aEhlbHBlci5kaXZpZGVEZWNpbWFsKGV4cEJvbnVzLCBvcmlnaW5hbFBvdGlvbiA+IDAgPyAxLjUgOiAxKTtcclxuXHJcbiAgICAgICAgZXhwQm9udXMgPSBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChleHBCb251cywgMSArIGN1cnJlbnRTaG9wTGV2ZWwgKiAwLjEpO1xyXG4gICAgICAgIGV4cEJvbnVzID0gbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoZXhwQm9udXMsIGN1cnJlbnRQb3Rpb24pO1xyXG4gICAgICAgIGV4cEJvbnVzID0gZXhwQm9udXMudG9OdW1iZXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGV4cEJvbnVzO1xyXG4gICAgfSxcclxuICAgIGZ1dHVyZU11bHRCRDogZnVuY3Rpb24gKHBsYW50LCBtb2RpZmllcnMpIHtcclxuICAgICAgICByZXR1cm4gbWF0aEhlbHBlci5wb3coXHJcbiAgICAgICAgICAgICgxICsgMC4wNSAqICgxICsgbW9kaWZpZXJzLm1hbnVhbEhhcnZlc3RGb3JtdWxhICogMC4wMikpLFxyXG4gICAgICAgICAgICBtYXRoSGVscGVyLmxvZ0RlY2ltYWwocGxhbnQuY3JlYXRlZCwgMS4yNSlcclxuICAgICAgICApO1xyXG4gICAgfSxcclxuICAgIGNhbGNGdXR1cmVNdWx0OiBmdW5jdGlvbiAocGxhbnRfaW5wdXQsIG1vZGlmaWVyc19pbnB1dCkge1xyXG4gICAgICAgIC8vYmlnc2FkID0gLTEgbmVlZCB0byBtYWtlIGNvc3RzIGJpZyBkZWNpbWFsIGFzIHdlbGwgbm93XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYGNhbGNpbmcgZnV0dXJlIG11bHQke3BsYW50X2lucHV0LklEfWApXHJcbiAgICAgICAgbGV0IHBsYW50ID0gbW9kaWZpZXJzX2lucHV0LnN0cmluZyA9PT0gZmFsc2UgPyBwbGFudF9pbnB1dCA6IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGxhbnRfaW5wdXQpKTtcclxuICAgICAgICBsZXQgbW9kaWZpZXJzID0gbW9kaWZpZXJzX2lucHV0LnN0cmluZyA9PT0gZmFsc2UgPyBtb2RpZmllcnNfaW5wdXQgOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1vZGlmaWVyc19pbnB1dCkpO1xyXG4gICAgICAgIGxldCByZW1haW5pbmdUaW1lID0gbW9kaWZpZXJzLnRpbWU7XHJcbiAgICAgICAgbGV0IG51bUF1dG9zID0gbW9kaWZpZXJzLm51bUF1dG8gfHwgbW9kaWZpZXJzPy5udW1BdXRvID09PSAwID8gbW9kaWZpZXJzLm51bUF1dG8gOiAxO1xyXG5cclxuICAgICAgICBsZXQgbmV3RXhwQm9udXMgPSB0aGlzLmNhbGNFWFBCb251cyhtb2RpZmllcnMpO1xyXG4gICAgICAgIGxldCBleHBUaWNrID0gcGxhbnQucHJlc3RpZ2VCb251cyAqIG5ld0V4cEJvbnVzO1xyXG5cclxuICAgICAgICBwbGFudC5ncm93dGhUaW1lID0gdGhpcy5jYWxjR3Jvd3RoVGltZShwbGFudCwgbW9kaWZpZXJzKTtcclxuXHJcbiAgICAgICAgaWYgKG51bUF1dG9zID09PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBuZXdPdXRQdXQgPSB0aGlzLmNhbGNQcm9kT3V0cHV0KHBsYW50LCBtb2RpZmllcnMpO1xyXG5cclxuICAgICAgICAgICAgcGxhbnQucHJvZHVjdGlvbiA9IG5ld091dFB1dDtcclxuICAgICAgICAgICAgcmV0dXJuIHBsYW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKHJlbWFpbmluZ1RpbWUgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBwbGFudC50aW1lVG9MZXZlbCA9IHRoaXMuY2FsY1RpbWVUaWxsTGV2ZWwocGxhbnQsIG1vZGlmaWVycyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZWxhcHNlZFRpbWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJhbmtJbmNyZWFzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAocGxhbnQudGltZVRvTGV2ZWwgPiByZW1haW5pbmdUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkVGltZSA9IHJlbWFpbmluZ1RpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkVGltZSA9IHBsYW50LnRpbWVUb0xldmVsO1xyXG4gICAgICAgICAgICAgICAgcmFua0luY3JlYXNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtYWluaW5nVGltZSAtPSBlbGFwc2VkVGltZTtcclxuICAgICAgICAgICAgcGxhbnQuZWxhcHNlZFRpbWUgKz0gZWxhcHNlZFRpbWU7XHJcblxyXG4gICAgICAgICAgICBsZXQgbnVtSGFydmVzdHMgPSAwO1xyXG4gICAgICAgICAgICBpZiAocGxhbnQuZWxhcHNlZFRpbWUgPj0gcGxhbnQuZ3Jvd3RoVGltZSkge1xyXG4gICAgICAgICAgICAgICAgbnVtSGFydmVzdHMgPSBNYXRoLmZsb29yKHBsYW50LmVsYXBzZWRUaW1lIC8gcGxhbnQuZ3Jvd3RoVGltZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHRvQ3JlYXRlID0gcGxhbnQucGVySGFydmVzdCAqIG51bUhhcnZlc3RzICogbnVtQXV0b3M7XHJcblxyXG4gICAgICAgICAgICAgICAgcGxhbnQuY3JlYXRlZCA9IG1hdGhIZWxwZXIuYWRkRGVjaW1hbChwbGFudC5jcmVhdGVkLCB0b0NyZWF0ZSk7XHJcbiAgICAgICAgICAgICAgICBwbGFudC50b3RhbE1hZGUgPSBtYXRoSGVscGVyLmFkZERlY2ltYWwocGxhbnQudG90YWxNYWRlLCB0b0NyZWF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcGxhbnQuZnV0dXJlTXVsdCA9IHRoaXMuZnV0dXJlTXVsdEJEKHBsYW50LCBtb2RpZmllcnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyYW5rSW5jcmVhc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnRPdmVyID0gdGhpcy5jYWxjQ2FycnlPdmVyRVhQKHsgcGxhbnQsIGV4cFRpY2s6IGV4cFRpY2sgKiBudW1IYXJ2ZXN0cywgbnVtQXV0b3MgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGxlZnRPdmVyID0gdGhpcy5jYWxjQ2FycnlPdmVyRVhQKHsgcGxhbnQsIGV4cFRpY2s6IGV4cFRpY2sgLCBudW1BdXRvcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFudC5jdXJFeHAgPSBsZWZ0T3Zlci5sZWZ0T3ZlcjtcclxuICAgICAgICAgICAgICAgICAgICBwbGFudC5SYW5rICs9IGxlZnRPdmVyLm51bUxldmVscztcclxuICAgICAgICAgICAgICAgICAgICBwbGFudC5wZXJIYXJ2ZXN0ID0gdGhpcy5jYWxjUGxhbnRIYXJ2ZXN0KHBsYW50LCBtb2RpZmllcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBsYW50LnJlcUV4cCA9IDEwICsgNSAqIHBsYW50LlJhbmsgKiBNYXRoLnBvdygxLjA1LCBwbGFudC5SYW5rKTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFudC5yZXFFeHAgPSBsZWZ0T3Zlci5yZXFFeHA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2FpbmVkRVhQID0gbnVtSGFydmVzdHMgKiBleHBUaWNrICogbnVtQXV0b3M7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsRXhwID0gcGxhbnQuY3VyRXhwICsgZ2FpbmVkRVhQO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYW50LmN1ckV4cCA9IHRvdGFsRXhwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGxhbnQuZWxhcHNlZFRpbWUgPSBwbGFudC5lbGFwc2VkVGltZSAlIHBsYW50Lmdyb3d0aFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBuZXdPdXRQdXQgPSB0aGlzLmNhbGNQcm9kT3V0cHV0KHBsYW50LCBtb2RpZmllcnMpO1xyXG5cclxuICAgICAgICBwbGFudC5wcm9kdWN0aW9uID0gbmV3T3V0UHV0O1xyXG4gICAgICAgIHJldHVybiBwbGFudDtcclxuICAgIH0sXHJcbiAgICBjYWxjVGltZVRpbGxMZXZlbDogZnVuY3Rpb24gKHBsYW50X2lucHV0LCBtb2RpZmllcnNfaW5wdXQpIHtcclxuICAgICAgICBsZXQgcGxhbnQgPSBwbGFudF9pbnB1dDtcclxuICAgICAgICBsZXQgbW9kaWZpZXJzID0gbW9kaWZpZXJzX2lucHV0O1xyXG4gICAgICAgIGxldCBudW1BdXRvcyA9IG1vZGlmaWVycy5udW1BdXRvIHx8IG1vZGlmaWVycz8ubnVtQXV0byA9PT0gMCA/IG1vZGlmaWVycy5udW1BdXRvIDogMTtcclxuICAgICAgICBpZiAobnVtQXV0b3MgPT09IDApIHJldHVybiBJbmZpbml0eTtcclxuXHJcbiAgICAgICAgbGV0IHJlbUV4cCA9IHBsYW50LnJlcUV4cCAtIHBsYW50LmN1ckV4cDtcclxuICAgICAgICBsZXQgbmV3RXhwQm9udXMgPSB0aGlzLmNhbGNFWFBCb251cyhtb2RpZmllcnMpO1xyXG4gICAgICAgIGxldCBleHBCb251cyA9IHBsYW50LnByZXN0aWdlQm9udXMgKiBuZXdFeHBCb251cyAqIG51bUF1dG9zO1xyXG5cclxuICAgICAgICBsZXQgdGlja3NUaWxsTGV2ZWwgPSBNYXRoLmNlaWwoKHJlbUV4cCkgLyBleHBCb251cyk7XHJcbiAgICAgICAgcmV0dXJuIHRpY2tzVGlsbExldmVsICogcGxhbnQuZ3Jvd3RoVGltZSAtIHBsYW50LmVsYXBzZWRUaW1lO1xyXG4gICAgfSxcclxuICAgIGdldE5leHRTaG9wQ29zdHM6IGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgIGxldCBwcm9kQ29zdCA9IDE7XHJcbiAgICAgICAgbGV0IHByb2RMZXZlbCA9IGRhdGEuRmFybWluZ1Nob3BQbGFudFRvdGFsUHJvZHVjdGlvbiB8fCBkYXRhLkZhcm1pbmdTaG9wUGxhbnRUb3RhbFByb2R1Y3Rpb24gPT09IDAgPyBkYXRhLkZhcm1pbmdTaG9wUGxhbnRUb3RhbFByb2R1Y3Rpb24gOiBkYXRhLnNob3BQcm9kTGV2ZWw7XHJcbiAgICAgICAgbGV0IGdyb3d0aENvc3QgPSAxO1xyXG4gICAgICAgIGxldCBncm93dGhMZXZlbCA9IGRhdGEuRmFybWluZ1Nob3BQbGFudEdyb3dpbmdTcGVlZCB8fCBkYXRhLkZhcm1pbmdTaG9wUGxhbnRHcm93aW5nU3BlZWQgPT09IDAgPyBkYXRhLkZhcm1pbmdTaG9wUGxhbnRHcm93aW5nU3BlZWQgOiBkYXRhLnNob3BHcm93aW5nU3BlZWQ7XHJcbiAgICAgICAgbGV0IGV4cENvc3QgPSAxO1xyXG4gICAgICAgIGxldCBleHBMZXZlbCA9IGRhdGEuRmFybWluZ1Nob3BQbGFudFJhbmtFeHBFYXJuZWQgfHwgZGF0YS5GYXJtaW5nU2hvcFBsYW50UmFua0V4cEVhcm5lZCA9PT0gMCA/IGRhdGEuRmFybWluZ1Nob3BQbGFudFJhbmtFeHBFYXJuZWQgOiBkYXRhLnNob3BSYW5rTGV2ZWw7XHJcblxyXG4gICAgICAgIGxldCB0ZW1wMSA9IG1hdGhIZWxwZXIucG93KFxyXG4gICAgICAgICAgICAxLjA1LCBwcm9kTGV2ZWwgLSA1MFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbGV0IHRlbXAyID0gbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoMTAwLCB0ZW1wMSk7XHJcbiAgICAgICAgbGV0IHRlbXAzID0gbWF0aEhlbHBlci5wb3codGVtcDIsIHByb2RMZXZlbCk7XHJcbiAgICAgICAgbGV0IHRlbXA0ID0gbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoMTAwMDAwMDAwLCB0ZW1wMyk7XHJcbiAgICAgICAgcHJvZENvc3QgPSBwcm9kTGV2ZWwgPiA1MCA/IHRlbXA0IDogbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoMTAwMDAwMDAwLCBtYXRoSGVscGVyLnBvdygxMDAsIHByb2RMZXZlbCkpO1xyXG5cclxuXHJcbiAgICAgICAgZ3Jvd3RoQ29zdCA9IG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKFxyXG4gICAgICAgICAgICBtYXRoSGVscGVyLnBvdyg1MDAsIGdyb3d0aExldmVsKSxcclxuICAgICAgICAgICAgMTAwMDAwMDAwMDBcclxuICAgICAgICApO1xyXG4gICAgICAgIGV4cENvc3QgPVxyXG4gICAgICAgICAgICBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChcclxuICAgICAgICAgICAgICAgIG1hdGhIZWxwZXIucG93KDI1MCwgZXhwTGV2ZWwpLFxyXG4gICAgICAgICAgICAgICAgMTAwMDAwMDAwMDAwMDAwMFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4geyBwcm9kQ29zdCwgZ3Jvd3RoQ29zdCwgZXhwQ29zdCB9O1xyXG4gICAgfSxcclxuICAgIGNhbGNNYXhQcmVzdGlnZTogZnVuY3Rpb24gKHBsYW50X2lucHV0KSB7XHJcblxyXG4gICAgICAgIGxldCBzdGFydCA9IHBsYW50X2lucHV0LnByZXN0aWdlO1xyXG4gICAgICAgIGxldCBydW5uaW5nSGFydmVzdHMgPSAwO1xyXG4gICAgICAgIGxldCBmbGFnID0gdHJ1ZTtcclxuICAgICAgICB3aGlsZSAoZmxhZykge1xyXG4gICAgICAgICAgICBsZXQgcmVxdWlyZWRQZXJQaWMgPSAxMCAqIE1hdGgucG93KDIsIHN0YXJ0KTtcclxuICAgICAgICAgICAgbGV0IHJlcXVpcmVkSGFydmVzdHMgPSBydW5uaW5nSGFydmVzdHMgKyByZXF1aXJlZFBlclBpYztcclxuICAgICAgICAgICAgaWYgKHBsYW50X2lucHV0LmNyZWF0ZWQuZ3JlYXRlclRoYW5PckVxdWFsVG8ocmVxdWlyZWRIYXJ2ZXN0cykpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0Kys7XHJcbiAgICAgICAgICAgICAgICBydW5uaW5nSGFydmVzdHMgKz0gcmVxdWlyZWRQZXJQaWM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0IC0gcGxhbnRfaW5wdXQucHJlc3RpZ2U7XHJcbiAgICB9LFxyXG4gICAgY2FsY1RpbWVUaWxsUHJlc3RpZ2U6IGZ1bmN0aW9uIChwbGFudF9pbnB1dCwgbW9kaWZpZXJzX2lucHV0KSB7XHJcbiAgICAgICAgbGV0IHBsYW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwbGFudF9pbnB1dCkpO1xyXG4gICAgICAgIHRoaXMucmVzZXRQbGFudEJEKHBsYW50KTtcclxuICAgICAgICBsZXQgbW9kaWZpZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtb2RpZmllcnNfaW5wdXQpKTtcclxuICAgICAgICB0aGlzLnJlc2V0TW9kaWZpZXJzQkQobW9kaWZpZXJzKTtcclxuICAgICAgICBsZXQgbnVtQXV0b3MgPSBtb2RpZmllcnMubnVtQXV0byB8fCBtb2RpZmllcnM/Lm51bUF1dG8gPT09IDAgPyBtb2RpZmllcnMubnVtQXV0byA6IDE7XHJcbiAgICAgICAgbGV0IHByZXN0aWdlZCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCB0b3RhbFRpbWUgPSAwO1xyXG4gICAgICAgIGxldCBydW5uaW5nSGFydmVzdHMgPSAwO1xyXG4gICAgICAgIGxldCBuZXdFeHBCb251cyA9IHRoaXMuY2FsY0VYUEJvbnVzKG1vZGlmaWVycyk7XHJcbiAgICAgICAgbGV0IGV4cFRpY2sgPSBwbGFudC5wcmVzdGlnZUJvbnVzICogbmV3RXhwQm9udXM7XHJcblxyXG4gICAgICAgIHdoaWxlICghcHJlc3RpZ2VkKSB7XHJcbiAgICAgICAgICAgIGxldCB0aW1lVG9MZXZlbCA9IHRoaXMuY2FsY1RpbWVUaWxsTGV2ZWwocGxhbnQsIG1vZGlmaWVycyk7XHJcbiAgICAgICAgICAgIGxldCByZXF1aXJlZFBlclBpYyA9IDEwICogTWF0aC5wb3coMiwgcGxhbnQucHJlc3RpZ2UpO1xyXG4gICAgICAgICAgICBsZXQgcmVxdWlyZWRIYXJ2ZXN0cyA9IHJ1bm5pbmdIYXJ2ZXN0cyArIHJlcXVpcmVkUGVyUGljO1xyXG4gICAgICAgICAgICBsZXQgcmVtYWluaW5nSGFydmVzdHMgPSBtYXRoSGVscGVyLnN1YnRyYWN0RGVjaW1hbChyZXF1aXJlZEhhcnZlc3RzLCBwbGFudC5jcmVhdGVkKTsvL21pbmltdW0gbnVtYmVyIG9mIHRpY2tzXHJcbiAgICAgICAgICAgIGxldCB0aW1lVGlsbFByZXN0aWdlID1cclxuICAgICAgICAgICAgICAgIG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGhIZWxwZXIuZGl2aWRlRGVjaW1hbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nSGFydmVzdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwbGFudC5wZXJIYXJ2ZXN0ICogbnVtQXV0b3MpXHJcbiAgICAgICAgICAgICAgICAgICAgKS5jZWlsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhbnQuZ3Jvd3RoVGltZVxyXG4gICAgICAgICAgICAgICAgKS5jZWlsKCkudG9OdW1iZXIoKVxyXG4gICAgICAgICAgICAgICAgO1xyXG5cclxuICAgICAgICAgICAgaWYgKG51bUF1dG9zID09PSAwICYmIHJlbWFpbmluZ0hhcnZlc3RzLmdyZWF0ZXJUaGFuKDApKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdG90YWxUaW1lID0gSW5maW5pdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGltZVRpbGxQcmVzdGlnZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbFRpbWUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYW50LnByZXN0aWdlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlc3RpZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ0hhcnZlc3RzICs9IHJlcXVpcmVkUGVyUGljO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lVGlsbFByZXN0aWdlID4gdGltZVRvTGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIHBsYW50LmVsYXBzZWRUaW1lICs9IHRpbWVUb0xldmVsO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpY2tzID0gTWF0aC5mbG9vcihwbGFudC5lbGFwc2VkVGltZSAvIHBsYW50Lmdyb3d0aFRpbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHBsYW50LmNyZWF0ZWQgPSBtYXRoSGVscGVyLmFkZERlY2ltYWwocGxhbnQuY3JlYXRlZCwgdGlja3MgKiBwbGFudC5wZXJIYXJ2ZXN0ICogbnVtQXV0b3MpO1xyXG4gICAgICAgICAgICAgICAgcGxhbnQudG90YWxNYWRlID0gbWF0aEhlbHBlci5hZGREZWNpbWFsKHBsYW50LnRvdGFsTWFkZSwgdGlja3MgKiBwbGFudC5wZXJIYXJ2ZXN0ICogbnVtQXV0b3MpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByYW5rUmVzID0gdGhpcy5jYWxjQ2FycnlPdmVyRVhQKHsgcGxhbnQsIG51bUF1dG9zLCBleHBUaWNrOiBleHBUaWNrICogdGlja3MgfSlcclxuICAgICAgICAgICAgICAgIHBsYW50LlJhbmsgKz0gcmFua1Jlcy5udW1MZXZlbHM7XHJcbiAgICAgICAgICAgICAgICBwbGFudC5jdXJFeHAgPSByYW5rUmVzLmxlZnRPdmVyO1xyXG4gICAgICAgICAgICAgICAgcGxhbnQucmVxRXhwID0gcmFua1Jlcy5yZXFFeHA7XHJcbiAgICAgICAgICAgICAgICBwbGFudC5wZXJIYXJ2ZXN0ID0gdGhpcy5jYWxjUGxhbnRIYXJ2ZXN0KHBsYW50LCBtb2RpZmllcnMpO1xyXG4gICAgICAgICAgICAgICAgdG90YWxUaW1lICs9IHRpbWVUb0xldmVsO1xyXG4gICAgICAgICAgICAgICAgcGxhbnQuZWxhcHNlZFRpbWUgPSBwbGFudC5lbGFwc2VkVGltZSAlIHBsYW50Lmdyb3d0aFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcmVzdGlnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcGxhbnQuZWxhcHNlZFRpbWUgKz0gdGltZVRpbGxQcmVzdGlnZTtcclxuICAgICAgICAgICAgICAgIGxldCB0aWNrcyA9IE1hdGguZmxvb3IocGxhbnQuZWxhcHNlZFRpbWUgLyBwbGFudC5ncm93dGhUaW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwbGFudC5jcmVhdGVkID0gbWF0aEhlbHBlci5hZGREZWNpbWFsKHBsYW50LmNyZWF0ZWQsIHRpY2tzICogcGxhbnQucGVySGFydmVzdCAqIG51bUF1dG9zKTtcclxuICAgICAgICAgICAgICAgIHBsYW50LnRvdGFsTWFkZSA9IG1hdGhIZWxwZXIuYWRkRGVjaW1hbChwbGFudC50b3RhbE1hZGUsIHRpY2tzICogcGxhbnQucGVySGFydmVzdCAqIG51bUF1dG9zKTtcclxuICAgICAgICAgICAgICAgIHRvdGFsVGltZSArPSB0aW1lVGlsbFByZXN0aWdlO1xyXG4gICAgICAgICAgICAgICAgcGxhbnQuZWxhcHNlZFRpbWUgPSBwbGFudC5lbGFwc2VkVGltZSAlIHBsYW50Lmdyb3d0aFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgcmVtYWluaW5nVGltZTogdG90YWxUaW1lLCBwcmVzdGlnZTogcGxhbnQucHJlc3RpZ2UsIHByZXN0aWdlZDogcHJlc3RpZ2VkIH1cclxuICAgIH0sXHJcbiAgICByZXNldFBsYW50QkQ6IGZ1bmN0aW9uIChwbGFudCkge1xyXG5cclxuICAgICAgICBwbGFudC50b3RhbE1hZGUgPSBwbGFudD8udG90YWxNYWRlPy5tYW50aXNzYSB8fCBwbGFudD8udG90YWxNYWRlPy5tYW50aXNzYSA9PT0gMCA/IHBsYW50LnRvdGFsTWFkZSA6IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChwbGFudC50b3RhbE1hZGUpO1xyXG4gICAgICAgIHBsYW50LmNyZWF0ZWQgPSBwbGFudD8uY3JlYXRlZD8ubWFudGlzc2EgfHwgcGxhbnQ/LmNyZWF0ZWQ/Lm1hbnRpc3NhID09PSAwID8gcGxhbnQuY3JlYXRlZCA6IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChwbGFudC5jcmVhdGVkKTtcclxuICAgICAgICBwbGFudC5wcm9kdWN0aW9uID0gcGxhbnQ/LnByb2R1Y3Rpb24/Lm1hbnRpc3NhIHx8IHBsYW50Py5wcm9kdWN0aW9uPy5tYW50aXNzYSA9PT0gMCA/IHBsYW50LnByb2R1Y3Rpb24gOiBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwocGxhbnQucHJvZHVjdGlvbik7XHJcbiAgICAgICAgcGxhbnQuZnV0dXJlTXVsdCA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChwbGFudC5mdXR1cmVNdWx0KTtcclxuXHJcbiAgICB9LFxyXG4gICAgcmVzZXRNb2RpZmllcnNCRDogZnVuY3Rpb24gKG1vZGlmaWVycykge1xyXG4gICAgICAgIG1vZGlmaWVycy5zaG9wUHJvZEJvbnVzID0gbW9kaWZpZXJzPy5zaG9wUHJvZEJvbnVzPy5tYW50aXNzYSB8fCBtb2RpZmllcnM/LnNob3BQcm9kQm9udXM/Lm1hbnRpc3NhID09PSAwID8gbW9kaWZpZXJzLnNob3BQcm9kQm9udXMgOiBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLnNob3BQcm9kQm9udXMpO1xyXG4gICAgICAgIG1vZGlmaWVycy5ocEJvbnVzID0gbW9kaWZpZXJzPy5ocEJvbnVzPy5tYW50aXNzYSB8fCBtb2RpZmllcnM/LmhwQm9udXM/Lm1hbnRpc3NhID09PSAwID8gbW9kaWZpZXJzLmhwQm9udXMgOiBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLmhwQm9udXMpO1xyXG4gICAgICAgIG1vZGlmaWVycy5jdXJQb3RhdG9lcyA9IG1vZGlmaWVycz8uY3VyUG90YXRvZXM/Lm1hbnRpc3NhIHx8IG1vZGlmaWVycz8uY3VyUG90YXRvZXMubWFudGlzc2EgPT09IDAgPyBtb2RpZmllcnMuY3VyUG90YXRvZXMgOiBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLmN1clBvdGF0b2VzKTtcclxuICAgICAgICBtb2RpZmllcnMudG90YWxQb3RhdG9lcyA9IG1vZGlmaWVycz8udG90YWxQb3RhdG9lcz8ubWFudGlzc2EgfHwgbW9kaWZpZXJzPy50b3RhbFBvdGF0b2VzPy5tYW50aXNzYSA9PT0gMCA/IG1vZGlmaWVycy50b3RhbFBvdGF0b2VzIDogbWF0aEhlbHBlci5jcmVhdGVEZWNpbWFsKG1vZGlmaWVycy50b3RhbFBvdGF0b2VzKTtcclxuICAgIH0sXHJcbiAgICBjYWxjSFBQcm9kOiBmdW5jdGlvbiAocGxhbnRzX2lucHV0LCBtb2RpZmllcnNfaW5wdXQpIHtcclxuICAgICAgICBsZXQgcGxhbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwbGFudHNfaW5wdXQpKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0UGxhbnRCRChwbGFudHNbaV0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtb2RpZmllcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1vZGlmaWVyc19pbnB1dCkpO1xyXG4gICAgICAgIHRoaXMucmVzZXRNb2RpZmllcnNCRChtb2RpZmllcnMpO1xyXG4gICAgICAgIG1vZGlmaWVycy5uZXh0Q29zdHMucHJvZENvc3QgPSBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLm5leHRDb3N0cy5wcm9kQ29zdClcclxuICAgICAgICBtb2RpZmllcnMubmV4dENvc3RzLmdyb3d0aENvc3QgPSBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwobW9kaWZpZXJzLm5leHRDb3N0cy5ncm93dGhDb3N0KVxyXG4gICAgICAgIG1vZGlmaWVycy5uZXh0Q29zdHMuZXhwQ29zdCA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChtb2RpZmllcnMubmV4dENvc3RzLmV4cENvc3QpXHJcblxyXG4gICAgICAgIGxldCBudW1BdXRvcyA9IG1vZGlmaWVycy5udW1BdXRvcztcclxuICAgICAgICBsZXQgc2ltdWxhdGlvblRpbWUgPSBtb2RpZmllcnMudGltZTsgLy90aW1lIGluIHNlY29uZHNcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbW9kaWZpZXJzLnN0YXJ0VGltZSA/IG1vZGlmaWVycy5zdGFydFRpbWUgOiAwOy8vdXNlZCBmb3IgY29uc2lzdGVudCB0aWNrIHRpbWluZ3NcclxuICAgICAgICBjb25zdCBydW5uaW5nVGltZSA9IG1vZGlmaWVycy5ydW5uaW5nVGltZSA/IG1vZGlmaWVycy5ydW5uaW5nVGltZSA6IDA7Ly9Vc2VkIGZvciBjYWxjdWxhdGluZyBlbmQgdGltaW5ncyBpZiBuZWNlc3NhcnlcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVBvaW50c01heCA9IG1vZGlmaWVycy5tYXhTdGVwcyA/IG1vZGlmaWVycy5tYXhTdGVwcyA6IDEwMDtcclxuICAgICAgICBjb25zdCB0aWNrU3RhcnQgPSBtb2RpZmllcnMudGlja1N0YXJ0ID8gbW9kaWZpZXJzLnRpY2tTdGFydCA6IDA7XHJcblxyXG4gICAgICAgIGxldCB0aWNrUmF0ZSA9IG1vZGlmaWVycy50aWNrUmF0ZSA/IG1vZGlmaWVycy50aWNrUmF0ZSA6IDYwICogMTtcclxuICAgICAgICBsZXQgZGF0YVBvaW50VGhyZXNob2xkID0gbW9kaWZpZXJzLmRhdGFQb2ludFRocmVzaG9sZCA/IG1vZGlmaWVycy5kYXRhUG9pbnRUaHJlc2hvbGQgOiAoc2ltdWxhdGlvblRpbWUgLyB0aWNrUmF0ZSkgPCBkYXRhUG9pbnRzTWF4ID8gMSA6IGhlbHBlci5yb3VuZEludCgoc2ltdWxhdGlvblRpbWUgLyB0aWNrUmF0ZSkgLyBkYXRhUG9pbnRzTWF4KTtcclxuICAgICAgICBsZXQgZGF0YVBvaW50c1BvdGF0b2VzID0gW107XHJcbiAgICAgICAgbGV0IGRhdGFQb2ludHNGcmllcyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgdG90YWxQb3RhdG9lcyA9IG1vZGlmaWVycy50b3RhbFBvdGF0b2VzO1xyXG4gICAgICAgIGxldCBjdXJyUG90YXRvZXMgPSBtb2RpZmllcnMuY3VyUG90YXRvZXM7XHJcbiAgICAgICAgbGV0IHByZXZQbGFudHNQcm9kID0gQXJyYXkocGxhbnRzLmxlbmd0aCkuZmlsbCgwKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwcmV2UGxhbnRzUHJvZFtpXSA9IHBsYW50c1tpXS5wcm9kdWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGV0IHJ1blRpbWUgPSAwO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBsZXQgZmluYWxQYXNzID0gZmFsc2U7XHJcbiAgICAgICAgLy8gdGlja1JhdGUgPSAyO1xyXG4gICAgICAgIGxldCBwcm9kTXVsdCA9IDE7XHJcbiAgICAgICAgaWYgKHRpY2tSYXRlID4gMikge1xyXG4gICAgICAgICAgICBpZiAodGlja1JhdGUgPj0gMjU5Mikge1xyXG4gICAgICAgICAgICAgICAgcHJvZE11bHQgPSAwLjk1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRpY2tSYXRlID49IDE3MjgpIHtcclxuICAgICAgICAgICAgICAgIHByb2RNdWx0ID0gMC45NTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aWNrUmF0ZSA+PSA4NjQpIHtcclxuICAgICAgICAgICAgICAgIHByb2RNdWx0ID0gMC45NTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aWNrUmF0ZSA+PSAxNDApIHtcclxuICAgICAgICAgICAgICAgIHByb2RNdWx0ID0gMC45NTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHByb2RNdWx0ID0gMC45NTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmcnlNdWx0ID0gMS4wNTtcclxuICAgICAgICAvL0l0ZXJhdGUgb3ZlciBlYWNoIHNlY29uZFxyXG4gICAgICAgIGZvciAoOyBpIDwgc2ltdWxhdGlvblRpbWUgLyB0aWNrUmF0ZSB8fCBmaW5hbFBhc3M7IGkrKykge1xyXG4gICAgICAgICAgICAvL0NhbGN1bGF0ZSBuZXcgdmFsdWVzIGZvciBlYWNoIHBsYW50XHJcbiAgICAgICAgICAgIGxldCBIUEluaXRpYWwgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gcGxhbnRzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyciA9IHBsYW50c1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdG9BZGQgPSBqID09PSBwbGFudHMubGVuZ3RoIC0gMSA/IDAgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRpY2tSYXRlID4gMSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU29tZSBiYXNpYyBjYWxjdWx1cyB0byBmaW5kIHRvdGFsIGFzc3VtaW5nIGxpbmVhciBncm93dGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwobWF0aEhlbHBlci5hZGREZWNpbWFsKHByZXZQbGFudHNQcm9kW2ogKyAxXSwgcGxhbnRzW2ogKyAxXS5wcm9kdWN0aW9uKSwgMC41ICogdGlja1JhdGUgKiBwcm9kTXVsdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChwbGFudHNbaiArIDFdLnByb2R1Y3Rpb24sIHRpY2tSYXRlKTtcclxuICAgICAgICAgICAgICAgIGN1cnIudG90YWxNYWRlID0gbWF0aEhlbHBlci5hZGREZWNpbWFsKGN1cnIudG90YWxNYWRlLCB0b0FkZCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzID0gdGhpcy5jYWxjRnV0dXJlTXVsdChjdXJyLCB7IC4uLm1vZGlmaWVycywgdGltZTogdGlja1JhdGUsIG51bUF1dG86IG51bUF1dG9zW2pdLCBzdHJpbmc6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgY3VyciA9IHJlcztcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyLklEID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSFBJbml0aWFsID0gcHJldlBsYW50c1Byb2Rbal07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmV2UGxhbnRzUHJvZFtqXSA9IGN1cnIucHJvZHVjdGlvbjtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG1vZGlmaWVycy5wYXNzZWRUaW1lICs9IHRpY2tSYXRlO1xyXG4gICAgICAgICAgICBtb2RpZmllcnMudGltZVBhc3NlZCArPSB0aWNrUmF0ZTtcclxuXHJcblxyXG4gICAgICAgICAgICAvL1JlZHVjZSBwbGFudCByYW5rIHBvdGlvbiB0aW1lciwgb3Igc2V0IGl0IHRoZSBib251cyB0byAwIGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLnBvdGlvblJhbmsgPiAxICYmICFtb2RpZmllcnMuZm9yY2VSYW5rUG90aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMucG90aW9uUmFua1RpbWUgLT0gdGlja1JhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXJzLnBvdGlvblJhbmtUaW1lIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVycy5wb3Rpb25SYW5rID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGN1clRpbWUgPSBoZWxwZXIucm91bmRJbnQoaSAqIHRpY2tSYXRlICsgc3RhcnRUaW1lKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBIUFRvQWRkID0gdGlja1JhdGUgPiAxID9cclxuICAgICAgICAgICAgICAgIG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKG1hdGhIZWxwZXIuYWRkRGVjaW1hbChIUEluaXRpYWwsIHBsYW50c1swXS5wcm9kdWN0aW9uKSwgMC41MjUgKiB0aWNrUmF0ZSAqIHByb2RNdWx0KVxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgcGxhbnRzWzBdLnByb2R1Y3Rpb247XHJcblxyXG4gICAgICAgICAgICB0b3RhbFBvdGF0b2VzID0gbWF0aEhlbHBlci5hZGREZWNpbWFsKHRvdGFsUG90YXRvZXMsIEhQVG9BZGQpO1xyXG4gICAgICAgICAgICBjdXJyUG90YXRvZXMgPSBtYXRoSGVscGVyLmFkZERlY2ltYWwoY3VyclBvdGF0b2VzLCBIUFRvQWRkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMuYXV0b0J1eVBCQykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHVwZGF0ZUNvc3RzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgYm91Z2h0VXBncmFkZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoYm91Z2h0VXBncmFkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvdWdodFVwZ3JhZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyclBvdGF0b2VzLmdyZWF0ZXJUaGFuT3JFcXVhbFRvKG1vZGlmaWVycy5uZXh0Q29zdHMucHJvZENvc3QpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJQb3RhdG9lcyA9IG1hdGhIZWxwZXIuc3VidHJhY3REZWNpbWFsKGN1cnJQb3RhdG9lcywgbW9kaWZpZXJzLm5leHRDb3N0cy5wcm9kQ29zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVycy5zaG9wUHJvZExldmVsKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVycy5zaG9wUHJvZEJvbnVzID0gdGhpcy5jYWxjU2hvcFByb2RCb251cyhtb2RpZmllcnMsIG1vZGlmaWVycy5zaG9wUHJvZExldmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29zdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3VnaHRVcGdyYWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJQb3RhdG9lcy5ncmVhdGVyVGhhbk9yRXF1YWxUbyhtb2RpZmllcnMubmV4dENvc3RzLmdyb3d0aENvc3QpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJQb3RhdG9lcyAtPSBtb2RpZmllcnMubmV4dENvc3RzLmdyb3d0aENvc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJQb3RhdG9lcyA9IG1hdGhIZWxwZXIuc3VidHJhY3REZWNpbWFsKGN1cnJQb3RhdG9lcywgbW9kaWZpZXJzLm5leHRDb3N0cy5ncm93dGhDb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzLnNob3BHcm93aW5nU3BlZWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29zdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3VnaHRVcGdyYWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJQb3RhdG9lcy5ncmVhdGVyVGhhbk9yRXF1YWxUbyhtb2RpZmllcnMubmV4dENvc3RzLmV4cENvc3QpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJQb3RhdG9lcyA9IG1hdGhIZWxwZXIuc3VidHJhY3REZWNpbWFsKGN1cnJQb3RhdG9lcywgbW9kaWZpZXJzLm5leHRDb3N0cy5leHBDb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzLnNob3BSYW5rTGV2ZWwrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzLnNob3BSYW5rRVhQID0gMSArIG1vZGlmaWVycy5zaG9wUmFua0xldmVsICogMC4xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb3N0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdWdodFVwZ3JhZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlQ29zdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRDb3N0cyA9IHRoaXMuZ2V0TmV4dFNob3BDb3N0cyhtb2RpZmllcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnMubmV4dENvc3RzID0gbmV4dENvc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChpICUgZGF0YVBvaW50VGhyZXNob2xkID09PSAwICYmIGN1clRpbWUgPj0gdGlja1N0YXJ0ICYmIGN1clRpbWUgPD0gKHNpbXVsYXRpb25UaW1lICsgcnVubmluZ1RpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhUG9pbnRzUG90YXRvZXMucHVzaCh7IFwidGltZVwiOiBjdXJUaW1lLCBcInByb2R1Y3Rpb25cIjogdG90YWxQb3RhdG9lcyB9KVxyXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50c0ZyaWVzLnB1c2goeyBcInRpbWVcIjogY3VyVGltZSwgXCJmcmllc1wiOiBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChmYXJtaW5nSGVscGVyLmNhbGNGcnlPdXRwdXQodG90YWxQb3RhdG9lcywgbW9kaWZpZXJzKSwgZnJ5TXVsdCkgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFtb2RpZmllcnMuc2tpcEZpbmFsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsUGFzcyAmJiBjdXJUaW1lID49IChzaW11bGF0aW9uVGltZSArIHJ1bm5pbmdUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFmaW5hbFBhc3MgJiYgY3VyVGltZSA8IChzaW11bGF0aW9uVGltZSArIHJ1bm5pbmdUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsUGFzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpID4gMCAmJiAhbW9kaWZpZXJzLnNraXBGaW5hbCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGN1clRpbWUgPSBoZWxwZXIucm91bmRJbnQoaSAqIHRpY2tSYXRlICsgc3RhcnRUaW1lKTtcclxuICAgICAgICAgICAgbW9kaWZpZXJzLnBhc3NlZFRpbWUgPSBpICogdGlja1JhdGUgKyBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgIC8vSGFuZGxpbmcgcmFyZSBjYXNlIHdoZW4geW91IGhhdmUgdG8gYWRkLCBidXQgb25seSBvbmNlIGR1ZSB0byBpbnRlcnZhbHMgZHVyYXRpb24sIGJ1dCBvbmx5IGF0IHRoZSBlbmQsIGFuZCBkaWRuJ3QgZml0IGluIHRoZSBmb3IgbG9vcCBhYm92ZVxyXG4gICAgICAgICAgICBpZiAoZGF0YVBvaW50c1BvdGF0b2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVBvaW50c1BvdGF0b2VzLnB1c2goeyBcInRpbWVcIjogY3VyVGltZSwgXCJwcm9kdWN0aW9uXCI6IHRvdGFsUG90YXRvZXMgfSlcclxuICAgICAgICAgICAgICAgIGRhdGFQb2ludHNGcmllcy5wdXNoKHsgXCJ0aW1lXCI6IGN1clRpbWUsIFwiZnJpZXNcIjogbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoZmFybWluZ0hlbHBlci5jYWxjRnJ5T3V0cHV0KHRvdGFsUG90YXRvZXMsIG1vZGlmaWVycyksIGZyeU11bHQpIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YVBvaW50c1BvdGF0b2VzW2RhdGFQb2ludHNQb3RhdG9lcy5sZW5ndGggLSAxXS5wcm9kdWN0aW9uICE9PSB0b3RhbFBvdGF0b2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyVGltZSA+IChzaW11bGF0aW9uVGltZSArIHJ1bm5pbmdUaW1lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZUluY3JlYXNlID0gY3VyVGltZSAtIGRhdGFQb2ludHNQb3RhdG9lc1tkYXRhUG9pbnRzUG90YXRvZXMubGVuZ3RoIC0gMV0udGltZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5jcmVhc2UgPSBtYXRoSGVscGVyLmRpdmlkZURlY2ltYWwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChtYXRoSGVscGVyLnN1YnRyYWN0RGVjaW1hbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUG90YXRvZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhUG9pbnRzUG90YXRvZXNbZGF0YVBvaW50c1BvdGF0b2VzLmxlbmd0aCAtIDFdLnByb2R1Y3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lSW5jcmVhc2VcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHRlbXBfaW5jcmVhc2UgPSAgbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwobWF0aEhlbHBlci5hZGREZWNpbWFsKEhQSW5pdGlhbCwgcGxhbnRzWzBdLnByb2R1Y3Rpb24pLCAwLjUgKiB0aWNrUmF0ZSAqIHByb2RNdWx0KTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJ1ZVRpbWVJbmNyZWFzZSA9IChzaW11bGF0aW9uVGltZSArIHJ1bm5pbmdUaW1lKSAtIGRhdGFQb2ludHNQb3RhdG9lc1tkYXRhUG9pbnRzUG90YXRvZXMubGVuZ3RoIC0gMV0udGltZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxQb3RhdG9lcyA9IG1hdGhIZWxwZXIuYWRkRGVjaW1hbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVBvaW50c1BvdGF0b2VzW2RhdGFQb2ludHNQb3RhdG9lcy5sZW5ndGggLSAxXS5wcm9kdWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChpbmNyZWFzZSwgdHJ1ZVRpbWVJbmNyZWFzZSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3T2JqID0geyB0aW1lOiBkYXRhUG9pbnRzUG90YXRvZXNbZGF0YVBvaW50c1BvdGF0b2VzLmxlbmd0aCAtIDFdLnRpbWUgKyB0cnVlVGltZUluY3JlYXNlLCBwcm9kdWN0aW9uOiBmaW5hbFBvdGF0b2VzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVBvaW50c1BvdGF0b2VzLnB1c2gobmV3T2JqKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVBvaW50c0ZyaWVzLnB1c2goeyBcInRpbWVcIjogZGF0YVBvaW50c1BvdGF0b2VzW2RhdGFQb2ludHNQb3RhdG9lcy5sZW5ndGggLSAxXS50aW1lICsgdHJ1ZVRpbWVJbmNyZWFzZSwgXCJmcmllc1wiOiBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChmYXJtaW5nSGVscGVyLmNhbGNGcnlPdXRwdXQodG90YWxQb3RhdG9lcywgbW9kaWZpZXJzKSwgZnJ5TXVsdCkgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9UaGlzIG1lYW5zIHRoZSBgY3VycmVudGAgcG90YXRvZXMgYXJlbid0IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgYmFja3dhcmRzIGZpbGwvZml4IGJ1dCBpdCBzaG91bGRuJ3QgYmUgYSBiaWcgZGVhbCwgYW5kIG5vdCB1c2VkIGZvciBhbnl0aGluZyBhdG1cclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFBvdGF0b2VzID0gZmluYWxQb3RhdG9lcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG90YWxQb3RhdG9lczogdG90YWxQb3RhdG9lcyxcclxuICAgICAgICAgICAgcG90YXRvZVByb2R1Y3Rpb246IHBsYW50c1swXS5wcm9kdWN0aW9uLFxyXG4gICAgICAgICAgICBwbGFudHM6IHBsYW50cyxcclxuICAgICAgICAgICAgbmV4dENvc3RzOiBtb2RpZmllcnMubmV4dENvc3RzLFxyXG4gICAgICAgICAgICBkYXRhUG9pbnRzUG90YXRvZXM6IGRhdGFQb2ludHNQb3RhdG9lcyxcclxuICAgICAgICAgICAgZGF0YVBvaW50c0ZyaWVzOiBkYXRhUG9pbnRzRnJpZXMsXHJcbiAgICAgICAgICAgIGZpbmFsTW9kaWZpZXJzOiBtb2RpZmllcnMsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBjYWxjU3RlcEhQUHJvZDogZnVuY3Rpb24gKHBsYW50c19pbnB1dCwgbW9kaWZpZXJzX2lucHV0KSB7XHJcbiAgICAgICAgbGV0IHBsYW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGxhbnRzX2lucHV0KSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldFBsYW50QkQocGxhbnRzW2ldKVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbW9kaWZpZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtb2RpZmllcnNfaW5wdXQpKTtcclxuICAgICAgICB0aGlzLnJlc2V0TW9kaWZpZXJzQkQobW9kaWZpZXJzKTtcclxuICAgICAgICBsZXQgc3RlcHMgPSBtb2RpZmllcnMuc3RlcHM7XHJcbiAgICAgICAgbGV0IHJlcyA9IC0xO1xyXG4gICAgICAgIGxldCBwb3RhdG9lU3RlcHMgPSBbXTtcclxuICAgICAgICBsZXQgZnJ5U3RlcHMgPSBbXTtcclxuICAgICAgICBsZXQgcnVubmluZ1RpbWUgPSAwO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVBvaW50c01heCA9IG1vZGlmaWVycy5tYXhTdGVwcyA/IG1vZGlmaWVycy5tYXhTdGVwcyA6IDEwMDtcclxuXHJcbiAgICAgICAgbGV0IHRpY2tSYXRlID0gbW9kaWZpZXJzLnRpY2tSYXRlID8gbW9kaWZpZXJzLnRpY2tSYXRlIDogNjAgKiAxO1xyXG4gICAgICAgIGxldCBkYXRhUG9pbnRUaHJlc2hvbGQgPSAobW9kaWZpZXJzX2lucHV0LnRpbWUgLyB0aWNrUmF0ZSkgPCBkYXRhUG9pbnRzTWF4ID8gMSA6IGhlbHBlci5yb3VuZEludCgobW9kaWZpZXJzX2lucHV0LnRpbWUgLyB0aWNrUmF0ZSkgLyBkYXRhUG9pbnRzTWF4KTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RlcHNbaV0udGltZSA9PT0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHJlcyA9IHRoaXMuY2FsY0hQUHJvZChwbGFudHMsIHtcclxuICAgICAgICAgICAgICAgIC4uLm1vZGlmaWVycyxcclxuICAgICAgICAgICAgICAgIG51bUF1dG9zOiBzdGVwc1tpXS5hdXRvcyxcclxuICAgICAgICAgICAgICAgIHRpbWU6IHN0ZXBzW2ldLnRpbWUsXHJcbiAgICAgICAgICAgICAgICBkYXRhUG9pbnRUaHJlc2hvbGQ6IGRhdGFQb2ludFRocmVzaG9sZCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogcG90YXRvZVN0ZXBzLmxlbmd0aCA+IDAgPyBwb3RhdG9lU3RlcHNbcG90YXRvZVN0ZXBzLmxlbmd0aCAtIDFdLnRpbWUgOiAwLFxyXG4gICAgICAgICAgICAgICAgcnVubmluZ1RpbWU6IHJ1bm5pbmdUaW1lLFxyXG4gICAgICAgICAgICAgICAgc2tpcEZpbmFsOiBpIDwgKHN0ZXBzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgdGlja1N0YXJ0OiBwb3RhdG9lU3RlcHMubGVuZ3RoID4gMCA/IHBvdGF0b2VTdGVwc1twb3RhdG9lU3RlcHMubGVuZ3RoIC0gMV0udGltZSArIGRhdGFQb2ludFRocmVzaG9sZCAqIHRpY2tSYXRlIDogMCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHJlcy5maW5hbE1vZGlmaWVycztcclxuICAgICAgICAgICAgbW9kaWZpZXJzLnRvdGFsUG90YXRvZXMgPSByZXMudG90YWxQb3RhdG9lcztcclxuICAgICAgICAgICAgcGxhbnRzID0gcmVzLnBsYW50cztcclxuICAgICAgICAgICAgcG90YXRvZVN0ZXBzID0gcG90YXRvZVN0ZXBzLmNvbmNhdChyZXMuZGF0YVBvaW50c1BvdGF0b2VzKTtcclxuICAgICAgICAgICAgZnJ5U3RlcHMgPSBmcnlTdGVwcy5jb25jYXQocmVzLmRhdGFQb2ludHNGcmllcylcclxuICAgICAgICAgICAgc3RlcHNbaV0ub2JqID0geyB0ZXh0OiBgUCR7c3RlcHMubGVuZ3RoIC0gaX0gZm9yICR7c3RlcHNbaV0udGltZX1gLCBudW1BdXRvczogc3RlcHNbaV0uYXV0b3MsIHRpbWU6IHN0ZXBzW2ldLnRpbWUgfVxyXG5cclxuICAgICAgICAgICAgcnVubmluZ1RpbWUgKz0gc3RlcHNbaV0udGltZTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5kYXRhUG9pbnRzUG90YXRvZXMgPSBwb3RhdG9lU3RlcHM7XHJcbiAgICAgICAgcmVzLmRhdGFQb2ludHNGcmllcyA9IGZyeVN0ZXBzO1xyXG4gICAgICAgIHJlcy5zdGVwcyA9IHN0ZXBzO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSxcclxuICAgIGNhbGNBc3NlbWJseUhQOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGxldCBib251cyA9IDE7XHJcblxyXG4gICAgICAgIGlmIChkYXRhPy5Bc3NlbWJsZXJDb2xsZWN0aW9uWzBdLkJvbnVzTGlzdFswXS5TdGFydGluZ0xldmVsIDw9IGRhdGE/LkFzc2VtYmxlckNvbGxlY3Rpb25bMF0uTGV2ZWwpIHtcclxuICAgICAgICAgICAgbGV0IGdhaW4gPSBkYXRhPy5Bc3NlbWJsZXJDb2xsZWN0aW9uWzBdLkJvbnVzTGlzdFswXS5HYWluO1xyXG4gICAgICAgICAgICBsZXQgbGV2ZWwgPSAoZGF0YT8uQXNzZW1ibGVyQ29sbGVjdGlvblswXS5MZXZlbCAtIGRhdGE/LkFzc2VtYmxlckNvbGxlY3Rpb25bMF0uQm9udXNMaXN0WzBdLlN0YXJ0aW5nTGV2ZWwpXHJcbiAgICAgICAgICAgIGJvbnVzID0gTWF0aC5wb3coMSArIGdhaW4sIGxldmVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib251cztcclxuICAgIH0sXHJcbiAgICBjYWxjQXNzZW1ibHk6IGZ1bmN0aW9uIChkYXRhLCBsaW5lX251bSwgYm9udXNfbnVtKSB7XHJcbiAgICAgICAgbGV0IGJvbnVzID0gMTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGE/LkFzc2VtYmxlckNvbGxlY3Rpb25bbGluZV9udW1dLkJvbnVzTGlzdFtib251c19udW1dLlN0YXJ0aW5nTGV2ZWwgPD0gZGF0YT8uQXNzZW1ibGVyQ29sbGVjdGlvbltsaW5lX251bV0uTGV2ZWwpIHtcclxuICAgICAgICAgICAgbGV0IGdhaW4gPSBkYXRhPy5Bc3NlbWJsZXJDb2xsZWN0aW9uW2xpbmVfbnVtXS5Cb251c0xpc3RbYm9udXNfbnVtXS5HYWluO1xyXG4gICAgICAgICAgICBsZXQgbGV2ZWwgPSBNYXRoLm1heCgwLCBkYXRhLkFzc2VtYmxlckNvbGxlY3Rpb25bbGluZV9udW1dLkxldmVsIC0gKGRhdGEuQXNzZW1ibGVyQ29sbGVjdGlvbltsaW5lX251bV0uQm9udXNMaXN0W2JvbnVzX251bV0uU3RhcnRpbmdMZXZlbCAtIDEpKTtcclxuICAgICAgICAgICAgYm9udXMgPSBNYXRoLnBvdygxICsgZ2FpbiwgbGV2ZWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJvbnVzO1xyXG4gICAgfSxcclxuICAgIGNhbGNBc3NlbWJseUxpbmU6IGZ1bmN0aW9uIChsaW5lLCBhbF9sZXZlbCkge1xyXG4gICAgICAgIGxldCBib251cyA9IDE7XHJcblxyXG4gICAgICAgIGlmIChsaW5lLlN0YXJ0aW5nTGV2ZWwgPD0gYWxfbGV2ZWwpIHtcclxuICAgICAgICAgICAgbGV0IGdhaW4gPSBsaW5lLkdhaW47XHJcbiAgICAgICAgICAgIGxldCBsZXZlbCA9IE1hdGgubWF4KDAsIGFsX2xldmVsIC0gKGxpbmUuU3RhcnRpbmdMZXZlbCAtIDEpKTtcclxuICAgICAgICAgICAgYm9udXMgPSBNYXRoLnBvdygxICsgZ2FpbiwgbGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYm9udXM7XHJcbiAgICB9LFxyXG4gICAgY2FsY0Fzc2VtYmx5Q29zdDogZnVuY3Rpb24gKGlkLCBkYXRhKSB7XHJcbiAgICAgICAgbGV0IGZpbmFsQ29zdCA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbCgtMSk7XHJcbiAgICAgICAgbGV0IGNvc3RSZWR1Y3Rpb24gPSBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwoZGF0YS5Bc3NlbWJseUNvc3RSZWR1Y3Rpb25Cb251cyk7XHJcbiAgICAgICAgbGV0IGFzc2VtYmx5ID0gZGF0YS5Bc3NlbWJsZXJDb2xsZWN0aW9uW2lkXTtcclxuICAgICAgICBsZXQgYmFzZUNvc3QgPSBtYXRoSGVscGVyLmNyZWF0ZURlY2ltYWwoYXNzZW1ibHkuQmFzZUNvc3QpXHJcblxyXG4gICAgICAgIGxldCBzdGVwMSA9IG1hdGhIZWxwZXIuYWRkRGVjaW1hbChcclxuICAgICAgICAgICAgYmFzZUNvc3QsXHJcbiAgICAgICAgICAgIG1hdGhIZWxwZXIubXVsdGlwbHlEZWNpbWFsKGJhc2VDb3N0LCBhc3NlbWJseS5MZXZlbClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBsZXQgdGVtcCA9IDEgKyBhc3NlbWJseS5Db3N0RXhwbyArIGFzc2VtYmx5LkNvc3RFeHBvICogYXNzZW1ibHkuTGV2ZWwgKiAwLjAyXHJcbiAgICAgICAgbGV0IHBvd1N0ZXBCYXNlID0gbWF0aEhlbHBlci5jcmVhdGVEZWNpbWFsKHRlbXApO1xyXG4gICAgICAgIGxldCBzdGVwMiA9IG1hdGhIZWxwZXIucG93KHBvd1N0ZXBCYXNlLCBhc3NlbWJseS5MZXZlbClcclxuICAgICAgICBmaW5hbENvc3QgPSBtYXRoSGVscGVyLmRpdmlkZURlY2ltYWwobWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoc3RlcDEsIHN0ZXAyKSwgY29zdFJlZHVjdGlvbilcclxuICAgICAgICAvLyBmaW5hbENvc3QgPVxyXG4gICAgICAgIC8vICAgICAobGV2ZWwgKyBzdGFydGluZ0Nvc3QgKiBsZXZlbClcclxuICAgICAgICAvLyAgICAgKiBwb3coMSArIGFzc2VtYmx5LkNvc3RFeHBvICsgYXNzZW1ibHkuQ29zdEV4cG8gKiBhc3NlbWJseS5CYXNlQ29zdCAqIDAuMDIsIGFzc2VtYmx5LkJhc2VDb3N0KVxyXG4gICAgICAgIC8vICAgICAvIGNvc3RSZWR1Y3Rpb247XHJcblxyXG4gICAgICAgIHJldHVybiBmaW5hbENvc3Q7XHJcbiAgICB9LFxyXG4gICAgY2FsY1Byb3RlaW5QZXJTZWNvbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgbGV0IHByb3RlaW5Cb251cyA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbChkYXRhLlByb3RlaW5Cb251cyk7XHJcbiAgICAgICAgbGV0IGZyZW5jaFRvdGFsID0gbWF0aEhlbHBlci5jcmVhdGVEZWNpbWFsKGRhdGEuRnJlbmNoRnJpZXNUb3RhbCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1hdGhIZWxwZXIuY3JlYXRlRGVjaW1hbCgxKTtcclxuICAgICAgICBpZiAoZnJlbmNoVG90YWwuZ3JlYXRlclRoYW4oMTAwMDAwMDAwMDAuMCkpIHtcclxuICAgICAgICAgICAgbGV0IGxvZzEgPSBtYXRoSGVscGVyLmxvZ0RlY2ltYWwoZnJlbmNoVG90YWwsIDUpO1xyXG4gICAgICAgICAgICBsb2cxID0gbWF0aEhlbHBlci5zdWJ0cmFjdERlY2ltYWwobG9nMSwgMTMuNDgpO1xyXG4gICAgICAgICAgICBsZXQgbG9nMiA9IG1hdGhIZWxwZXIubG9nRGVjaW1hbChmcmVuY2hUb3RhbCwgMTAuMCk7XHJcbiAgICAgICAgICAgIGxvZzIgPSBtYXRoSGVscGVyLnN1YnRyYWN0RGVjaW1hbChsb2cyLCA4KTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbWF0aEhlbHBlci5tdWx0aXBseURlY2ltYWwoXHJcbiAgICAgICAgICAgICAgICBtYXRoSGVscGVyLm11bHRpcGx5RGVjaW1hbChsb2cxLCBtYXRoSGVscGVyLnBvdygxLjEsIGxvZzIpKSxcclxuICAgICAgICAgICAgICAgIHByb3RlaW5Cb251cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgY2FsY0NvbnRhZ2lvbkJvbnVzOiBmdW5jdGlvbiAoZGF0YSwgaW5kZXgpIHtcclxuICAgICAgICBsZXQgYm9udXMgPSAxO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5HcmFzc2hvcHBlckNvbGxlY3Rpb25baW5kZXhdLkxvY2tlZCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGJhc2UgPSBoZWxwZXIuY2FsY1BPVyhkYXRhLkdyYXNzaG9wcGVyQ29sbGVjdGlvbltpbmRleF0uQmFzZUJvbnVzKTtcclxuICAgICAgICAgICAgbGV0IGxldmVsID0gaGVscGVyLmNhbGNQT1coZGF0YS5HcmFzc2hvcHBlckNvbGxlY3Rpb25baW5kZXhdLkxldmVsKTtcclxuICAgICAgICAgICAgYm9udXMgKj0gTWF0aC5wb3coMSArIGJhc2UgKiAwLjAxLCBsZXZlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib251cztcclxuICAgIH0sXHJcbiAgICBjYWxjRXhwZWRpdGlvbkhQOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGxldCBib251cyA9IDE7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLkV4cGVkaXRpb25zQ29sbGVjdGlvblsxNl0uTG9ja2VkID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgdGVtcCA9IGRhdGEuRXhwZWRpdGlvbnNDb2xsZWN0aW9uWzE2XTtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IE1hdGgucG93KDEgKyB0ZW1wLkJvbnVzUG93ZXIsIHRlbXAuUm9vbSAtIDEpO1xyXG4gICAgICAgICAgICBib251cyA9IHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJvbnVzO1xyXG4gICAgfSxcclxuICAgIGNhbGNVbmlxdWVIUEJvbnVzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGxldCBib251cyA9IDE7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5GYXJtaW5nU2hvcFVuaXF1ZUhlYWx0aHkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYm9udXMgKj0gKGRhdGEuRmFybWluZ1Nob3BVbmlxdWVIZWFsdGh5W2ldICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib251cztcclxuICAgIH0sXHJcbiAgICBjYWxjRnJpZXNIUEJvbnVzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGxldCBib251cyA9IDE7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbEZyaWVzID0gaGVscGVyLmNhbGNQT1coZGF0YS5GcmVuY2hGcmllc1RvdGFsKTtcclxuICAgICAgICBsZXQgc2hvcEZyeUJvbnVzID0gMC4wMSAqIGRhdGEuRmFybWluZ1Nob3BGcmllc0hlYWx0aHlCb251cyArIDAuMTtcclxuICAgICAgICBsZXQgY29udGFnaW9uRnJ5Qm9udXMgPSB0aGlzLmNhbGNDb250YWdpb25Cb251cyhkYXRhLCA1KTtcclxuICAgICAgICBsZXQgZnJ5Qm9udXMgPSBzaG9wRnJ5Qm9udXMgKiBjb250YWdpb25GcnlCb251cztcclxuICAgICAgICBib251cyAqPSAxICsgdG90YWxGcmllcyAqIGZyeUJvbnVzO1xyXG4gICAgICAgIHJldHVybiBib251cztcclxuICAgIH0sXHJcbiAgICBjYWxjUGV0SFBCb251czogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBsZXQgYm9udXMgPSAxO1xyXG5cclxuICAgICAgICBsZXQgYWN0aXZlUGV0cyA9IGRhdGEuRXF1aXBlZFBldElEO1xyXG4gICAgICAgIGxldCBhbGxQZXRzID0gZGF0YS5QZXRzQ29sbGVjdGlvbjtcclxuXHJcbiAgICAgICAgbGV0IG5lZWRlZE1hcCA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aXZlUGV0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlUGV0c1tpXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIG5lZWRlZE1hcFthY3RpdmVQZXRzW2ldXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUGV0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY3VyciA9IGFsbFBldHNbaV07XHJcbiAgICAgICAgICAgIGlmIChjdXJyLklEIGluIG5lZWRlZE1hcCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbGV0IHJhbmsgPSBjdXJyLlJhbms7XHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgYm9udXNJbm5lciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjdXJyLkJvbnVzTGlzdC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBib251c0lubmVyID0gY3Vyci5Cb251c0xpc3Rbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvbnVzSW5uZXIuSUQgPT09IDIzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3B1YmxpYyBkb3VibGUgR2V0UGV0Qm9udXMoaW50IEJvbnVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyhNYXRoLlBvdygxLjAgKyBwZXREYXRhQm9udXMuR2FpbiwgcGV0RGF0YS5MZXZlbCkgLSAxLjAgKyBNYXRoLk1heCgwLjAsIChNYXRoLkxvZyhwZXREYXRhLkxldmVsICsgMSwgMS4wMTI1KSAqIDAuMDA1IC0gMS4wKSAqIDAuNSkpICogKDEuMCArIE1hdGguTG9nKHBldERhdGEuUmFuayArIDEsIDEuMDc1KSAqIDAuMDA1KSAqIDAuNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyh4MSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB4MykgKiAoeDUpICogMC41XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgTWF0aC5Qb3coMS4wICsgcGV0RGF0YUJvbnVzLkdhaW4sIHBldERhdGEuTGV2ZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAtIDEuMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyBNYXRoLk1heChcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAwLjAsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIChNYXRoLkxvZyhwZXREYXRhLkxldmVsICsgMSwgMS4wMTI1KSAqIDAuMDA1IC0gMS4wKSAqIDAuNSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHgxID0gTWF0aC5wb3coMS4wICsgYm9udXNJbm5lci5HYWluLCBjdXJyLkxldmVsKSAtIDEuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHgyID0gaGVscGVyLmNhbGN1bGF0ZUxvZ2FyaXRobSgxLjAxMjUsIGN1cnIuTGV2ZWwgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHgzID0gTWF0aC5tYXgoMC4wLCAoeDIgKiAwLjAwNSAtIDEuMCkgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeDQgPSBoZWxwZXIuY2FsY3VsYXRlTG9nYXJpdGhtKDEuMDc1LCBjdXJyLlJhbmsgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHg1ID0gMS4wICsgeDQgKiAwLjAwNTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b3QxID0gKHgxICsgeDMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG90MiA9IHRvdDEgKiB4NTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvdDMgPSB0b3QyICogMC41O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9udXMgKz0gdG90MztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib251cztcclxuICAgIH0sXHJcbiAgICBjYWxjSFBCb251czogZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcblxyXG4gICAgICAgIC8vIGxldCBib251cyA9IDE7XHJcbiAgICAgICAgLy8gbGV0IGFzc2VtYmx5SFAgPSB0aGlzLmNhbGNBc3NlbWJseUhQKGRhdGEpO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IGFzc2VtYmx5SFA7XHJcblxyXG4gICAgICAgIC8vIGxldCBjb250YWdpb25IUCA9IHRoaXMuY2FsY0NvbnRhZ2lvbkJvbnVzKGRhdGEsIDApO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IGNvbnRhZ2lvbkhQO1xyXG5cclxuICAgICAgICAvLyBsZXQgc291bEJvbnVzID0gTWF0aC5wb3coMS4yNSwgZGF0YS5Tb3VsRmVydGlsaXplcik7XHJcbiAgICAgICAgLy8gYm9udXMgKj0gc291bEJvbnVzO1xyXG5cclxuICAgICAgICAvLyBsZXQgZXhwZWRpdGlvbkJvbnVzID0gdGhpcy5jYWxjRXhwZWRpdGlvbkhQKGRhdGEpO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IGV4cGVkaXRpb25Cb251cztcclxuXHJcbiAgICAgICAgLy8gbGV0IEZhcm1pbmdTaG9wUGxhbnRIZWFsdGh5UG90YXRvRWFybmluZyA9IE1hdGgucG93KDEuMSwgZGF0YS5GYXJtaW5nU2hvcFBsYW50SGVhbHRoeVBvdGF0b0Vhcm5pbmcpO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IEZhcm1pbmdTaG9wUGxhbnRIZWFsdGh5UG90YXRvRWFybmluZztcclxuXHJcbiAgICAgICAgLy8gbGV0IHVuaXF1ZUhQQm9udXMgPSB0aGlzLmNhbGNVbmlxdWVIUEJvbnVzKGRhdGEpO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IHVuaXF1ZUhQQm9udXM7XHJcblxyXG4gICAgICAgIC8vIGxldCBmcnlIUEJvbnVzID0gdGhpcy5jYWxjRnJpZXNIUEJvbnVzKGRhdGEpO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IGZyeUhQQm9udXM7XHJcblxyXG4gICAgICAgIC8vIGxldCBwZXRIUEJvbnVzID0gdGhpcy5jYWxjUGV0SFBCb251cyhkYXRhKTtcclxuICAgICAgICAvLyBib251cyAqPSBwZXRIUEJvbnVzO1xyXG5cclxuICAgICAgICAvLyBsZXQgcmVzaWR1ZUhQQm9udXMgPSBNYXRoLnBvdygxLjA1LCBkYXRhLkNvd1Nob3BIZWFsdGh5UG90YXRvID8gZGF0YS5Db3dTaG9wSGVhbHRoeVBvdGF0byA6IDApO1xyXG4gICAgICAgIC8vIGJvbnVzICo9IHJlc2lkdWVIUEJvbnVzO1xyXG5cclxuICAgICAgICAvLyAvLygxICsgXHJcbiAgICAgICAgLy8gLy8gbWlsazogXHJcbiAgICAgICAgLy8gbGV0IHN0ZXAxID0gTWF0aC5tYXgoMCxcclxuICAgICAgICAvLyAgICAgaGVscGVyLmNhbGNQT1coZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9NaWxrQkQpID49IDFFKzIwID9cclxuICAgICAgICAvLyAgICAgICAgIGhlbHBlci5jYWxjdWxhdGVMb2dhcml0aG0oTWF0aC5tYXgoMS4wMDEsIGhlbHBlci5jYWxjdWxhdGVMb2dhcml0aG0oaGVscGVyLmNhbGNQT1coZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9NaWxrQkQpICsgMSwgMS4wMDEpIC0gMTAuMCksIGhlbHBlci5jYWxjUE9XKGRhdGEuQm9vc3RIZWFsdGh5UG90YXRvTWlsa0JEKSArIDEpXHJcbiAgICAgICAgLy8gICAgICAgICA6XHJcbiAgICAgICAgLy8gICAgICAgICAwXHJcbiAgICAgICAgLy8gKTtcclxuXHJcblxyXG4gICAgICAgIC8vIGxldCB0ZW1wMiA9ICgxLjAgKyBkYXRhLkJyZXdpbmdIZWFsdGh5UG90YXRvTGV2ZWwgKiAwLjAwNSkgKiAoKGhlbHBlci5jYWxjUE9XKGRhdGEuQm9vc3RIZWFsdGh5UG90YXRvQ2FsY2l1bUJEKSA+PSAxRSsyMClcclxuICAgICAgICAvLyAgICAgPyAoTWF0aC5wb3coMS4wNSwgaGVscGVyLmNhbGN1bGF0ZUxvZ2FyaXRobShNYXRoLm1heCgxLjAwMSwgaGVscGVyLmNhbGN1bGF0ZUxvZ2FyaXRobSgxLjAwMSwgaGVscGVyLmNhbGNQT1coZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9DYWxjaXVtQkQpICsgMSkgLSAxMC4wKSwgaGVscGVyLmNhbGNQT1coZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9DYWxjaXVtQkQpICsgMSkpIC0gMC4yMjgpXHJcbiAgICAgICAgLy8gICAgIDogMSlcclxuICAgICAgICAvLyBsZXQgdGVtcHkgPSAoTWF0aC5wb3coMS4wNSwgaGVscGVyLmNhbGN1bGF0ZUxvZ2FyaXRobShoZWxwZXIuY2FsY1BPVyhNYXRoLm1heCgxLjAwMSwgaGVscGVyLmNhbGN1bGF0ZUxvZ2FyaXRobSgxLjAwMSwgaGVscGVyLmNhbGNQT1coZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9DYWxjaXVtQkQpICsgMSkgLSAxMC4wKSwgZGF0YS5Cb29zdEhlYWx0aHlQb3RhdG9DYWxjaXVtQkQpICsgMSkpIC0gMC4yMjgpO1xyXG5cclxuICAgICAgICAvLyBsZXQgdGVtcDMgPSBoZWxwZXIuY2FsY3VsYXRlTG9nYXJpdGhtKGRhdGEuQm9vc3RIZWFsdGh5UG90YXRvTWlsa0JEICsgMSwgMS4wMDEpXHJcbiAgICAgICAgLy8gLy9icmV3aW5nOiAgXHJcbiAgICAgICAgLy8gLy9mZXJtZW50aW5nOiAoMS4wICsgR00uUEQuSGVhbHRoeVBvdGF0b1BldFJhbmtFeHBGZXJtZW50aW5nTGV2ZWwgKiAwLjAwMjUpKSlcclxuICAgICAgICAvLyBsZXQgbWlsa0hQQm9udXMgPSBoZWxwZXIuY2FsY1BPVyhkYXRhLkJvb3N0SGVhbHRoeVBvdGF0b01pbGtCRCk7XHJcbiAgICAgICAgLy8gLy8gYm9udXMgKj0gbWlsa0hQQm9udXM7XHJcblxyXG4gICAgICAgIGxldCBsZWdpdEJvbnVzID0gaGVscGVyLmNhbGNQT1coZGF0YS5IZWFsdGh5UG90YXRvQm9udXMpO1xyXG4gICAgICAgIHJldHVybiBsZWdpdEJvbnVzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmYXJtaW5nSGVscGVyOyJdLCJuYW1lcyI6WyJoZWxwZXIiLCJtYXRoSGVscGVyIiwiZmFybWluZ0hlbHBlciIsImZpbmRNdWx0aXBsaWVyc1dpdGhNaW5QZXJjZW50YWdlIiwic3VtIiwibnVtYmVycyIsIm1pblBlcmNlbnRhZ2UiLCJtdWx0aXBsaWVycyIsImNvdW50IiwiYmFja3RyYWNrIiwiaW5kZXgiLCJjdXJyZW50U3VtIiwiY3VycmVudE11bHRpcGxpZXJzIiwibGVuZ3RoIiwicHJvZHVjdFN1bSIsInJlZHVjZSIsImFjYyIsIm11bHRpcGxpZXIiLCJpIiwicHVzaCIsIm1heCIsIk1hdGgiLCJmbG9vciIsInRlbXBTdW0iLCJjb25zb2xlIiwibG9nIiwiY2FsY0dyb3d0aFRpbWUiLCJwbGFudCIsIm1vZGlmaWVycyIsImdyb3dpbmdCb251cyIsImNyZWF0ZURlY2ltYWwiLCJvcmlnaW5hbFNob3BHcm93aW5nQm9udXMiLCJkaXZpZGVEZWNpbWFsIiwib3JpZ2luYWxTaG9wR3Jvd2luZ0xldmVsIiwibXVsdGlwbHlEZWNpbWFsIiwic2hvcEdyb3dpbmdTcGVlZCIsInRvTnVtYmVyIiwibnVtIiwiVGltZU5lZWRlZCIsInByZXN0aWdlQm9udXMiLCJjYWxjUGxhbnRIYXJ2ZXN0Iiwicm91bmRJbnQiLCJSYW5rIiwicG93IiwicHJlc3RpZ2UiLCJtYW51YWxIYXJ2ZXN0Qm9udXMiLCJjYWxjU2hvcFByb2RCb251cyIsIm1vZGlmaWVyc19pbnB1dCIsInNob3BMZXZlbCIsIkZhcm1pbmdTaG9wUGxhbnRUb3RhbFByb2R1Y3Rpb24iLCJjYWxjUHJvZE91dHB1dCIsInBsYW50X2lucHV0IiwiVG90YWxDcmVhdGVkIiwidG90YWxNYWRlIiwic2hvcFByb2RCb251cyIsIlBsYW50VG90YWxQcm9kdWN0aW9uQm9udXMiLCJvcmlnaW5hbFNob3BQcm9kQm9udXMiLCJvcmlnaW5hbFNob3BQcm9kTGV2ZWwiLCJwbGFudE11bHQiLCJmdXR1cmVNdWx0Iiwib3V0cHV0IiwiSUQiLCJocEJvbnVzIiwiY2FsY0ZyeU91dHB1dCIsInBvdGF0b2VzIiwibGVzc1RoYW4iLCJ0aW1lckJvbnVzIiwidGltZVBhc3NlZCIsInN0ZXAxIiwic3RlcDIiLCJzdGVwMyIsInN0ZXA0IiwibG9nMTAiLCJsb2dEZWNpbWFsIiwic3VidHJhY3REZWNpbWFsIiwibG9nMiIsImxvZzMiLCJpbnRlcjEiLCJpbnRlcjIiLCJmcmVuY2hCb251cyIsImZyeUJvbnVzIiwic3RlcDUiLCJjYWxjQ2FycnlPdmVyRVhQX09MRCIsIm51bUF1dG9zIiwiZXhwVGljayIsImxlZnRPdmVyIiwibnVtTGV2ZWxzIiwiaW5kaXZpZHVhbEVYUCIsInRpY2tzTmVlZGVkRVhQIiwiY2VpbCIsInJlcUV4cCIsImN1ckV4cCIsImZ1dHVyZVJlcSIsImNhbGNDYXJyeU92ZXJFWFAiLCJudW1FWFAiLCJjYWxjRVhQQm9udXMiLCJvcmlnaW5hbEJvbnVzIiwib3JpZ2luYWxSYW5rTGV2ZWxCb251cyIsIm9yaWdpbmFsTGV2ZWwiLCJvcmlnaW5hbFNob3BSYW5rTGV2ZWwiLCJjdXJyZW50U2hvcExldmVsIiwic2hvcFJhbmtMZXZlbCIsIm9yaWdpbmFsUG90aW9uIiwib3JpZ2luYWxQb3Rpb25SYW5rIiwiY3VycmVudFBvdGlvbiIsInBvdGlvblJhbmsiLCJleHBCb251cyIsImZ1dHVyZU11bHRCRCIsIm1hbnVhbEhhcnZlc3RGb3JtdWxhIiwiY3JlYXRlZCIsImNhbGNGdXR1cmVNdWx0Iiwic3RyaW5nIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicmVtYWluaW5nVGltZSIsInRpbWUiLCJudW1BdXRvIiwibmV3RXhwQm9udXMiLCJncm93dGhUaW1lIiwibmV3T3V0UHV0IiwicHJvZHVjdGlvbiIsInRpbWVUb0xldmVsIiwiY2FsY1RpbWVUaWxsTGV2ZWwiLCJlbGFwc2VkVGltZSIsInJhbmtJbmNyZWFzZSIsIm51bUhhcnZlc3RzIiwidG9DcmVhdGUiLCJwZXJIYXJ2ZXN0IiwiYWRkRGVjaW1hbCIsImdhaW5lZEVYUCIsInRvdGFsRXhwIiwiSW5maW5pdHkiLCJyZW1FeHAiLCJ0aWNrc1RpbGxMZXZlbCIsImdldE5leHRTaG9wQ29zdHMiLCJkYXRhIiwicHJvZENvc3QiLCJwcm9kTGV2ZWwiLCJzaG9wUHJvZExldmVsIiwiZ3Jvd3RoQ29zdCIsImdyb3d0aExldmVsIiwiRmFybWluZ1Nob3BQbGFudEdyb3dpbmdTcGVlZCIsImV4cENvc3QiLCJleHBMZXZlbCIsIkZhcm1pbmdTaG9wUGxhbnRSYW5rRXhwRWFybmVkIiwidGVtcDEiLCJ0ZW1wMiIsInRlbXAzIiwidGVtcDQiLCJjYWxjTWF4UHJlc3RpZ2UiLCJzdGFydCIsInJ1bm5pbmdIYXJ2ZXN0cyIsImZsYWciLCJyZXF1aXJlZFBlclBpYyIsInJlcXVpcmVkSGFydmVzdHMiLCJncmVhdGVyVGhhbk9yRXF1YWxUbyIsImNhbGNUaW1lVGlsbFByZXN0aWdlIiwicmVzZXRQbGFudEJEIiwicmVzZXRNb2RpZmllcnNCRCIsInByZXN0aWdlZCIsInRvdGFsVGltZSIsInJlbWFpbmluZ0hhcnZlc3RzIiwidGltZVRpbGxQcmVzdGlnZSIsImdyZWF0ZXJUaGFuIiwidGlja3MiLCJyYW5rUmVzIiwibWFudGlzc2EiLCJjdXJQb3RhdG9lcyIsInRvdGFsUG90YXRvZXMiLCJjYWxjSFBQcm9kIiwicGxhbnRzX2lucHV0IiwicGxhbnRzIiwibmV4dENvc3RzIiwic2ltdWxhdGlvblRpbWUiLCJzdGFydFRpbWUiLCJydW5uaW5nVGltZSIsImRhdGFQb2ludHNNYXgiLCJtYXhTdGVwcyIsInRpY2tTdGFydCIsInRpY2tSYXRlIiwiZGF0YVBvaW50VGhyZXNob2xkIiwiZGF0YVBvaW50c1BvdGF0b2VzIiwiZGF0YVBvaW50c0ZyaWVzIiwiY3VyclBvdGF0b2VzIiwicHJldlBsYW50c1Byb2QiLCJBcnJheSIsImZpbGwiLCJmaW5hbFBhc3MiLCJwcm9kTXVsdCIsImZyeU11bHQiLCJIUEluaXRpYWwiLCJqIiwiY3VyciIsInRvQWRkIiwicmVzIiwiZm9yY2VSYW5rUG90aW9uIiwicG90aW9uUmFua1RpbWUiLCJjdXJUaW1lIiwiSFBUb0FkZCIsImF1dG9CdXlQQkMiLCJ1cGRhdGVDb3N0cyIsImJvdWdodFVwZ3JhZGUiLCJzaG9wUmFua0VYUCIsInNraXBGaW5hbCIsInBhc3NlZFRpbWUiLCJ0aW1lSW5jcmVhc2UiLCJpbmNyZWFzZSIsInRydWVUaW1lSW5jcmVhc2UiLCJmaW5hbFBvdGF0b2VzIiwibmV3T2JqIiwicG90YXRvZVByb2R1Y3Rpb24iLCJmaW5hbE1vZGlmaWVycyIsImNhbGNTdGVwSFBQcm9kIiwic3RlcHMiLCJwb3RhdG9lU3RlcHMiLCJmcnlTdGVwcyIsImF1dG9zIiwiY29uY2F0Iiwib2JqIiwidGV4dCIsImNhbGNBc3NlbWJseUhQIiwiYm9udXMiLCJBc3NlbWJsZXJDb2xsZWN0aW9uIiwiQm9udXNMaXN0IiwiU3RhcnRpbmdMZXZlbCIsIkxldmVsIiwiZ2FpbiIsIkdhaW4iLCJsZXZlbCIsImNhbGNBc3NlbWJseSIsImxpbmVfbnVtIiwiYm9udXNfbnVtIiwiY2FsY0Fzc2VtYmx5TGluZSIsImxpbmUiLCJhbF9sZXZlbCIsImNhbGNBc3NlbWJseUNvc3QiLCJpZCIsImZpbmFsQ29zdCIsImNvc3RSZWR1Y3Rpb24iLCJBc3NlbWJseUNvc3RSZWR1Y3Rpb25Cb251cyIsImFzc2VtYmx5IiwiYmFzZUNvc3QiLCJCYXNlQ29zdCIsInRlbXAiLCJDb3N0RXhwbyIsInBvd1N0ZXBCYXNlIiwiY2FsY1Byb3RlaW5QZXJTZWNvbmQiLCJwcm90ZWluQm9udXMiLCJQcm90ZWluQm9udXMiLCJmcmVuY2hUb3RhbCIsIkZyZW5jaEZyaWVzVG90YWwiLCJyZXN1bHQiLCJsb2cxIiwiY2FsY0NvbnRhZ2lvbkJvbnVzIiwiR3Jhc3Nob3BwZXJDb2xsZWN0aW9uIiwiTG9ja2VkIiwiYmFzZSIsImNhbGNQT1ciLCJCYXNlQm9udXMiLCJjYWxjRXhwZWRpdGlvbkhQIiwiRXhwZWRpdGlvbnNDb2xsZWN0aW9uIiwiQm9udXNQb3dlciIsIlJvb20iLCJjYWxjVW5pcXVlSFBCb251cyIsIkZhcm1pbmdTaG9wVW5pcXVlSGVhbHRoeSIsImNhbGNGcmllc0hQQm9udXMiLCJ0b3RhbEZyaWVzIiwic2hvcEZyeUJvbnVzIiwiRmFybWluZ1Nob3BGcmllc0hlYWx0aHlCb251cyIsImNvbnRhZ2lvbkZyeUJvbnVzIiwiY2FsY1BldEhQQm9udXMiLCJhY3RpdmVQZXRzIiwiRXF1aXBlZFBldElEIiwiYWxsUGV0cyIsIlBldHNDb2xsZWN0aW9uIiwibmVlZGVkTWFwIiwiYm9udXNJbm5lciIsIngxIiwieDIiLCJjYWxjdWxhdGVMb2dhcml0aG0iLCJ4MyIsIng0IiwieDUiLCJ0b3QxIiwidG90MiIsInRvdDMiLCJjYWxjSFBCb251cyIsImxlZ2l0Qm9udXMiLCJIZWFsdGh5UG90YXRvQm9udXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./src/app/util/farmingHelper.js\n");

/***/ }),

/***/ "(ssr)/./src/app/util/helper.js":
/*!********************************!*\
  !*** ./src/app/util/helper.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar helper = {\n    roundTwoDecimal: function(number) {\n        return Math.round((number + Number.EPSILON) * 100) / 100;\n    },\n    roundThreeDecimal: function(number) {\n        return Math.round((number + Number.EPSILON) * 1000) / 1000;\n    },\n    roundFiveDecimal: function(number) {\n        return Math.round((number + Number.EPSILON) * 100000) / 100000;\n    },\n    roundInt: function(num) {\n        return Math.round((num + Number.EPSILON) * 1) / 1;\n    },\n    calculateLogarithm: function(base, x) {\n        var a = Math.log(x);\n        var b = Math.log(base);\n        return a / b;\n    },\n    calcPOW: function(val) {\n        return val.mantissa * Math.pow(10, val.exponent);\n    },\n    secondsToStringWithS: function(seconds) {\n        let string = ``;\n        let numDays = 0;\n        let numHours = 0;\n        let numMinutes = 0;\n        let numSeconds = 0;\n        numDays = Math.floor(seconds / (3600 * 24));\n        numHours = Math.floor(seconds % (3600 * 24) / 3600);\n        numMinutes = Math.floor(seconds % 3600 / 60);\n        numSeconds = this.roundInt(seconds % (3600 * 24) % 60);\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\n            return `` + numDays;\n        }\n        if (numSeconds === 60) {\n            numSeconds = 0;\n            numMinutes++;\n        }\n        if (numMinutes === 60) {\n            numMinutes = 0;\n            numHours++;\n        }\n        if (numHours === 24) {\n            numHours = 0;\n            numDays++;\n        }\n        if (numDays > 0) {\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`;\n        }\n        if (numHours > 0) {\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h:`;\n        }\n        if (numMinutes > 0) {\n            string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m:`;\n        }\n        if (numSeconds > 0) {\n            string = string + `${numSeconds < 10 ? `0` + numSeconds : numSeconds}s`;\n        } else {\n            string = string + \"0s\";\n        }\n        return string;\n    },\n    secondsToString: function(seconds) {\n        let string = ``;\n        let numDays = 0;\n        let numHours = 0;\n        let numMinutes = 0;\n        numDays = Math.floor(seconds / (3600 * 24));\n        numHours = Math.floor(seconds % (3600 * 24) / 3600);\n        numMinutes = this.roundInt(seconds % 3600 / 60);\n        if (numMinutes === 60) {\n            numMinutes = 0;\n            numHours++;\n        }\n        if (numHours === 24) {\n            numHours = 0;\n            numDays++;\n        }\n        if (numDays == Number.POSITIVE_INFINITY || numDays == Number.NEGATIVE_INFINITY) {\n            return `` + numDays;\n        }\n        if (numDays > 0) {\n            string = string + `${numDays < 10 ? `0` + numDays : numDays}d:`;\n            if (numHours === 0) {\n                string = string + `00h`;\n            }\n        }\n        if (numHours > 0 || numHours === 0 && numDays === 0) {\n            string = string + `${numHours < 10 ? `0` + numHours : numHours}h`;\n        }\n        if (numDays === 0) {\n            string = string + `:`;\n            if (numMinutes > 0) {\n                string = string + `${numMinutes < 10 ? `0` + numMinutes : numMinutes}m`;\n            } else {\n                string = string + `0s`;\n            }\n        }\n        return string;\n    },\n    bonusColorMap: {\n        // 1001: { color: 'maroon' },\n        // 1002: { color: 'orange' },\n        // 1003: { color: 'purple' },\n        1009: {\n            color: \"cyan\"\n        },\n        1010: {\n            color: \"maroon\"\n        },\n        1011: {\n            color: \"purple\"\n        },\n        1012: {\n            color: \"yellow\"\n        },\n        1013: {\n            color: \"red\"\n        },\n        1014: {\n            color: \"blue\"\n        },\n        1015: {\n            color: \"gray\"\n        },\n        1016: {\n            color: \"green\"\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/app/util/helper.js\n");

/***/ }),

/***/ "(ssr)/./src/app/util/math.js":
/*!******************************!*\
  !*** ./src/app/util/math.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! break_infinity.js */ \"(ssr)/./node_modules/break_infinity.js/dist/break_infinity.esm.js\");\n\nvar helper = {\n    createDecimal: function(number) {\n        let deci = number.mantissa || number.mantissa === 0 ? new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](`${number.mantissa}e${number.exponent}`) : new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](number);\n        return deci;\n    },\n    multiplyDecimal: function(a, b) {\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\n        return a.times(b);\n    },\n    divideDecimal: function(a, b) {\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\n        return a.dividedBy(b);\n    },\n    addDecimal: function(a, b) {\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\n        return a.plus(b);\n    },\n    subtractDecimal: function(a, b) {\n        a = a.mantissa || a.mantissa === 0 ? a : this.createDecimal(a);\n        return a.minus(b);\n    },\n    logDecimal: function(number, base) {\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\n        return this.createDecimal(number.log(base));\n    },\n    pow: function(number, exp) {\n        number = number.mantissa || number.mantissa === 0 ? number : this.createDecimal(number);\n        return number.pow(exp);\n    },\n    min: function(number1, number2) {\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\n        if (number1.greaterThan(number2)) {\n            return number2;\n        }\n        return number1;\n    },\n    max: function(number1, number2) {\n        number1 = number1.mantissa || number1.mantissa === 0 ? number1 : this.createDecimal(number1);\n        number2 = number2.mantissa || number2.mantissa === 0 ? number2 : this.createDecimal(number2);\n        if (number1.greaterThan(number2)) {\n            return number1;\n        }\n        return number2;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cGxhbm5lci8uL3NyYy9hcHAvdXRpbC9tYXRoLmpzPzc3ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERlY2ltYWwgZnJvbSAnYnJlYWtfaW5maW5pdHkuanMnO1xyXG52YXIgaGVscGVyID0ge1xyXG4gICAgY3JlYXRlRGVjaW1hbDogZnVuY3Rpb24gKG51bWJlcikge1xyXG4gICAgICAgIGxldCBkZWNpID0gbnVtYmVyLm1hbnRpc3NhIHx8IG51bWJlci5tYW50aXNzYSA9PT0gMCA/IG5ldyBEZWNpbWFsKGAke251bWJlci5tYW50aXNzYX1lJHtudW1iZXIuZXhwb25lbnR9YCkgOiBuZXcgRGVjaW1hbChudW1iZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVjaTtcclxuICAgIH0sXHJcbiAgICBtdWx0aXBseURlY2ltYWw6IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgYSA9IGEubWFudGlzc2EgfHwgYS5tYW50aXNzYSA9PT0gMCA/IGEgOiB0aGlzLmNyZWF0ZURlY2ltYWwoYSk7XHJcbiAgICAgICAgcmV0dXJuIGEudGltZXMoYik7XHJcbiAgICB9LFxyXG4gICAgZGl2aWRlRGVjaW1hbDogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBhID0gYS5tYW50aXNzYSB8fCBhLm1hbnRpc3NhID09PSAwID8gYSA6IHRoaXMuY3JlYXRlRGVjaW1hbChhKTtcclxuICAgICAgICByZXR1cm4gYS5kaXZpZGVkQnkoYik7XHJcbiAgICB9LFxyXG4gICAgYWRkRGVjaW1hbDogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBhID0gYS5tYW50aXNzYSB8fCBhLm1hbnRpc3NhID09PSAwID8gYSA6IHRoaXMuY3JlYXRlRGVjaW1hbChhKTtcclxuICAgICAgICByZXR1cm4gYS5wbHVzKGIpO1xyXG4gICAgfSxcclxuICAgIHN1YnRyYWN0RGVjaW1hbDogZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBhID0gYS5tYW50aXNzYSB8fCBhLm1hbnRpc3NhID09PSAwID8gYSA6IHRoaXMuY3JlYXRlRGVjaW1hbChhKTtcclxuICAgICAgICByZXR1cm4gYS5taW51cyhiKTtcclxuICAgIH0sXHJcbiAgICBsb2dEZWNpbWFsOiBmdW5jdGlvbiAobnVtYmVyLCBiYXNlKSB7XHJcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyLm1hbnRpc3NhIHx8IG51bWJlci5tYW50aXNzYSA9PT0gMCA/IG51bWJlciA6IHRoaXMuY3JlYXRlRGVjaW1hbChudW1iZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZURlY2ltYWwobnVtYmVyLmxvZyhiYXNlKSk7XHJcbiAgICB9LFxyXG4gICAgcG93OiBmdW5jdGlvbiAobnVtYmVyLCBleHApIHtcclxuICAgICAgICBudW1iZXIgPSBudW1iZXIubWFudGlzc2EgfHwgbnVtYmVyLm1hbnRpc3NhID09PSAwID8gbnVtYmVyIDogdGhpcy5jcmVhdGVEZWNpbWFsKG51bWJlcik7XHJcbiAgICAgICAgcmV0dXJuIG51bWJlci5wb3coZXhwKTtcclxuICAgIH0sXHJcbiAgICBtaW46IGZ1bmN0aW9uIChudW1iZXIxLCBudW1iZXIyKSB7XHJcbiAgICAgICAgbnVtYmVyMSA9IG51bWJlcjEubWFudGlzc2EgfHwgbnVtYmVyMS5tYW50aXNzYSA9PT0gMCA/IG51bWJlcjEgOiB0aGlzLmNyZWF0ZURlY2ltYWwobnVtYmVyMSk7XHJcbiAgICAgICAgbnVtYmVyMiA9IG51bWJlcjIubWFudGlzc2EgfHwgbnVtYmVyMi5tYW50aXNzYSA9PT0gMCA/IG51bWJlcjIgOiB0aGlzLmNyZWF0ZURlY2ltYWwobnVtYmVyMik7XHJcblxyXG4gICAgICAgIGlmIChudW1iZXIxLmdyZWF0ZXJUaGFuKG51bWJlcjIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVtYmVyMTtcclxuICAgIH0sXHJcbiAgICBtYXg6IGZ1bmN0aW9uIChudW1iZXIxLCBudW1iZXIyKSB7XHJcbiAgICAgICAgbnVtYmVyMSA9IG51bWJlcjEubWFudGlzc2EgfHwgbnVtYmVyMS5tYW50aXNzYSA9PT0gMCA/IG51bWJlcjEgOiB0aGlzLmNyZWF0ZURlY2ltYWwobnVtYmVyMSk7XHJcbiAgICAgICAgbnVtYmVyMiA9IG51bWJlcjIubWFudGlzc2EgfHwgbnVtYmVyMi5tYW50aXNzYSA9PT0gMCA/IG51bWJlcjIgOiB0aGlzLmNyZWF0ZURlY2ltYWwobnVtYmVyMik7XHJcblxyXG4gICAgICAgIGlmIChudW1iZXIxLmdyZWF0ZXJUaGFuKG51bWJlcjIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVtYmVyMjtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGhlbHBlcjsiXSwibmFtZXMiOlsiRGVjaW1hbCIsImhlbHBlciIsImNyZWF0ZURlY2ltYWwiLCJudW1iZXIiLCJkZWNpIiwibWFudGlzc2EiLCJleHBvbmVudCIsIm11bHRpcGx5RGVjaW1hbCIsImEiLCJiIiwidGltZXMiLCJkaXZpZGVEZWNpbWFsIiwiZGl2aWRlZEJ5IiwiYWRkRGVjaW1hbCIsInBsdXMiLCJzdWJ0cmFjdERlY2ltYWwiLCJtaW51cyIsImxvZ0RlY2ltYWwiLCJiYXNlIiwibG9nIiwicG93IiwiZXhwIiwibWluIiwibnVtYmVyMSIsIm51bWJlcjIiLCJncmVhdGVyVGhhbiIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/app/util/math.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor-chunks/break_infinity.js","vendor-chunks/pad-end"], () => (__webpack_require__("(ssr)/./src/app/farming/farmingWorker.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			"_ssr_src_app_farming_farmingWorker_js-_610d6": 1
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 			__webpack_require__.O();
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e("vendor-chunks/break_infinity.js");
/******/ 			__webpack_require__.e("vendor-chunks/pad-end");
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;