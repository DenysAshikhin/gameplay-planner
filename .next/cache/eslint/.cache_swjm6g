[{"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js":"1","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx":"2","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx":"3","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js":"4","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx":"5","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js":"6","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\new\\page.js":"7","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js":"8","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js":"9","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx":"10","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx":"11","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js":"12","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx":"13","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js":"14","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js":"15","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx":"16","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js":"17","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js":"18","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx":"19","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx":"20","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js":"21","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js":"22","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js":"23","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js":"24"},{"size":9592,"mtime":1698849505218,"results":"25","hashOfConfig":"26"},{"size":18334,"mtime":1698886688856,"results":"27","hashOfConfig":"26"},{"size":12583,"mtime":1698849505220,"results":"28","hashOfConfig":"26"},{"size":158826,"mtime":1698886797423,"results":"29","hashOfConfig":"26"},{"size":7741,"mtime":1698854948408,"results":"30","hashOfConfig":"26"},{"size":1393,"mtime":1698849505283,"results":"31","hashOfConfig":"26"},{"size":387,"mtime":1698849505285,"results":"32","hashOfConfig":"26"},{"size":5972,"mtime":1698882407091,"results":"33","hashOfConfig":"26"},{"size":1561,"mtime":1698849505292,"results":"34","hashOfConfig":"26"},{"size":3362,"mtime":1698849505295,"results":"35","hashOfConfig":"26"},{"size":315,"mtime":1698849505297,"results":"36","hashOfConfig":"26"},{"size":39995,"mtime":1698849505300,"results":"37","hashOfConfig":"26"},{"size":1500,"mtime":1698885892879,"results":"38","hashOfConfig":"26"},{"size":3988,"mtime":1698849505304,"results":"39","hashOfConfig":"26"},{"size":1998,"mtime":1698849505306,"results":"40","hashOfConfig":"26"},{"size":4796,"mtime":1698849505309,"results":"41","hashOfConfig":"26"},{"size":76282,"mtime":1698849505361,"results":"42","hashOfConfig":"26"},{"size":3502,"mtime":1698849505364,"results":"43","hashOfConfig":"26"},{"size":3061,"mtime":1698849505367,"results":"44","hashOfConfig":"26"},{"size":3272,"mtime":1698849505374,"results":"45","hashOfConfig":"26"},{"size":121358,"mtime":1698894102680,"results":"46","hashOfConfig":"26"},{"size":11781,"mtime":1698892678536,"results":"47","hashOfConfig":"26"},{"size":16137,"mtime":1698891817996,"results":"48","hashOfConfig":"26"},{"size":3707,"mtime":1698891952258,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gwvgfq",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\farmingWorker.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\FarmPlant.jsx",["128","129","130"],[],"\"use client\";\r\n\r\nimport helper from \"../util/helper.js\";\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\nimport ReactGA from \"react-ga4\";\r\nimport { memo, useState, useEffect, useMemo } from \"react\";\r\nimport Image from \"next/image\";\r\n\r\nconst FarmingPlant = ({ data }) => {\r\n  const [hydrated, setHydrated] = useState(false);\r\n  useEffect(() => {\r\n    setHydrated(true);\r\n  }, []);\r\n  let plant = data.plant;\r\n\r\n  let index = data.index;\r\n  let useFutureValues = data.useFutureValues;\r\n  let modifiers = data.modifiers;\r\n  let fake = data.fake;\r\n  let plantAutos = data.plantAutos;\r\n  let setPlantAutos = data.setPlantAutos;\r\n\r\n  if (plantAutos && modifiers) {\r\n    modifiers.numAuto = plantAutos[index];\r\n  }\r\n\r\n  if (fake) {\r\n    plant = { created: 1 };\r\n    index = 0;\r\n    useFutureValues = true;\r\n  }\r\n  if (!hydrated && false) {\r\n    plant.growthTime = 111;\r\n    plant.perHarvest = 222;\r\n    plant.created = 333;\r\n    plant.totalMade = 444;\r\n    plant.futureMult = 555;\r\n    plant.nextPrestige = 665;\r\n    plant.timeToPrestige = 776;\r\n    plant.timeToLevel = 888;\r\n    plant.production = 999;\r\n    modifiers.numAuto = 1;\r\n  }\r\n\r\n  let plantTitle = `P${index + 1}`;\r\n  let harvestTime = `${helper.secondsToStringWithS(plant.growthTime)}`;\r\n  let harvestAmount = `${plant.perHarvest.toExponential(2)}`;\r\n  let totalHarvest = `${plant.created.toExponential(2)}`;\r\n  let totalMade = `${plant.totalMade.toExponential(2)}`;\r\n  // let outMult = ` (x${helper.roundTwoDecimal(useFutureValues ? plant.futureMult : plant.currMult)})`;\r\n  let outMult = ` (x${plant.futureMult.toPrecision(3).toString()})`;\r\n\r\n  let pic = `${plant.prestige}`;\r\n  let futurePic = `${plant.nextPrestige}`;\r\n  let picTime =\r\n    useFutureValues && !fake\r\n      ? `${plant.timeToPrestige > 3600\r\n        ? helper.secondsToString(plant.timeToPrestige)\r\n        : helper.secondsToStringWithS(plant.timeToPrestige)\r\n      }`\r\n      : ``;\r\n  let rank = `${plant.Rank}`;\r\n  let originalRank = `${plant.originalRank}`;\r\n  let rankTime = `${plant.timeToLevel > 3600\r\n    ? helper.secondsToString(plant.timeToLevel)\r\n    : helper.secondsToStringWithS(plant.timeToLevel)\r\n    }`;\r\n  let totalProd = !fake ? `${plant.production.toExponential(2)}` : ``;\r\n\r\n  if (fake) {\r\n    plantTitle = `Plant`;\r\n    harvestTime = `Harvest Time`;\r\n    harvestAmount = `Harvest Amount`;\r\n    totalHarvest = `Total Harvested`;\r\n    outMult = `Output Multiplier`;\r\n    pic = `Current Pic`;\r\n    futurePic = `Future Pic`;\r\n    originalRank = `Initial Rank`;\r\n    picTime = useFutureValues ? `Time to next PIC + 'Hours to calculate'` : ``;\r\n    rank = `Rank`;\r\n    rankTime = `Time to Rank`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        border: \"1px solid black\",\r\n        margin: \"6px\",\r\n        padding: \"0 0 0 0\",\r\n        display: \"flex\",\r\n        height: fake ? \"179px\" : useFutureValues ? \"204px\" : \"179px\",\r\n        width: fake ? \"228px\" : \"\",\r\n        backgroundColor: \"white\",\r\n        // maxHeight:'128px'\r\n      }}\r\n      suppressHydrationWarning\r\n    >\r\n      <div style={{ height: \"214px\", width: \"214px\", position: \"relative\" }}>\r\n\r\n        <img style={{\r\n          height: \"214px\",\r\n          width: \"214px\",\r\n          position: \"absolute\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          zIndex: \"1\",\r\n        }}\r\n          alt={`in game plant #${index + 1} image`}\r\n          src={`/images/farming/plants/P${index + 1}.png`}\r\n        />\r\n\r\n        {/* <div\r\n          style={{\r\n            height: \"214px\",\r\n            width: \"214px\",\r\n            position: \"absolute\",\r\n            bottom: \"0\",\r\n            left: \"0\",\r\n            zIndex: \"1\",\r\n          }}\r\n        />\r\n        <Image\r\n          alt={`in game plant #${index + 1} image`}\r\n          src={`/images/farming/plants/P${index + 1}.png`}\r\n          fill\r\n        />\r\n        <div /> */}\r\n\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            background: \"black\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"16px\",\r\n            fontWeight: \"bold\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            top: \"0%\",\r\n            left: fake ? `35%` : \"43%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          {plantTitle}\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            background: \"black\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"12px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            top: \"12%\",\r\n            left: \"2%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          {harvestTime}\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            background: \"black\",\r\n            borderRadius: \"6px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            top: \"1%\",\r\n            right: \"1%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <MouseOverPopover\r\n            tooltip={\r\n              <div>\r\n                <div>Harvest Amount</div>\r\n              </div>\r\n            }\r\n          >\r\n            <div style={{ fontSize: \"12px\", fontFamily: \"sans-serif\" }}>\r\n              {harvestAmount}\r\n            </div>\r\n          </MouseOverPopover>\r\n        </div>\r\n\r\n        {/* output mult */}\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            background: \"black\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"12px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            top: \"10%\",\r\n            right: \"3%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <MouseOverPopover\r\n            tooltip={\r\n              <div>\r\n                <div>Output multiplier</div>\r\n              </div>\r\n            }\r\n          >\r\n            <div style={{ fontSize: \"12px\", fontFamily: \"sans-serif\" }}>\r\n              {totalProd + ` ` + outMult}\r\n            </div>\r\n          </MouseOverPopover>\r\n        </div>\r\n\r\n        {/* total harvest */}\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            background: \"black\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"12px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            top: \"20%\",\r\n            right: \"1%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <MouseOverPopover\r\n            tooltip={\r\n              <div>\r\n                <div>Total Harvest</div>\r\n              </div>\r\n            }\r\n          >\r\n            <div style={{ fontSize: \"12px\", fontFamily: \"sans-serif\" }}>\r\n              {totalMade + ` (${totalHarvest})`}\r\n            </div>\r\n          </MouseOverPopover>\r\n        </div>\r\n\r\n        {/* Rank */}\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            fontSize: \"10px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            bottom: \"18%\",\r\n            left: \"18%\",\r\n            display: \"flex\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\" }}>\r\n            <div style={{ display: \"flex\" }}>\r\n              <div\r\n                style={{\r\n                  background: \"black\",\r\n                  borderRadius: \"6px\",\r\n                  padding: \"0 3px 0 3px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                {originalRank}\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  height: \"16px\",\r\n                  width: \"12px\",\r\n                  zIndex: \"-1\",\r\n                  transform: \"rotate(90deg)\",\r\n                  margin: \"0 3px 0 3px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <Image\r\n                  alt=\"arrow point up\"\r\n                  src={`/images/icons/up_arrow.svg`}\r\n                  fill\r\n                />\r\n              </div>\r\n              <div\r\n                style={{\r\n                  background: \"black\",\r\n                  borderRadius: \"6px\",\r\n                  padding: \"0 3px 0 3px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                {rank}\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                width: \"10px\",\r\n                margin: \"0 3px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  height: \"16px\",\r\n                  width: \"24px\",\r\n                  zIndex: \"-1\",\r\n                  posiiton: \"relative F\",\r\n                }}\r\n              >\r\n                <Image\r\n                  alt=\"arrow pointing up\"\r\n                  src={`/images/icons/up_arrow.svg`}\r\n                  fill\r\n                />\r\n              </div>\r\n            </div>\r\n            <div\r\n              style={{\r\n                background: \"black\",\r\n                borderRadius: \"6px\",\r\n                fontSize: \"12px\",\r\n                padding: \"0 1px 0 1px\",\r\n                color: \"white\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                padding: \"0 3px 0 3px\",\r\n              }}\r\n            >\r\n              {rankTime}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* PIC */}\r\n        <div\r\n          style={{\r\n            zIndex: 2,\r\n            fontSize: \"12px\",\r\n            padding: \"0 1px 0 1px\",\r\n            color: \"white\",\r\n            bottom: \"30%\",\r\n            left: \"0%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            width: \"100%\",\r\n            position: \"absolute\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {/* Current PIC */}\r\n            <MouseOverPopover\r\n              tooltip={\r\n                <div>\r\n                  <div>PIC Level</div>\r\n                </div>\r\n              }\r\n            >\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n\r\n\r\n                <img\r\n                  style={{\r\n                    height: \"16px\",\r\n                    width: \"16px\",\r\n                    zIndex: \"-1\",\r\n                    position: \"relative\",\r\n                  }}\r\n                  alt=\"yellow star in an red/orange filled circle, in game prestige icon\"\r\n                  src={`/images/icons/prestige_star.png`}\r\n                />\r\n\r\n                {/* <div\r\n                  style={{\r\n                    height: \"16px\",\r\n                    width: \"16px\",\r\n                    zIndex: \"-1\",\r\n                    position: \"relative\",\r\n                  }}\r\n                >\r\n                  <Image\r\n                    fill\r\n                    alt=\"yellow star in an red/orange filled circle, in game prestige icon\"\r\n                    src={`/images/icons/prestige_star.png`}\r\n                  />\r\n                </div> */}\r\n\r\n                <div\r\n                  style={{\r\n                    background: \"black\",\r\n                    borderRadius: \"6px\",\r\n                    padding: \"0 3px 0 3px\",\r\n                  }}\r\n                >\r\n                  {pic}\r\n                </div>\r\n\r\n                <div\r\n                  style={{\r\n                    height: \"16px\",\r\n                    width: \"16px\",\r\n                    zIndex: \"-1\",\r\n                    transform: \"rotate(90deg)\",\r\n                    margin: \"0 3px 0 6px\",\r\n                    position: \"relative\",\r\n                  }}\r\n                >\r\n                  <Image\r\n                    alt=\"yellow filled arrow point up with a red trim\"\r\n                    src={`/images/icons/up_arrow_yellow.svg`}\r\n                    fill\r\n                  />\r\n                </div>\r\n              </div>\r\n            </MouseOverPopover>\r\n\r\n            {/* Future PIC */}\r\n            <MouseOverPopover\r\n              tooltip={\r\n                <div>\r\n                  <div>Future PIC Level</div>\r\n                </div>\r\n              }\r\n            >\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n\r\n                <img\r\n                  style={{\r\n                    height: \"16px\",\r\n                    width: \"16px\",\r\n                    zIndex: \"-1\",\r\n                    position: \"relative\",\r\n                  }}\r\n                  alt=\"yellow star in an red/orange filled circle, in game prestige icon\"\r\n                  src={`/images/icons/prestige_star.png`}\r\n                />\r\n                {/* \r\n                <div\r\n                  style={{\r\n                    height: \"16px\",\r\n                    width: \"16px\",\r\n                    zIndex: \"-1\",\r\n                    position: \"relative\",\r\n                  }}\r\n                >\r\n                  <Image\r\n                    alt=\"yellow star in an red/orange filled circle, in game prestige icon\"\r\n                    src={`/images/icons/prestige_star.png`}\r\n                    fill\r\n                  />\r\n                </div> */}\r\n\r\n                <div\r\n                  style={{\r\n                    background: \"black\",\r\n                    borderRadius: \"6px\",\r\n                    padding: \"0 3px 0 3px\",\r\n                  }}\r\n                >\r\n                  {futurePic}\r\n                </div>\r\n              </div>\r\n            </MouseOverPopover>\r\n\r\n            {useFutureValues && (\r\n              <MouseOverPopover\r\n                tooltip={\r\n                  <div>\r\n                    <div>\r\n                      Time to reach next PIC threshold (after your `hours to\r\n                      calculate` above)\r\n                    </div>\r\n                  </div>\r\n                }\r\n              >\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <div\r\n                    style={{\r\n                      height: \"16px\",\r\n                      width: \"16px\",\r\n                      zIndex: \"-1\",\r\n                      position: \"relative\",\r\n                    }}\r\n                  >\r\n                    <Image\r\n                      alt=\"yellow filled arrow point up with a red trim\"\r\n                      src={`/images/icons/up_arrow_yellow.svg`}\r\n                      fill\r\n                    />\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      background: \"black\",\r\n                      borderRadius: \"6px\",\r\n                      fontSize: \"12px\",\r\n                      padding: \"0 1px 0 1px\",\r\n                      color: \"white\",\r\n                      display: \"flex\",\r\n                      padding: \"0 3px 0 3px\",\r\n                    }}\r\n                  >\r\n                    {picTime}\r\n                  </div>\r\n                </div>\r\n              </MouseOverPopover>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Num Auto */}\r\n        {!fake && useFutureValues && (\r\n          <div\r\n            style={{\r\n              fontSize: \"12px\",\r\n              marginTop: \"0px\",\r\n              height: \"12px\",\r\n              padding: \"0 1px 0 1px\",\r\n              color: \"black\",\r\n              bottom: fake ? \"7%\" : \"7%\",\r\n              left: \"1%\",\r\n              display: \"flex\",\r\n              position: \"absolute\",\r\n              zIndex: \"2\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: fake ? \"\" : \"center\",\r\n                fontSize: \"12px\",\r\n                fontFamily: \"sans-serif\",\r\n              }}\r\n            >\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <MouseOverPopover\r\n                  tooltip={\r\n                    <div>\r\n                      How many autos will be running for this plant for `Hours\r\n                      to calculate` duration\r\n                    </div>\r\n                  }\r\n                >\r\n                  <div>Num Autos</div>\r\n                </MouseOverPopover>\r\n\r\n                <input\r\n                  style={{\r\n                    // width: '48px'\r\n                    // , WebkitAppearance: 'none'\r\n                    height: \"12px\",\r\n                    width: \"36px\",\r\n                  }}\r\n                  type=\"number\"\r\n                  className=\"prepNumber\"\r\n                  value={plantAutos[index]}\r\n                  onChange={(e) => {\r\n                    try {\r\n                      let x = Number(e.target.value);\r\n                      x = Math.floor(x);\r\n                      if (x < 0 || x > 12) {\r\n                        return;\r\n                      }\r\n                      ReactGA.event({\r\n                        category: \"farming_interaction\",\r\n                        action: `changed_plant_${index}_auto`,\r\n                        label: `${x}`,\r\n                        value: x,\r\n                      });\r\n                      setPlantAutos((cur) => {\r\n                        let temp = [...cur];\r\n                        temp[index] = x;\r\n                        return temp;\r\n                      });\r\n                    } catch (err) {\r\n                      console.log(err);\r\n                    }\r\n                  }}\r\n                  placeholder={plantAutos[index] + \"\"}\r\n                  min=\"0\"\r\n                  max=\"12\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(FarmingPlant, function (prev, curr) {\r\n  if (prev.data.fake !== curr.data.fake) return false;\r\n  // if (curr.data.fake) return true;\r\n  if (prev.data.index !== curr.data.index) return false;\r\n  //No need to check modifier values since if those are diff, plant values are diff as well\r\n\r\n  if (\r\n    prev.data.plantAutos[prev.data.index] !==\r\n    curr.data.plantAutos[prev.data.index]\r\n  )\r\n    return false;\r\n  if (prev.data.plant?.timeToLevel !== curr.data?.plant?.timeToLevel)\r\n    return false;\r\n\r\n  return true; //Nothing changed\r\n});\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\graph.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\page.js",["131","132","133","134"],[],"\"use client\"\r\n\r\nimport { useState, useEffect, useRef, useMemo } from 'react';\r\nimport Image from 'next/image';\r\n\r\nimport useLocalStorage from \"use-local-storage\";\r\nimport MouseOverPopover from \"../util/Tooltip.jsx\";\r\nimport FarmingPlant from './FarmPlant.jsx';\r\nimport helper from \"../util/helper.js\";\r\nimport farmingHelper from \"../util/farmingHelper.js\";\r\nimport mathHelper from '../util/math.js';\r\nimport './page.css';\r\nimport ReactGA from \"react-ga4\";\r\nimport Graph from './graph.jsx';\r\nimport Timer from './Timer.jsx';\r\nimport DefaultSave from '../util/tempSave.json';\r\n\r\nfunction generateCombinations(objects, people) {\r\n    const result = [];\r\n\r\n    function backtrack(index, remainingObjects, currentCombination) {\r\n        if (index === people) {\r\n            if (remainingObjects === 0) {\r\n                result.push([...currentCombination]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i <= remainingObjects; i++) {\r\n            currentCombination[index] = i;\r\n            backtrack(index + 1, remainingObjects - i, currentCombination);\r\n        }\r\n    }\r\n\r\n    backtrack(0, objects, []);\r\n\r\n    return result;\r\n}\r\n\r\nfunction splitArrayIndices(arr, x) {\r\n    if (x <= 0) {\r\n        return \"Invalid value for x\";\r\n    }\r\n\r\n    const n = arr.length;\r\n    if (n < x) {\r\n        return \"Array size is smaller than x\";\r\n    }\r\n\r\n    const chunkSize = Math.floor(n / x);\r\n    const remainder = n % x;\r\n\r\n    const indices = [];\r\n    let start = 0;\r\n    for (let i = 0; i < x; i++) {\r\n        const end = start + chunkSize + (i < remainder ? 1 : 0);\r\n        indices.push([start, end - 1]);\r\n        start = end;\r\n    }\r\n\r\n    return indices;\r\n}\r\n\r\n\r\nconst FarmingLanding = () => {\r\n\r\n    const [clientData, setData] = useLocalStorage('userData', DefaultSave);\r\n    const [data, setRunTimeData] = useState(DefaultSave);\r\n\r\n    useEffect(() => {\r\n        setRunTimeData(clientData);\r\n    }, [clientData]);\r\n\r\n    const [customMultipliers, setCustomMultipliers] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\r\n    const [futureTime, setFutureTime] = useState(0.01);\r\n    const [plantAutos, setPlantAutos] = useLocalStorage(\"plantAutos\", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\r\n    const [plantAutosClient, setPlantAutosClient] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\r\n    useEffect(() => {\r\n        setPlantAutosClient(plantAutos);\r\n\r\n    }, [plantAutos]);\r\n\r\n    const secondsHour = 3600;\r\n    const farmCalcStarted = useRef({});\r\n    const farmTotals = useRef([]);\r\n    // const [numThreads, setNumThreads] = useState(8);\r\n    const [numThreads, setNumThreadsRunTime] = useState(8);\r\n    const [clientNumThreads, setNumThreads] = useLocalStorage(\"numThreads\", 8);\r\n    useEffect(() => {\r\n        setNumThreadsRunTime(clientNumThreads);\r\n    }, [clientNumThreads]);\r\n\r\n    // const [yScale, setYScale] = useState('log');\r\n    const [yScale, setYScaleRunTime] = useState('log');\r\n    const [yScaleClient, setYScale] = useLocalStorage(\"yScale\", 'log');\r\n    useEffect(() => {\r\n        setYScaleRunTime(yScaleClient);\r\n    }, [yScaleClient]);\r\n\r\n    const [showFries, setShowFriesRunTime] = useState(true);\r\n    const [showFriesClient, setShowFries] = useLocalStorage(\"showFries\", true);\r\n    useEffect(() => {\r\n        setShowFriesRunTime(showFriesClient);\r\n    }, [showFriesClient])\r\n\r\n    const [showHP, setShowHPRunTime] = useState(true);\r\n    const [showHPClient, setShowHP] = useLocalStorage(\"showHP\", true);\r\n    useEffect(() => {\r\n        setShowHPRunTime(showHPClient);\r\n    }, [showHPClient]);\r\n\r\n    const [calcedFutureTime, setCalcedFutureTime] = useState(futureTime);//Used to lock in for pic displaying what future time what used when calculating\r\n\r\n    const [numSimulatedAutos, setNumSimulatedAutosRunTime] = useState(data.FarmingShopAutoPlotBought);\r\n    const [numSimulatedAutosClient, setNumSimulatedAutos] = useLocalStorage(\"numSimulatedAutos\", data.FarmingShopAutoPlotBought);\r\n    useEffect(() => {\r\n        setNumSimulatedAutosRunTime(numSimulatedAutosClient);\r\n    }, [numSimulatedAutosClient]);\r\n\r\n    const [farmCalcProgress, setFarmCalcProgress] = useState({ current: 0, max: 0 });\r\n    const [bestPlantCombo, setBestPlantCombo] = useState([]);//holds the best production, total made, pic and pic% after a calculation\r\n    // const [bestRunningCombo, setBestRunningCombo] = useState({});//same as above, but used to make the graph update during the loading\r\n    const bestRunningCombo = useMemo(() => {\r\n        return {}\r\n    }, []);//same as above, but used to make the graph update during the loading\r\n\r\n    const [autoBuyPBC, setAutoBuyPBCRunTime] = useState(data.ASCFarmingShopAutoPage1 === 1);\r\n    const [autoBuyPBCClient, setAutoBuyPBC] = useLocalStorage(\"autoBuyPBC\", data.ASCFarmingShopAutoPage1 === 1);\r\n    useEffect(() => {\r\n        setAutoBuyPBCRunTime(autoBuyPBCClient);\r\n    }, [autoBuyPBCClient]);\r\n\r\n    const [lockCustomAuto, setLockCustomAutoRunTime] = useState(false);\r\n    const [lockCustomAutoClient, setLockCustomAuto] = useLocalStorage(\"lockCustomAuto\", false);\r\n    useEffect(() => {\r\n        setLockCustomAutoRunTime(lockCustomAutoClient);\r\n    }, [lockCustomAutoClient]);\r\n\r\n    const [forceRankPotion, setForceRankPotionRunTime] = useState(false);\r\n    const [forceRankPotionClient, setForceRankPotion] = useLocalStorage(\"forceRankPotion\", false);\r\n    useEffect(() => {\r\n        setForceRankPotionRunTime(forceRankPotionClient);\r\n    }, [forceRankPotionClient]);\r\n\r\n    const [calcAFK, setCalcAFK] = useState(false);\r\n    const [calcStep, setCalcStep] = useState(false);\r\n\r\n    const [timeCompleted, setTimeCompleted] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let timeout = setTimeout(() => {\r\n\r\n            ReactGA.send({ hitType: \"pageview\", page: \"/farming\", title: \"Farming Calculator Page\" });\r\n        }, 5000);\r\n        return () => { clearTimeout(timeout) };\r\n    }, [])\r\n\r\n    let petPlantCombo = 1;\r\n    let contagionPlantEXP = 1;\r\n    let contagionPlantGrowth = 1;\r\n    let contagionPlantProd = 1;\r\n    let contagionHarvest = 1;\r\n\r\n    if (data.GrasshopperCollection[2].Locked > 0) {\r\n        let base = helper.calcPOW(data.GrasshopperCollection[2].BaseBonus);\r\n        let level = helper.calcPOW(data.GrasshopperCollection[2].Level);\r\n        contagionPlantEXP = Math.pow(1 + base * 0.01, level);\r\n    }\r\n    if (data.GrasshopperCollection[3].Locked > 0) {\r\n        let base = helper.calcPOW(data.GrasshopperCollection[3].BaseBonus);\r\n        let level = helper.calcPOW(data.GrasshopperCollection[3].Level);\r\n        contagionPlantProd = Math.pow(1 + base * 0.01, level);\r\n    }\r\n    if (data.GrasshopperCollection[4].Locked > 0) {\r\n        let base = helper.calcPOW(data.GrasshopperCollection[4].BaseBonus);\r\n        let level = helper.calcPOW(data.GrasshopperCollection[4].Level);\r\n        contagionPlantGrowth = Math.pow(1 + base * 0.01, level);\r\n    }\r\n    if (data.GrasshopperCollection[6].Locked > 0) {\r\n        let base = helper.calcPOW(data.GrasshopperCollection[6].BaseBonus);\r\n        let level = helper.calcPOW(data.GrasshopperCollection[6].Level);\r\n        contagionHarvest = Math.pow(1 + base * 0.01, level);\r\n    }\r\n\r\n    let soulPlantEXP = Math.pow(1.25, data.SoulLeafTreatment);\r\n\r\n    let shopGrowingSpeed = data.FarmingShopPlantGrowingSpeed;\r\n    let manualHarvestFormula = data.FarmingShopPlantManualHarvestFormula;\r\n    // let shopProdBonus = Math.pow(1.25, data.FarmingShopPlantTotalProduction);\r\n    let shopRankEXP = 1 + data.FarmingShopPlantRankExpEarned * 0.1;\r\n    let shopRankLevel = data.FarmingShopPlantRankExpEarned;\r\n    let picPlants = data.FarmingShopPlantImprovement;\r\n    let plants = data.PlantCollection;\r\n\r\n    let assemblyPlantExp = 1;\r\n    let assemblyProduction = 1;\r\n    let assemblyPlantharvest = 1;\r\n    if (data?.AssemblerCollection[0].BonusList[1].StartingLevel <= data?.AssemblerCollection[0].Level) {\r\n        assemblyPlantExp *= farmingHelper.calcAssembly(data, 0, 1);\r\n    }\r\n    if (data?.AssemblerCollection[5].BonusList[2].StartingLevel <= data?.AssemblerCollection[5].Level) {\r\n        assemblyPlantExp *= farmingHelper.calcAssembly(data, 5, 2);\r\n    }\r\n\r\n    if (data?.AssemblerCollection[3].BonusList[2].StartingLevel <= data?.AssemblerCollection[3].Level) {\r\n        assemblyProduction *= farmingHelper.calcAssembly(data, 3, 2);\r\n    }\r\n    if (data?.AssemblerCollection[7].BonusList[1].StartingLevel <= data?.AssemblerCollection[7].Level) {\r\n        assemblyProduction *= farmingHelper.calcAssembly(data, 7, 1);\r\n    }\r\n\r\n    if (data?.AssemblerCollection[7].BonusList[0].StartingLevel <= data?.AssemblerCollection[7].Level) {\r\n        assemblyPlantharvest *= farmingHelper.calcAssembly(data, 7, 0);\r\n    }\r\n    if (data?.AssemblerCollection[9].BonusList[3].StartingLevel <= data?.AssemblerCollection[9].Level) {\r\n        assemblyPlantharvest *= farmingHelper.calcAssembly(data, 9, 3);\r\n    }\r\n\r\n    for (let i = 0; i < data.PetsSpecial.length; i++) {\r\n        let t = data.PetsSpecial[i];\r\n        if (t.BonusID === 5015 && t.Active === 1) {\r\n            petPlantCombo += t.BonusPower / 100;\r\n        }\r\n    }\r\n\r\n    let potionRankTime = data.SoulPotionHealthyRankTime;\r\n    let potionRank = potionRankTime > 0 ? data.SoulPotionHealthyRankBonus + 1 : 1;\r\n    if (forceRankPotion && potionRank === 1) {\r\n        potionRank = 1.5;\r\n    }\r\n\r\n    const modifiers = useMemo(() => {\r\n        console.log(`setin modif`);\r\n        let tempy =\r\n        {\r\n            time: 0,\r\n            // numAuto: numAuto,\r\n            originalPotionRank: data.SoulPotionHealthyRankTime,\r\n            shopGrowingSpeed: shopGrowingSpeed,\r\n            originalShopGrowingLevel: data.FarmingShopPlantGrowingSpeed,\r\n            originalShopGrowingBonus: data.PlantGrowingSpeedBonus,\r\n            manualHarvestFormula: manualHarvestFormula,\r\n            contagionHarvest: contagionHarvest,\r\n            shopRankEXP: shopRankEXP,\r\n            shopRankLevel: shopRankLevel,\r\n            originalShopRankLevel: data.FarmingShopPlantRankExpEarned,\r\n            originalRankLevelBonus: data.PlantRankExpBonus,\r\n            picPlants: picPlants,\r\n            petPlantCombo: petPlantCombo,\r\n            contagionPlantEXP: contagionPlantEXP,\r\n            contagionPlantGrowth: contagionPlantGrowth,\r\n            soulPlantEXP: soulPlantEXP,\r\n            assemblyPlantExp: assemblyPlantExp,\r\n            assemblyProduction: assemblyProduction,\r\n            assemblyPlantharvest: assemblyPlantharvest,\r\n            manualHarvestBonus: mathHelper.createDecimal(data.PlantManualHarvestBonus).toNumber(),\r\n            shopProdBonus: mathHelper.pow(1.25, data.FarmingShopPlantTotalProduction),\r\n            originalShopProdLevel: data.FarmingShopPlantTotalProduction,\r\n            originalShopProdBonus: data.PlantTotalProductionBonus,\r\n            shopProdLevel: data.FarmingShopPlantTotalProduction,\r\n            contagionPlantProd: contagionPlantProd,\r\n            hpBonus: mathHelper.createDecimal(data.HealthyPotatoBonus),\r\n            nextCosts: farmingHelper.getNextShopCosts(data),\r\n            curPotatoes: mathHelper.createDecimal(data.HealthyPotatoCurrent),\r\n            totalPotatoes: mathHelper.createDecimal(data.HealthyPotatoTotal),\r\n            expBonus: shopRankEXP * soulPlantEXP * contagionPlantEXP * assemblyPlantExp,\r\n            autoBuyPBC: autoBuyPBC,\r\n            // tickRate: Math.floor((futureTime * secondsHour) * 0.0015) < 1 ? 1 : Math.floor((futureTime * secondsHour) * 0.0015),\r\n            tickRate: Math.floor((futureTime * secondsHour) * 0.01) < 1 ? 1 : Math.floor((futureTime * secondsHour) * 0.012),\r\n            potionRankTime: potionRankTime,\r\n            potionRank: potionRank,\r\n            forceRankPotion: forceRankPotion,\r\n            fryBonus: data.FrenchFriesBonus,\r\n            timePassed: data.TimePassedFarming\r\n        }\r\n        tempy.originalShopProdBonus = data.PlantTotalProductionBonus;\r\n        return tempy\r\n    },\r\n        [\r\n            shopGrowingSpeed, manualHarvestFormula, contagionHarvest, shopRankEXP, shopRankLevel, picPlants, petPlantCombo,\r\n            contagionPlantEXP, contagionPlantGrowth, soulPlantEXP, assemblyPlantExp, assemblyProduction, contagionPlantProd, assemblyPlantharvest,\r\n            data, autoBuyPBC, futureTime, potionRank, potionRankTime, forceRankPotion\r\n        ]\r\n    )\r\n\r\n    const finalPlants = useMemo(() => {\r\n        console.log(`generating inter plants`);\r\n        let tempArr = [];\r\n        //\r\n        for (let i = 0; i < plants.length; i++) {\r\n            let plant = plants[i];\r\n            if (plant.Locked === 0) continue;\r\n\r\n\r\n\r\n            plant.prestige = picPlants[i];\r\n\r\n            plant.prestigeBonus = Math.pow(1.02, plant.prestige)\r\n            plant.growthTime = farmingHelper.calcGrowthTime(plant, modifiers);\r\n\r\n            plant.created = mathHelper.createDecimal(plant.ManuallyCreated);\r\n            plant.totalMade = mathHelper.createDecimal(plant.TotalCreated);\r\n\r\n            plant.perHarvest = farmingHelper.calcPlantHarvest(plant, modifiers);\r\n            plant.curExp = plant.CurrentExp.mantissa * (Math.pow(10, plant.CurrentExp.exponent));\r\n            plant.reqExp = plant.ExpNeeded.mantissa * (Math.pow(10, plant.ExpNeeded.exponent));\r\n            //plant.timeToLevel = (plant.reqExp - plant.curExp) / plant.perHarvest * plant.growthTime;\r\n\r\n            plant.futureMult = farmingHelper.futureMultBD(plant, modifiers);\r\n            let prod = farmingHelper.calcProdOutput(plant, modifiers);\r\n            plant.production = prod;\r\n            plant.timeToLevel = farmingHelper.calcTimeTillLevel(plant, { ...modifiers, numAuto: plantAutosClient[i] });\r\n\r\n            plant.elapsedTime = 0;\r\n            plant.originalRank = plant.Rank;\r\n            tempArr.push(plant);\r\n        }\r\n        return tempArr;\r\n    }, [picPlants, plants, modifiers, plantAutosClient])\r\n\r\n\r\n    const [calcDone, setCalcDone] = useState(true);\r\n    const [expDiff, setExpDiff] = useState(0);\r\n    const [expDiffFry, setExpDiffFry] = useState(0);\r\n\r\n    let tempFuture = useMemo(() => {\r\n        console.log(`calcing`);\r\n\r\n        if (false) {\r\n            let final_steps = [];\r\n            let completeRunTime = 0;\r\n\r\n            for (let i = finalPlants.length - 1; i >= 0; i--) {\r\n                let runTime = 0;\r\n                let loop_flag = true;\r\n\r\n                let plants_inner = [...finalPlants];\r\n                let modif_inner = { ...modifiers }\r\n                let index = i;\r\n                let autos_inner = Array(numSimulatedAutos).fill(0);\r\n                while (loop_flag) {\r\n\r\n                    let temp_time = plants_inner[index].growthTime === 10 ? 60 : plants_inner[index].growthTime;\r\n\r\n                    runTime += temp_time;\r\n\r\n                    autos_inner[index] = numSimulatedAutos;\r\n                    let temp_result = farmingHelper.calcHPProd(plants_inner, { ...modif_inner, time: temp_time, numAutos: autos_inner });\r\n\r\n                    let mult_increase = mathHelper.subtractDecimal(temp_result.plants[index].futureMult, plants_inner[index].futureMult);\r\n                    let mult_increase_ind = mathHelper.divideDecimal(mult_increase, numSimulatedAutos);\r\n                    let mult_increase_perc = mathHelper.divideDecimal(mult_increase_ind, temp_result.plants[index].futureMult).toNumber();\r\n\r\n                    let mult_per_s = mult_increase_perc / (temp_time * (index === 0 ? 0.75 : 1));\r\n\r\n                    plants_inner = temp_result.plants;\r\n                    modif_inner = temp_result.finalModifiers;\r\n                    const thresh = 0.000024579935867502135 / 3;\r\n                    if (mult_per_s < thresh) {\r\n\r\n                        loop_flag = false;\r\n                    }\r\n                }\r\n                completeRunTime += runTime;\r\n                final_steps.push({ time: runTime, autos: autos_inner });\r\n            }\r\n\r\n            console.log(final_steps)\r\n            let temp_steps = farmingHelper.calcStepHPProd(finalPlants, { ...modifiers, steps: final_steps });\r\n            console.log(`temp steps: ${completeRunTime} -> ${helper.secondsToString(completeRunTime)}`);\r\n            console.log(temp_steps);\r\n\r\n\r\n            // console.log(`final duration: ${helper.secondsToString(runTime)}`)\r\n            // let timeTillLevel_temp = farmingHelper.calcTimeTillLevel(finalPlants[6], {...modifiers});\r\n\r\n        }\r\n\r\n        let tempModif = { ...modifiers, time: secondsHour * futureTime, numAutos: plantAutosClient };\r\n\r\n        let result = farmingHelper.calcHPProd(finalPlants, tempModif);\r\n\r\n        for (let i = 0; i < result.dataPointsPotatoes.length; i++) {\r\n            let cur = result.dataPointsPotatoes[i];\r\n            cur.time = helper.roundInt(cur.time);\r\n            cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n        }\r\n        for (let i = 0; i < result.dataPointsFries.length; i++) {\r\n            let cur = result.dataPointsFries[i];\r\n            cur.time = helper.roundInt(cur.time);\r\n            cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n        }\r\n\r\n        console.log(`future plants:`);\r\n        console.log(result);\r\n        let finalFry = farmingHelper.calcFryOutput(result.totalPotatoes, result.finalModifiers);\r\n        console.log(`rough fry final (pre time bonus): ${finalFry.toExponential(3)}`)\r\n        return result;\r\n    },\r\n        [numSimulatedAutos, finalPlants, modifiers, futureTime, plantAutosClient, secondsHour]);\r\n\r\n    //Go through all datapoints, find highest exp, and reduce it for all equally if necessary so JS doesn't break\r\n    const graphObjects = useMemo(() => {\r\n        console.log(`updating EXPDIFF`);\r\n\r\n        const maxExp = 300;\r\n        let currMaxExp = 0;\r\n        let diff_exp = 0;\r\n\r\n        let currMaxExpFry = 0;\r\n        let diff_expFry = 0;\r\n\r\n        // Go over all the custom input data points first\r\n        for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n            let cur = tempFuture.dataPointsPotatoes[i];\r\n            if (cur.originalProduction.exponent > currMaxExp) {\r\n                currMaxExp = cur.originalProduction.exponent;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < tempFuture.dataPointsFries.length; i++) {\r\n            let cur = tempFuture.dataPointsFries[i];\r\n            if (cur.originalFry.exponent > currMaxExpFry) {\r\n                currMaxExpFry = cur.originalFry.exponent;\r\n            }\r\n        }\r\n\r\n        if (bestPlantCombo.top10DataPointsPotatoes) {\r\n            // Go over all the top 1 results\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n                        currMaxExp = cur_iner.originalProduction.exponent;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsFries.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsFries[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    if (cur_iner.originalFry.exponent > currMaxExpFry) {\r\n                        currMaxExpFry = cur_iner.originalFry.exponent;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // go over the best PIC\r\n            for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n                if (cur.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur.originalProduction.exponent;\r\n                }\r\n            }\r\n\r\n            // go over the best PIC %\r\n            for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                if (cur.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur.originalProduction.exponent;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n        diff_expFry = currMaxExpFry > maxExp ? currMaxExpFry - maxExp : 0;\r\n\r\n        // Reduce all the exponents for custom input first\r\n        for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n            let cur = tempFuture.dataPointsPotatoes[i];\r\n            cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n            cur.production.exponent -= diff_exp;\r\n            cur.production = cur.production.toNumber();\r\n        }\r\n        for (let i = 0; i < tempFuture.dataPointsFries.length; i++) {\r\n            let cur = tempFuture.dataPointsFries[i];\r\n            cur.fries = mathHelper.createDecimal(cur.originalFry.toString());\r\n            cur.fries.exponent -= diff_expFry;\r\n            cur.fries = cur.fries.toNumber();\r\n        }\r\n\r\n        if (bestPlantCombo.top10DataPointsPotatoes) {\r\n            // Go over all the top 1 results\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n                    cur_iner.production.exponent -= diff_exp;\r\n                    cur_iner.production = cur_iner.production.toNumber();\r\n                }\r\n            }\r\n            for (let i = 0; i < bestPlantCombo.top10DataPointsFries.length; i++) {\r\n                if (i > 0) break;\r\n                let cur = bestPlantCombo.top10DataPointsFries[i];\r\n                for (let j = 0; j < cur.data.length; j++) {\r\n                    let cur_iner = cur.data[j];\r\n                    cur_iner.fries = mathHelper.createDecimal(cur_iner.originalFry.toString());\r\n                    cur_iner.fries.exponent -= diff_expFry;\r\n                    cur_iner.fries = cur_iner.fries.toNumber();\r\n                }\r\n            }\r\n\r\n            // go over the best PIC\r\n            for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n                cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n                cur.production.exponent -= diff_exp;\r\n                cur.production = cur.production.toNumber();\r\n            }\r\n            // go over the best PIC %\r\n            for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n                cur.production.exponent -= diff_exp;\r\n                cur.production = cur.production.toNumber();\r\n            }\r\n        }\r\n\r\n        if (expDiff !== diff_exp) {\r\n            setExpDiff(diff_exp);\r\n        }\r\n        if (expDiffFry !== diff_expFry) {\r\n            setExpDiffFry(expDiffFry);\r\n        }\r\n\r\n        return {\r\n            customProduction: tempFuture,\r\n            top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n            top10Fries: bestPlantCombo.top10DataPointsFries,\r\n            bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n            bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        }\r\n\r\n    }, [tempFuture, expDiff, expDiffFry, bestPlantCombo])\r\n\r\n    const runningGraphObjects = useMemo(() => {\r\n        console.log(`updating running EXPDIFF`);\r\n\r\n        const maxExp = 300;\r\n        let currMaxExp = 0;\r\n        let diff_exp = 0;\r\n\r\n        let runProd = bestRunningCombo.runningProd;\r\n\r\n        if (runProd) {\r\n            for (let i = 0; i < runProd.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur_iner = runProd.result.result.dataPointsPotatoes[i];\r\n                if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n                    currMaxExp = cur_iner.originalProduction.exponent;\r\n                }\r\n            }\r\n\r\n            diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n\r\n            for (let i = 0; i < runProd.result.result.dataPointsPotatoes.length; i++) {\r\n                let cur_iner = runProd.result.result.dataPointsPotatoes[i];\r\n                cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n                cur_iner.production.exponent -= diff_exp;\r\n                cur_iner.production = cur_iner.production.toNumber();\r\n            }\r\n        }\r\n\r\n        return {\r\n            runningProd: runProd\r\n            // customProduction: tempFuture,\r\n            // top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n            // bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n            // bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        }\r\n\r\n        // if (bestPlantCombo.top10DataPointsPotatoes) {\r\n        //     // Go over all the top 1 results\r\n        //     for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n        //         if (i > 0) break;\r\n        //         let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n        //         for (let j = 0; j < cur.data.length; j++) {\r\n        //             let cur_iner = cur.data[j];\r\n        //             if (cur_iner.originalProduction.exponent > currMaxExp) {\r\n        //                 currMaxExp = cur_iner.originalProduction.exponent;\r\n        //             }\r\n        //         }\r\n        //     }\r\n\r\n        //     // go over the best PIC\r\n        //     for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n        //         if (cur.originalProduction.exponent > currMaxExp) {\r\n        //             currMaxExp = cur.originalProduction.exponent;\r\n        //         }\r\n        //     }\r\n        //     // go over the best PIC %\r\n        //     for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n        //         if (cur.originalProduction.exponent > currMaxExp) {\r\n        //             currMaxExp = cur.originalProduction.exponent;\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n\r\n        // diff_exp = currMaxExp > maxExp ? currMaxExp - maxExp : 0;\r\n\r\n        // // Reduce all the exponents for custom input first\r\n        // for (let i = 0; i < tempFuture.dataPointsPotatoes.length; i++) {\r\n        //     let cur = tempFuture.dataPointsPotatoes[i];\r\n        //     cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //     cur.production.exponent -= diff_exp;\r\n        //     cur.production = cur.production.toNumber();\r\n        // }\r\n\r\n        // if (bestPlantCombo.top10DataPointsPotatoes) {\r\n        //     // Go over all the top 1 results\r\n        //     for (let i = 0; i < bestPlantCombo.top10DataPointsPotatoes.length; i++) {\r\n        //         if (i > 0) break;\r\n        //         let cur = bestPlantCombo.top10DataPointsPotatoes[i];\r\n        //         for (let j = 0; j < cur.data.length; j++) {\r\n        //             let cur_iner = cur.data[j];\r\n        //             cur_iner.production = mathHelper.createDecimal(cur_iner.originalProduction.toString());\r\n        //             cur_iner.production.exponent -= diff_exp;\r\n        //             cur_iner.production = cur_iner.production.toNumber();\r\n        //         }\r\n        //     }\r\n\r\n        //     // go over the best PIC\r\n        //     for (let i = 0; i < bestPlantCombo.bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPic.result.result.dataPointsPotatoes[i];\r\n        //         cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //         cur.production.exponent -= diff_exp;\r\n        //         cur.production = cur.production.toNumber();\r\n        //     }\r\n        //     // go over the best PIC %\r\n        //     for (let i = 0; i < bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n        //         let cur = bestPlantCombo.bestPicPerc.result.result.dataPointsPotatoes[i];\r\n        //         cur.production = mathHelper.createDecimal(cur.originalProduction.toString());\r\n        //         cur.production.exponent -= diff_exp;\r\n        //         cur.production = cur.production.toNumber();\r\n        //     }\r\n        // }\r\n\r\n        // if (expDiff !== diff_exp) {\r\n        //     setExpDiff(diff_exp);\r\n        // }\r\n\r\n        // return {\r\n        //     customProduction: tempFuture,\r\n        //     top10Potatoes: bestPlantCombo.top10DataPointsPotatoes,\r\n        //     bestPic: bestPlantCombo?.bestPic?.result?.result?.dataPointsPotatoes,\r\n        //     bestPicPerc: bestPlantCombo?.bestPicPerc?.result?.result?.dataPointsPotatoes,\r\n        // }\r\n\r\n    }, [bestRunningCombo])\r\n\r\n\r\n\r\n\r\n    let customFuturePlants = [];\r\n    let futurePlants = [];//ss\r\n    for (let i = 0; i < tempFuture.plants.length; i++) {\r\n        let newPlant = tempFuture.plants[i];\r\n        let prestigeTimings = farmingHelper.calcTimeTillPrestige(newPlant, { ...modifiers, time: secondsHour * futureTime, numAuto: plantAutosClient[i] });\r\n\r\n        newPlant.nextPrestige = prestigeTimings.prestige;\r\n        newPlant.timeToPrestige = prestigeTimings.remainingTime;\r\n\r\n        customFuturePlants.push(newPlant);\r\n        futurePlants.push(newPlant);\r\n    }\r\n\r\n\r\n\r\n    const FarmerWorker = useRef(null);\r\n    const FarmerWorker1 = useRef(null);\r\n    const FarmerWorker2 = useRef(null);\r\n    const FarmerWorker3 = useRef(null);\r\n    const FarmerWorker4 = useRef(null);\r\n    const FarmerWorker5 = useRef(null);\r\n    const FarmerWorker6 = useRef(null);\r\n    const FarmerWorker7 = useRef(null);\r\n    const FarmerWorker8 = useRef(null);\r\n    const FarmerWorker9 = useRef(null);\r\n    const FarmerWorker10 = useRef(null);\r\n    const FarmerWorker11 = useRef(null);\r\n    const workers = [FarmerWorker, FarmerWorker1, FarmerWorker2, FarmerWorker3, FarmerWorker4, FarmerWorker5, FarmerWorker6, FarmerWorker7, FarmerWorker8, FarmerWorker9, FarmerWorker10, FarmerWorker11];\r\n\r\n    //Calc best + listeners\r\n    useEffect(() => {\r\n\r\n        const findBest = () => {\r\n            let finished = true;\r\n            for (let i = 0; i < 6; i++) {\r\n                if (farmCalcStarted.current[i]) {\r\n                    finished = false;\r\n                }\r\n            }\r\n            if (finished) {\r\n                setTimeCompleted(new Date());\r\n                setBestPlantCombo((currBestCombo) => {\r\n                    console.log(`Time end: ` + (new Date()).getTime())\r\n                    setFarmCalcProgress((curr) => {\r\n                        let newAmount = { ...curr };\r\n                        newAmount.current = 100;\r\n                        newAmount.max = 100;\r\n                        return newAmount;\r\n                    })\r\n                    console.log(`ready to find best`);\r\n\r\n                    let bestProd = { prod: mathHelper.createDecimal(0) };\r\n                    let bestPot = { pot: mathHelper.createDecimal(0) };\r\n                    let bestPic = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n                    let bestPicPerc = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n\r\n                    let top10DataPointsPotatoes = [];\r\n                    let top10DataPointsFries = [];\r\n\r\n                    for (let i = 0; i < farmTotals.current.length; i++) {\r\n                        let cur = farmTotals.current[i];\r\n\r\n\r\n                        if (!cur.totalPotCombo.result) {\r\n                            continue;\r\n                        }\r\n\r\n\r\n                        //Have to reset potatoe values again\r\n                        cur.bestPicCombo.potatoeProduction = cur.bestPicCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.potatoeProduction) : cur.bestPicCombo.potatoeProduction;\r\n                        cur.bestPicCombo.result.potatoeProduction = cur.bestPicCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.result.potatoeProduction) : cur.bestPicCombo.result.potatoeProduction;\r\n                        cur.bestPicCombo.result.totalPotatoes = cur.bestPicCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPicCombo.result.totalPotatoes) : cur.bestPicCombo.result.totalPotatoes;\r\n                        cur.bestPICPercCombo.potatoeProduction = cur.bestPICPercCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.potatoeProduction) : cur.bestPICPercCombo.potatoeProduction;\r\n                        cur.bestPICPercCombo.result.potatoeProduction = cur.bestPICPercCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.result.potatoeProduction) : cur.bestPICPercCombo.result.potatoeProduction;\r\n                        cur.bestPICPercCombo.result.totalPotatoes = cur.bestPICPercCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPICPercCombo.result.totalPotatoes) : cur.bestPICPercCombo.result.totalPotatoes;\r\n                        cur.bestProdCombo.result.potatoeProduction = cur.bestProdCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestProdCombo.result.potatoeProduction) : cur.bestProdCombo.result.potatoeProduction;\r\n                        cur.bestProdCombo.result.totalPotatoes = cur.bestProdCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestProdCombo.result.totalPotatoes) : cur.bestProdCombo.result.totalPotatoes;\r\n                        cur.totalPotCombo.result.totalPotatoes = cur.totalPotCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.totalPotCombo.result.totalPotatoes) : cur.totalPotCombo.result.totalPotatoes;\r\n                        cur.totalPotCombo.result.potatoeProduction = cur.totalPotCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.totalPotCombo.result.potatoeProduction) : cur.totalPotCombo.result.potatoeProduction;\r\n\r\n\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n\r\n                            let cur_top = cur.top10DataPointsPotatoes[j];\r\n                            cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n                            for (let k = 0; k < cur_top.data.length; k++) {\r\n                                let cur_data = cur_top.data[k];\r\n                                cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                                cur_data.time = helper.roundInt(cur_data.time);\r\n                            }\r\n                        }\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsFries.length; j++) {\r\n\r\n                            let cur_top = cur.top10DataPointsFries[j];\r\n                            cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n                            for (let k = 0; k < cur_top.data.length; k++) {\r\n                                let cur_data = cur_top.data[k];\r\n                                cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n                                cur_data.time = helper.roundInt(cur_data.time);\r\n                            }\r\n                        }\r\n\r\n\r\n                        for (let j = 0; j < cur.bestPicCombo.result.dataPointsPotatoes.length; j++) {\r\n                            let cur_data = cur.bestPicCombo.result.dataPointsPotatoes[j];\r\n                            cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPicCombo.result.dataPointsFries.length; j++) {\r\n                            let cur_data = cur.bestPicCombo.result.dataPointsFries[j];\r\n\r\n                            cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsPotatoes.length; j++) {\r\n                            let cur_data = cur.bestPICPercCombo.result.dataPointsPotatoes[j];\r\n                            cur_data.production = cur_data.originalProduction ? mathHelper.createDecimal(cur_data.originalProduction) : mathHelper.createDecimal(cur_data.production);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n                        for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsFries.length; j++) {\r\n                            let cur_data = cur.bestPICPercCombo.result.dataPointsFries[j];\r\n                            cur_data.fries = cur_data.originalFry ? mathHelper.createDecimal(cur_data.originalFry) : mathHelper.createDecimal(cur_data.fries);\r\n                            cur_data.time = helper.roundInt(cur_data.time);\r\n                        }\r\n\r\n\r\n                        top10DataPointsPotatoes.push(...cur.top10DataPointsPotatoes);\r\n                        top10DataPointsFries.push(...cur.top10DataPointsFries);\r\n                        if (cur.bestPicCombo.picGain > bestPic.pic) {\r\n                            bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n                        }\r\n                        else if (cur.bestPicCombo.picGain === bestPic.pic) {\r\n                            if (cur.bestPicCombo.potatoeProduction.greaterThan(bestPic.prod)) {\r\n                                bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n                            }\r\n                        }\r\n\r\n                        if (cur.bestPICPercCombo.picGain > bestPicPerc.pic) {\r\n                            bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n                        }\r\n                        else if (cur.bestPICPercCombo.picGain === bestPicPerc.pic) {\r\n                            if (cur.bestPICPercCombo.potatoeProduction.greaterThan(bestPicPerc.prod)) {\r\n                                bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (cur.bestProdCombo.result.potatoeProduction.greaterThan(bestProd.prod)) {\r\n                            bestProd = { prod: cur.bestProdCombo.result.potatoeProduction, result: cur.bestProdCombo }\r\n\r\n                        }\r\n                        if (cur.totalPotCombo.result.totalPotatoes.greaterThan(bestPot.pot)) {\r\n                            bestPot = { pot: cur.totalPotCombo.result.totalPotatoes, result: cur.totalPotCombo }\r\n                        }\r\n\r\n                        for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n                            cur.top10DataPointsPotatoes[j].obj = cur.totalPotCombo;\r\n                        }\r\n\r\n                    }\r\n\r\n                    top10DataPointsPotatoes = top10DataPointsPotatoes.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n                    top10DataPointsFries = top10DataPointsFries.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n                    // top10DataPointsFries =[]\r\n\r\n\r\n                    for (let i = 0; i < top10DataPointsPotatoes.length; i++) {\r\n\r\n                        let cur = top10DataPointsPotatoes[i];\r\n                        for (let j = 0; j < cur.data.length; j++) {\r\n                            cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n                            cur.data[j].originalProduction = mathHelper.createDecimal(cur.data[j].production.toString());\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 0; i < top10DataPointsFries.length; i++) {\r\n                        let cur = top10DataPointsFries[i];\r\n                        for (let j = 0; j < cur.data.length; j++) {\r\n                            cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n                            cur.data[j].originalFry = mathHelper.createDecimal(cur.data[j].fries.toString());\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 0; i < bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n                        let cur = bestPic.result.result.dataPointsPotatoes[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPic.result.result.dataPointsFries.length; i++) {\r\n                        let cur = bestPic.result.result.dataPointsFries[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n                        let cur = bestPicPerc.result.result.dataPointsPotatoes[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n                    }\r\n                    for (let i = 0; i < bestPicPerc.result.result.dataPointsFries.length; i++) {\r\n                        let cur = bestPicPerc.result.result.dataPointsFries[i];\r\n                        cur.time = helper.roundInt(cur.time);\r\n                        cur.originalFry = mathHelper.createDecimal(cur.fries.toString());\r\n                    }\r\n\r\n                    if (bestProd.result) {\r\n                        bestProd.finalFry = farmingHelper.calcFryOutput(bestProd.result.result.totalPotatoes, bestProd.result.result.finalModifiers);\r\n                        bestPot.finalFry = farmingHelper.calcFryOutput(bestPot.result.result.totalPotatoes, bestPot.result.result.finalModifiers);\r\n                        bestPic.finalFry = farmingHelper.calcFryOutput(bestPic.result.result.totalPotatoes, bestPic.result.result.finalModifiers);\r\n                        bestPicPerc.finalFry = farmingHelper.calcFryOutput(bestPicPerc.result.result.totalPotatoes, bestPicPerc.result.result.finalModifiers);\r\n\r\n                        for (let i = 0; i < bestPic.result.plants.length; i++) {\r\n\r\n                            bestPic.result.plants[i].created = mathHelper.createDecimal(`${bestPic.result.plants[i].created.mantissa}e${bestPic.result.plants[i].created.exponent}`);\r\n                            bestPic.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPic.result.plants[i].totalMade.mantissa}e${bestPic.result.plants[i].totalMade.exponent}`);\r\n                            bestPic.result.plants[i].production = mathHelper.createDecimal(`${bestPic.result.plants[i].production.mantissa}e${bestPic.result.plants[i].production.exponent}`);\r\n\r\n                            bestPicPerc.result.plants[i].created = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].created.mantissa}e${bestPicPerc.result.plants[i].created.exponent}`);\r\n                            bestPicPerc.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].totalMade.mantissa}e${bestPicPerc.result.plants[i].totalMade.exponent}`);\r\n                            bestPicPerc.result.plants[i].production = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].production.mantissa}e${bestPicPerc.result.plants[i].production.exponent}`);\r\n\r\n                            bestProd.result.plants[i].created = mathHelper.createDecimal(`${bestProd.result.plants[i].created.mantissa}e${bestProd.result.plants[i].created.exponent}`);\r\n                            bestProd.result.plants[i].totalMade = mathHelper.createDecimal(`${bestProd.result.plants[i].totalMade.mantissa}e${bestProd.result.plants[i].totalMade.exponent}`);\r\n                            bestProd.result.plants[i].production = mathHelper.createDecimal(`${bestProd.result.plants[i].production.mantissa}e${bestProd.result.plants[i].production.exponent}`);\r\n\r\n                            bestPot.result.plants[i].created = mathHelper.createDecimal(`${bestPot.result.plants[i].created.mantissa}e${bestPot.result.plants[i].created.exponent}`);\r\n                            bestPot.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPot.result.plants[i].totalMade.mantissa}e${bestPot.result.plants[i].totalMade.exponent}`);\r\n                            bestPot.result.plants[i].production = mathHelper.createDecimal(`${bestPot.result.plants[i].production.mantissa}e${bestPot.result.plants[i].production.exponent}`);\r\n                        }\r\n\r\n\r\n                        let finalBests = {\r\n                            bestProd: bestProd,\r\n                            prod: bestProd.result.combo,\r\n                            bestPot: bestPot,\r\n                            pot: bestPot.result.combo,\r\n                            bestPic: bestPic,\r\n                            pic: bestPic.result.combo,\r\n                            bestPicPerc: bestPicPerc,\r\n                            picPerc: bestPicPerc.result.combo,\r\n                            top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n                            top10DataPointsFries: top10DataPointsFries\r\n                        }\r\n                        console.log(`Best:`);\r\n                        console.log(finalBests);\r\n\r\n\r\n\r\n                        setCalcDone(true);\r\n                        return finalBests;\r\n                    }\r\n                    else {\r\n                        return currBestCombo;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        const updateRunningBest = ({ bestProduction }) => {\r\n            //sounded like a good idea, leads to very jerky graphs\r\n            return;\r\n            // setBestRunningCombo((currBestCombo) => {\r\n            //     let bestProd = currBestCombo.prod ? currBestCombo : { prod: mathHelper.createDecimal(0) };\r\n            //     let runningProd = { prod: mathHelper.createDecimal(bestProduction.result.potatoeProduction), result: bestProduction };\r\n\r\n\r\n            //     if (runningProd.prod.greaterThan(bestProd.prod)) {\r\n\r\n            //         setForceGraphUpdate(true);\r\n            //         runningProd.prod = mathHelper.createDecimal(runningProd.prod);\r\n            //         runningProd.result.result.potatoeProduction = mathHelper.createDecimal(runningProd.result.result.potatoeProduction);\r\n            //         runningProd.result.result.totalPotatoes = mathHelper.createDecimal(runningProd.result.result.totalPotatoes);\r\n\r\n            //         for (let i = 0; i < runningProd.result.result.dataPointsPotatoes.length; i++) {\r\n            //             let cur = runningProd.result.result.dataPointsPotatoes[i];\r\n            //             cur.originalProduction = mathHelper.createDecimal(cur.production);\r\n            //             cur.production = mathHelper.createDecimal(cur.production);\r\n            //             cur.time = helper.roundInt(cur.time);\r\n            //         }\r\n\r\n\r\n            //         return { ...currBestCombo, runningProd: runningProd };\r\n            //     }\r\n\r\n            //     return currBestCombo;\r\n\r\n\r\n            //     let bestPot = { pot: mathHelper.createDecimal(0) };\r\n            //     let bestPic = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n            //     let bestPicPerc = { pic: 0, prod: mathHelper.createDecimal(0) }\r\n\r\n            //     let top10DataPointsPotatoes = [];\r\n            //     let top10DataPointsFries = [];\r\n\r\n            //     for (let i = 0; i < farmTotals.current.length; i++) {\r\n            //         let cur = farmTotals.current[i];\r\n\r\n\r\n            //         if (!cur.totalPotCombo.result) {\r\n            //             continue;\r\n            //         }\r\n\r\n\r\n            //         //Have to reset potatoe values again\r\n            //         cur.bestPicCombo.potatoeProduction = cur.bestPicCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.potatoeProduction) : cur.bestPicCombo.potatoeProduction;\r\n            //         cur.bestPicCombo.result.potatoeProduction = cur.bestPicCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPicCombo.result.potatoeProduction) : cur.bestPicCombo.result.potatoeProduction;\r\n            //         cur.bestPicCombo.result.totalPotatoes = cur.bestPicCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPicCombo.result.totalPotatoes) : cur.bestPicCombo.result.totalPotatoes;\r\n            //         cur.bestPICPercCombo.potatoeProduction = cur.bestPICPercCombo.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.potatoeProduction) : cur.bestPICPercCombo.potatoeProduction;\r\n            //         cur.bestPICPercCombo.result.potatoeProduction = cur.bestPICPercCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestPICPercCombo.result.potatoeProduction) : cur.bestPICPercCombo.result.potatoeProduction;\r\n            //         cur.bestPICPercCombo.result.totalPotatoes = cur.bestPICPercCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestPICPercCombo.result.totalPotatoes) : cur.bestPICPercCombo.result.totalPotatoes;\r\n            //         cur.bestProdCombo.result.potatoeProduction = cur.bestProdCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.bestProdCombo.result.potatoeProduction) : cur.bestProdCombo.result.potatoeProduction;\r\n            //         cur.bestProdCombo.result.totalPotatoes = cur.bestProdCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.bestProdCombo.result.totalPotatoes) : cur.bestProdCombo.result.totalPotatoes;\r\n            //         cur.totalPotCombo.result.totalPotatoes = cur.totalPotCombo.result.totalPotatoes ? mathHelper.createDecimal(cur.totalPotCombo.result.totalPotatoes) : cur.totalPotCombo.result.totalPotatoes;\r\n            //         cur.totalPotCombo.result.potatoeProduction = cur.totalPotCombo.result.potatoeProduction ? mathHelper.createDecimal(cur.totalPotCombo.result.potatoeProduction) : cur.totalPotCombo.result.potatoeProduction;\r\n\r\n\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n\r\n            //             let cur_top = cur.top10DataPointsPotatoes[j];\r\n            //             cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n            //             for (let k = 0; k < cur_top.data.length; k++) {\r\n            //                 let cur_data = cur_top.data[k];\r\n            //                 cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //                 cur_data.time = helper.roundInt(cur_data.time);\r\n            //             }\r\n            //         }\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsFries.length; j++) {\r\n\r\n            //             let cur_top = cur.top10DataPointsFries[j];\r\n            //             cur_top.result = mathHelper.createDecimal(cur_top.result);\r\n\r\n            //             for (let k = 0; k < cur_top.data.length; k++) {\r\n            //                 let cur_data = cur_top.data[k];\r\n            //                 cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //                 cur_data.time = helper.roundInt(cur_data.time);\r\n            //             }\r\n            //         }\r\n\r\n\r\n            //         for (let j = 0; j < cur.bestPicCombo.result.dataPointsPotatoes.length; j++) {\r\n            //             let cur_data = cur.bestPicCombo.result.dataPointsPotatoes[j];\r\n            //             cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPicCombo.result.dataPointsFries.length; j++) {\r\n            //             let cur_data = cur.bestPicCombo.result.dataPointsFries[j];\r\n            //             cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsPotatoes.length; j++) {\r\n            //             let cur_data = cur.bestPICPercCombo.result.dataPointsPotatoes[j];\r\n            //             cur_data.production = mathHelper.createDecimal(cur_data.production);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n            //         for (let j = 0; j < cur.bestPICPercCombo.result.dataPointsFries.length; j++) {\r\n            //             let cur_data = cur.bestPICPercCombo.result.dataPointsFries[j];\r\n            //             cur_data.fries = mathHelper.createDecimal(cur_data.fries);\r\n            //             cur_data.time = helper.roundInt(cur_data.time);\r\n            //         }\r\n\r\n\r\n            //         top10DataPointsPotatoes.push(...cur.top10DataPointsPotatoes);\r\n            //         top10DataPointsFries.push(...cur.top10DataPointsFries);\r\n            //         if (cur.bestPicCombo.picGain > bestPic.pic) {\r\n            //             bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n            //         }\r\n            //         else if (cur.bestPicCombo.picGain === bestPic.pic) {\r\n            //             if (cur.bestPicCombo.potatoeProduction.greaterThan(bestPic.prod)) {\r\n            //                 bestPic = { pic: cur.bestPicCombo.picGain, result: cur.bestPicCombo, prod: cur.bestPicCombo.potatoeProduction }\r\n            //             }\r\n            //         }\r\n\r\n            //         if (cur.bestPICPercCombo.picGain > bestPicPerc.pic) {\r\n            //             bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n            //         }\r\n            //         else if (cur.bestPICPercCombo.picGain === bestPicPerc.pic) {\r\n            //             if (cur.bestPICPercCombo.potatoeProduction.greaterThan(bestPicPerc.prod)) {\r\n            //                 bestPicPerc = { pic: cur.bestPICPercCombo.picGain, result: cur.bestPICPercCombo, prod: cur.bestPICPercCombo.potatoeProduction }\r\n            //             }\r\n            //         }\r\n\r\n\r\n            //         if (cur.bestProdCombo.result.potatoeProduction.greaterThan(bestProd.prod)) {\r\n            //             bestProd = { prod: cur.bestProdCombo.result.potatoeProduction, result: cur.bestProdCombo }\r\n\r\n            //         }\r\n            //         if (cur.totalPotCombo.result.totalPotatoes.greaterThan(bestPot.pot)) {\r\n            //             bestPot = { pot: cur.totalPotCombo.result.totalPotatoes, result: cur.totalPotCombo }\r\n            //         }\r\n\r\n            //         for (let j = 0; j < cur.top10DataPointsPotatoes.length; j++) {\r\n            //             cur.top10DataPointsPotatoes[j].obj = cur.totalPotCombo;\r\n            //         }\r\n\r\n            //     }\r\n\r\n            //     top10DataPointsPotatoes = top10DataPointsPotatoes.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n            //     top10DataPointsFries = top10DataPointsFries.sort((a, b) => b.result.compare(a.result)).slice(0, 10);\r\n            //     // top10DataPointsFries =[]\r\n\r\n\r\n            //     for (let i = 0; i < top10DataPointsPotatoes.length; i++) {\r\n\r\n            //         let cur = top10DataPointsPotatoes[i];\r\n            //         for (let j = 0; j < cur.data.length; j++) {\r\n            //             cur.data[j].time = helper.roundInt(cur.data[j].time);\r\n            //             cur.data[j].originalProduction = mathHelper.createDecimal(cur.data[j].production.toString());\r\n            //         }\r\n            //     }\r\n\r\n            //     for (let i = 0; i < bestPic.result.result.dataPointsPotatoes.length; i++) {\r\n            //         let cur = bestPic.result.result.dataPointsPotatoes[i];\r\n            //         cur.time = helper.roundInt(cur.time);\r\n            //         cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n            //     }\r\n            //     for (let i = 0; i < bestPicPerc.result.result.dataPointsPotatoes.length; i++) {\r\n            //         let cur = bestPicPerc.result.result.dataPointsPotatoes[i];\r\n            //         cur.time = helper.roundInt(cur.time);\r\n            //         cur.originalProduction = mathHelper.createDecimal(cur.production.toString());\r\n            //     }\r\n\r\n            //     if (bestProd.result) {\r\n            //         bestProd.finalFry = farmingHelper.calcFryOutput(bestProd.result.result.totalPotatoes);\r\n            //         bestPot.finalFry = farmingHelper.calcFryOutput(bestPot.result.result.totalPotatoes);\r\n            //         bestPic.finalFry = farmingHelper.calcFryOutput(bestPic.result.result.totalPotatoes);\r\n            //         bestPicPerc.finalFry = farmingHelper.calcFryOutput(bestPicPerc.result.result.totalPotatoes);\r\n\r\n            //         for (let i = 0; i < bestPic.result.plants.length; i++) {\r\n\r\n            //             bestPic.result.plants[i].created = mathHelper.createDecimal(`${bestPic.result.plants[i].created.mantissa}e${bestPic.result.plants[i].created.exponent}`);\r\n            //             bestPic.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPic.result.plants[i].totalMade.mantissa}e${bestPic.result.plants[i].totalMade.exponent}`);\r\n            //             bestPic.result.plants[i].production = mathHelper.createDecimal(`${bestPic.result.plants[i].production.mantissa}e${bestPic.result.plants[i].production.exponent}`);\r\n\r\n            //             bestPicPerc.result.plants[i].created = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].created.mantissa}e${bestPicPerc.result.plants[i].created.exponent}`);\r\n            //             bestPicPerc.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].totalMade.mantissa}e${bestPicPerc.result.plants[i].totalMade.exponent}`);\r\n            //             bestPicPerc.result.plants[i].production = mathHelper.createDecimal(`${bestPicPerc.result.plants[i].production.mantissa}e${bestPicPerc.result.plants[i].production.exponent}`);\r\n\r\n            //             bestProd.result.plants[i].created = mathHelper.createDecimal(`${bestProd.result.plants[i].created.mantissa}e${bestProd.result.plants[i].created.exponent}`);\r\n            //             bestProd.result.plants[i].totalMade = mathHelper.createDecimal(`${bestProd.result.plants[i].totalMade.mantissa}e${bestProd.result.plants[i].totalMade.exponent}`);\r\n            //             bestProd.result.plants[i].production = mathHelper.createDecimal(`${bestProd.result.plants[i].production.mantissa}e${bestProd.result.plants[i].production.exponent}`);\r\n\r\n            //             bestPot.result.plants[i].created = mathHelper.createDecimal(`${bestPot.result.plants[i].created.mantissa}e${bestPot.result.plants[i].created.exponent}`);\r\n            //             bestPot.result.plants[i].totalMade = mathHelper.createDecimal(`${bestPot.result.plants[i].totalMade.mantissa}e${bestPot.result.plants[i].totalMade.exponent}`);\r\n            //             bestPot.result.plants[i].production = mathHelper.createDecimal(`${bestPot.result.plants[i].production.mantissa}e${bestPot.result.plants[i].production.exponent}`);\r\n            //         }\r\n\r\n\r\n            //         let finalBests = {\r\n            //             bestProd: bestProd,\r\n            //             prod: bestProd.result.combo,\r\n            //             bestPot: bestPot,\r\n            //             pot: bestPot.result.combo,\r\n            //             bestPic: bestPic,\r\n            //             pic: bestPic.result.combo,\r\n            //             bestPicPerc: bestPicPerc,\r\n            //             picPerc: bestPicPerc.result.combo,\r\n            //             top10DataPointsPotatoes: top10DataPointsPotatoes,\r\n            //             top10DataPointsFries: top10DataPointsFries\r\n            //         }\r\n            //         console.log(`Best:`);\r\n            //         console.log(finalBests);\r\n\r\n\r\n\r\n            //         setCalcDone(true);\r\n            //         return finalBests;\r\n            //     }\r\n            // })\r\n\r\n        }\r\n\r\n\r\n        FarmerWorker.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker1.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker2.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker3.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker4.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker5.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker6.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker7.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker8.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker9.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker10.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n        FarmerWorker11.current = new Worker(new URL('./farmingWorker.js', import.meta.url))\r\n\r\n\r\n        FarmerWorker.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm back`)\r\n            farmCalcStarted.current[0] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker1.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    // console.log(`sm1 adding: ${response.updateAmount}`)\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm1 back`)\r\n            farmCalcStarted.current[1] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker2.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n            console.log(`get sm2 back`)\r\n            farmCalcStarted.current[2] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker3.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm3 back`)\r\n            farmCalcStarted.current[3] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker4.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm4 back`)\r\n            farmCalcStarted.current[4] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker5.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm5 back`)\r\n            farmCalcStarted.current[5] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker6.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm6 back`)\r\n            farmCalcStarted.current[6] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker7.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm7 back`)\r\n            farmCalcStarted.current[7] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker8.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm8 back`)\r\n            farmCalcStarted.current[8] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker9.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm9 back`)\r\n            farmCalcStarted.current[9] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker10.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm10 back`)\r\n            farmCalcStarted.current[10] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n        FarmerWorker11.current.addEventListener('message', (event) => {\r\n            let response = event.data;\r\n            if (response.update) {\r\n                if (response.temp) {\r\n                    updateRunningBest({ bestProduction: response.temp })\r\n                }\r\n                return setFarmCalcProgress((curr) => {\r\n                    let newAmount = { ...curr };\r\n                    // newAmount.current++;\r\n                    // return newAmount;\r\n                    newAmount.current += response.updateAmount;\r\n                    return newAmount;\r\n                })\r\n            }\r\n\r\n            console.log(`get sm11 back`)\r\n            farmCalcStarted.current[11] = false;\r\n            farmTotals.current.push(response);\r\n            findBest();\r\n        })\r\n\r\n\r\n        //Clean up on unmounts\r\n        return () => {\r\n            FarmerWorker.current.terminate();\r\n            FarmerWorker1.current.terminate();\r\n            FarmerWorker2.current.terminate();\r\n            FarmerWorker3.current.terminate();\r\n            FarmerWorker4.current.terminate();\r\n            FarmerWorker5.current.terminate();\r\n            FarmerWorker6.current.terminate();\r\n            FarmerWorker7.current.terminate();\r\n            FarmerWorker8.current.terminate();\r\n            FarmerWorker9.current.terminate();\r\n            FarmerWorker10.current.terminate();\r\n            FarmerWorker11.current.terminate();\r\n        }\r\n    }, [])\r\n\r\n    let notEnoughAuto = false;\r\n\r\n    if (lockCustomAuto) {\r\n        let tempTotal = 0\r\n        for (let i = 0; i < finalPlants.length; i++) {\r\n            tempTotal += plantAutosClient[i];\r\n        }\r\n        if (tempTotal > numSimulatedAutos) {\r\n            ReactGA.event({\r\n                category: \"farming_interaction\",\r\n                action: `not_enough_autos`,\r\n                label: `${tempTotal - numSimulatedAutos}`,\r\n                value: tempTotal - numSimulatedAutos\r\n            });\r\n            notEnoughAuto = true;\r\n        }\r\n    }\r\n\r\n    // let displayPicPerc = bestPlantCombo.pic !== bestPlantCombo.picPerc;\r\n    let displayPicPerc = false;\r\n\r\n    return (\r\n        <div style={{ height: '100%', display: 'flex', flex: 1, flexDirection: 'column', paddingLeft: '6px', maxWidth:'calc(100% - 10px)' }}>\r\n            <div style={{\r\n                display: 'flex', flex: 1,\r\n                flexDirection: 'column',\r\n                width: '100%'\r\n            }}>\r\n                <div\r\n                    style={{ display: 'flex', marginLeft: '-6px' }}\r\n                >\r\n\r\n                    {/* Future plants */}\r\n                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                        {/* <FarmingPlant data={{ fake: true }} /> */}\r\n                        {customFuturePlants.map((plant, index) => {\r\n                            return <FarmingPlant key={'future' + index} data={\r\n                                {\r\n                                    setPlantAutos: setPlantAutos, plantAutos: plantAutosClient,\r\n                                    plant: plant,\r\n                                    index: index,\r\n                                    customMultipliers: customMultipliers,\r\n                                    setCustomMultipliers: setCustomMultipliers,\r\n                                    allowSetMultipliers: false,\r\n                                    useFutureValues: true,\r\n                                    modifiers: modifiers\r\n                                }\r\n                            } />\r\n                        }\r\n                        )}\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div style={{\r\n                    display: 'flex', width: '100%',\r\n                    flex: 1,\r\n                    margin: '18px 0 0 0'\r\n                    // backgroundColor: 'yellow'\r\n                    // height: '100%'\r\n                    //  height: '-webkit-fill-available' \r\n                }}>\r\n                    <div\r\n                        style={{\r\n                            color: 'black', width: '650px', display: 'flex', flexDirection: 'column',\r\n                        }}\r\n                    >\r\n\r\n\r\n                        {/* timer + buttons */}\r\n                        <div\r\n                            style={{ display: 'flex', width: '100%', alignItems: 'center' }}\r\n                        >\r\n\r\n                            {/* hours, autos, max, clear */}\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                margin: '1px 25px 0 0',\r\n                                height: '116px',\r\n                                border: '2px solid purple',\r\n                                borderRadius: '5px',\r\n                                padding: '3px'\r\n                                // flex: '1',\r\n                                // flexDirection: 'column',\r\n                                //  width: '172px'\r\n                            }}>\r\n\r\n                                <div\r\n                                    style={{ display: 'flex', flexDirection: 'column', width: '298px' }}\r\n                                >\r\n\r\n                                    {/* Hours to calc */}\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <MouseOverPopover tooltip={\r\n                                            <div>\r\n                                                How many hours into the future to calculate for each plant\r\n                                            </div>\r\n                                        }>\r\n                                            <div\r\n                                                style={{ width: '135px' }}\r\n                                            >\r\n                                                Hours to calculate\r\n                                            </div>\r\n\r\n                                        </MouseOverPopover>\r\n\r\n                                        <input\r\n                                            style={{\r\n                                                marginLeft: '6px',\r\n                                                width: '48px'\r\n                                                // , WebkitAppearance: 'none' \r\n                                            }}\r\n                                            type='number'\r\n                                            className='prepNumber'\r\n                                            value={futureTime}\r\n                                            onChange={\r\n                                                (e) => {\r\n                                                    try {\r\n                                                        let x = Number(e.target.value);\r\n                                                        // x = Math.floor(x);\r\n                                                        if (x < 0.01 || x > 99999999) {\r\n                                                            return;\r\n                                                        }\r\n                                                        setFutureTime(x);\r\n\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `changed_futureHours`,\r\n                                                            label: `${x}`,\r\n                                                            value: x\r\n                                                        })\r\n\r\n                                                    }\r\n                                                    catch (err) {\r\n                                                        console.log(err);\r\n                                                    }\r\n                                                }}\r\n                                            placeholder={futureTime + ''}\r\n                                            min=\"0.01\"\r\n                                            max=\"99999999\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    {/* Max autos */}\r\n                                    <div style={{\r\n                                        display: 'flex', alignItems: 'center', width: '100%'\r\n                                    }}>\r\n                                        <MouseOverPopover tooltip={\r\n                                            <div>\r\n                                                How many autos to consider for calculations as the max\r\n                                            </div>\r\n                                        }>\r\n                                            <div\r\n                                                style={{ width: '135px' }}\r\n                                            >Unlocked Autos</div>\r\n                                        </MouseOverPopover>\r\n\r\n                                        <input\r\n                                            style={{\r\n                                                width: '48px'\r\n                                                // , WebkitAppearance: 'none' \r\n                                            }}\r\n                                            type='number'\r\n                                            className='prepNumber'\r\n                                            value={numSimulatedAutos}\r\n                                            onChange={\r\n                                                (e) => {\r\n                                                    try {\r\n                                                        let x = Number(e.target.value);\r\n                                                        // x = Math.floor(x);\r\n                                                        if (x < 0 || x > 12) {\r\n                                                            return;\r\n                                                        }\r\n                                                        setNumSimulatedAutos(x);\r\n\r\n                                                        ReactGA.event({\r\n                                                            category: \"farming_interaction\",\r\n                                                            action: `changed_maxAutos`,\r\n                                                            label: `${x}`,\r\n                                                            value: x\r\n                                                        })\r\n\r\n                                                    }\r\n                                                    catch (err) {\r\n                                                        console.log(err);\r\n                                                    }\r\n                                                }}\r\n                                            placeholder={numSimulatedAutos + ''}\r\n                                            min=\"1\"\r\n                                            max=\"12\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div\r\n                                    style={{ display: 'flex', marginTop: '4px', }}\r\n                                >\r\n                                    {/* Max all autos */}\r\n                                    <div style={{\r\n                                        display: 'flex', alignItems: 'center',\r\n                                        margin: '0 12px 0 0'\r\n                                    }}>\r\n                                        {/* <div>Max All Autos</div> */}\r\n                                        <button onClick={(e) => {\r\n                                            let temp = Array(20).fill(numSimulatedAutos);\r\n                                            setPlantAutos(temp);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `max_auto`,\r\n                                                label: `max_auto`,\r\n                                            })\r\n                                        }}>Max Autos</button>\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        {/* <div>Clear All Autos</div> */}\r\n                                        <button onClick={(e) => {\r\n                                            let temp = Array(20).fill(0);\r\n                                            setPlantAutos(temp);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `clear_auto`,\r\n                                                label: `clear_auto`,\r\n                                            })\r\n                                        }}>Clear Autos</button>\r\n                                    </div>\r\n                                </div>\r\n                                {/* Show HP + Fry */}\r\n                                <div style={{ display: 'flex', flexDirection: 'column', marginTop: '4px' }}>\r\n                                    <div style={{ display: 'flex' }}>\r\n                                        <div style={{ width: '160px' }}>Show Fries On Graph</div>\r\n                                        <input type=\"checkbox\" checked={showFries}\r\n                                            onChange={(e) => {\r\n                                                setShowFries(e.target.checked ? 1 : 0);\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_show_fry`,\r\n                                                    label: `${e.target.checked}`,\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <div style={{ display: 'flex', marginBottom: '' }}>\r\n                                        <div style={{ width: '160px' }}>Show HP On Graph</div>\r\n                                        <input type=\"checkbox\" checked={showHP}\r\n                                            onChange={(e) => {\r\n                                                setShowHP(e.target.checked ? 1 : 0);\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_show_HP`,\r\n                                                    label: `${e.target.checked}`,\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Calc buttons */}\r\n                            <div style={{\r\n                                display: 'flex', flexDirection: 'column',\r\n                                // border: '1px solid black',\r\n                                border: '2px solid purple',\r\n                                borderRadius: '5px',\r\n                                padding: '6px', marginRight: '12px',\r\n                                width: 'calc(100% - 308px)',\r\n                                minHeight: '110px',\r\n                                justifyContent: 'space-between'\r\n                            }}>\r\n                                <MouseOverPopover tooltip={\r\n                                    <div style={{ padding: '6px' }}>\r\n                                        Calculates the best auto distribution for desired time into the future\r\n                                    </div>\r\n                                }>\r\n                                    <div\r\n                                        style={{ fontWeight: 'bold', display: 'flex', justifyContent: 'center', marginBottom: '3px', marginTop: '-3px' }}\r\n                                    >\r\n                                        Calculate best auto placements\r\n                                    </div>\r\n                                </MouseOverPopover>\r\n\r\n                                {/* Calc Start buttons */}\r\n                                <div style={{ display: 'flex', flex: '1' }}>\r\n                                    <div style={{\r\n                                        maxWidth: '50%', margin: '0',\r\n                                        border: notEnoughAuto ? '1px solid black' : '',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column'\r\n                                    }}>\r\n                                        <button\r\n                                            disabled={notEnoughAuto || !calcDone}\r\n                                            onClick={(e) => {\r\n                                                setCalcDone(false);\r\n                                                setCalcedFutureTime(futureTime);\r\n                                                console.log(`Time start: ` + (new Date()).getTime())\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `clicked_optomise_auto`,\r\n                                                    label: `${futureTime}`,\r\n                                                    value: futureTime\r\n                                                })\r\n\r\n                                                let combinations = generateCombinations(numSimulatedAutos, finalPlants.length);\r\n                                                setCalcAFK(true);\r\n                                                setCalcStep(false);\r\n                                                if (lockCustomAuto) {\r\n                                                    let finalCombo = [];\r\n                                                    for (let i = 0; i < combinations.length; i++) {\r\n                                                        let curr = combinations[i];\r\n                                                        let matches = true;\r\n                                                        for (let j = 0; j < finalPlants.length; j++) {\r\n                                                            //Meaning there is not enough assigned to match user's preference\r\n                                                            if (plantAutosClient[j] > curr[j]) {\r\n                                                                matches = false;\r\n                                                                break;\r\n                                                            }\r\n                                                        }\r\n                                                        if (matches) {\r\n                                                            finalCombo.push(curr);\r\n                                                        }\r\n                                                    }\r\n                                                    combinations = finalCombo;\r\n                                                }\r\n\r\n                                                // const combinations = generateCombinations(3, finalPlants.length);\r\n                                                let splitArraysIndicies = splitArrayIndices(combinations, numThreads);\r\n                                                if (combinations.length < numThreads) {\r\n                                                    splitArraysIndicies = Array(numThreads).fill([]);\r\n                                                    splitArraysIndicies[0] = [0, combinations.length - 1];\r\n                                                }\r\n                                                farmTotals.current = [];\r\n                                                setFarmCalcProgress((cur) => {\r\n                                                    let temp = { ...cur };\r\n                                                    temp.max = combinations.length;\r\n                                                    temp.current = 0;\r\n                                                    return temp;\r\n                                                })\r\n                                                for (let i = 0; i < numThreads; i++) {\r\n                                                    if (farmCalcStarted.current[i]) {\r\n                                                        continue;\r\n                                                    }\r\n\r\n                                                    if (splitArraysIndicies[i].length === 0) continue;\r\n\r\n                                                    let worker = workers[i];\r\n                                                    worker.current.postMessage({\r\n                                                        data: {\r\n                                                            combinations: combinations,\r\n                                                            start: splitArraysIndicies[i][0],\r\n                                                            end: splitArraysIndicies[i][1],\r\n                                                            time: futureTime,\r\n                                                            modifiers: { ...modifiers, },\r\n                                                            finalPlants: finalPlants,\r\n                                                            mode: 'afk',\r\n                                                        },\r\n                                                        id: i\r\n                                                    })\r\n                                                    farmCalcStarted.current[i] = true;\r\n                                                }\r\n                                            }}>Calculate AFK\r\n                                        </button>\r\n                                        {notEnoughAuto && (\r\n                                            <div>\r\n                                                Not enough autos remaining!\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{\r\n                                        maxWidth: '50%', margin: '0 6px',\r\n                                        border: futureTime < 1 ? '1px solid black' : '',\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column'\r\n                                    }}>\r\n                                        <button\r\n\r\n                                            disabled={futureTime < 1 || !calcDone}\r\n                                            onClick={(e) => {\r\n                                                setCalcDone(false);\r\n                                                setCalcedFutureTime(futureTime);\r\n                                                console.log(`Time start: ` + (new Date()).getTime())\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `clicked_optomise_step`,\r\n                                                    label: `${futureTime}`,\r\n                                                    value: futureTime\r\n                                                })\r\n\r\n                                                setCalcAFK(false);\r\n                                                setCalcStep(true);\r\n\r\n\r\n                                                let min = 0.92;\r\n                                                let max = secondsHour * futureTime;\r\n                                                let step_max = 0.009 * finalPlants.length;\r\n\r\n                                                let nums = [];\r\n                                                let red = Math.floor(step_max * max);\r\n                                                for (let i = 0; i < finalPlants.length; i++) {\r\n                                                    let timer = farmingHelper.calcGrowthTime(finalPlants[i], modifiers);\r\n                                                    if (timer < red) {\r\n                                                        timer = red;\r\n                                                    }\r\n                                                    nums.push(timer);\r\n                                                }\r\n\r\n                                                nums.reverse();\r\n                                                let combinations = farmingHelper.findMultipliersWithMinPercentage(max, nums, min);\r\n\r\n                                                console.log(`num combinations: ${combinations.length}`);\r\n                                                let splitArraysIndicies = splitArrayIndices(combinations, numThreads);\r\n                                                if (combinations.length < numThreads) {\r\n                                                    splitArraysIndicies = Array(12).fill([]);\r\n                                                    splitArraysIndicies[0] = [0, combinations.length - 1];\r\n                                                }\r\n                                                farmTotals.current = [];\r\n                                                setFarmCalcProgress((cur) => {\r\n                                                    let temp = { ...cur };\r\n                                                    temp.max = combinations.length;\r\n                                                    temp.current = 0;\r\n                                                    return temp;\r\n                                                })\r\n\r\n                                                for (let i = 0; i < numThreads; i++) {\r\n                                                    if (farmCalcStarted.current[i]) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    if (splitArraysIndicies[i].length === 0) continue;\r\n                                                    let worker = workers[i];\r\n                                                    worker.current.postMessage({\r\n                                                        data: {\r\n                                                            baseTimers: nums,\r\n                                                            combinations: combinations,\r\n                                                            start: splitArraysIndicies[i][0],\r\n                                                            end: splitArraysIndicies[i][1],\r\n                                                            time: futureTime,\r\n                                                            modifiers: { ...modifiers, },\r\n                                                            finalPlants: finalPlants,\r\n                                                            mode: 'step',\r\n                                                            numSimulatedAutos: numSimulatedAutos\r\n                                                        },\r\n                                                        id: i\r\n                                                    })\r\n                                                    farmCalcStarted.current[i] = true;\r\n                                                }\r\n\r\n\r\n                                            }}>Calculate Step</button>\r\n                                        {futureTime < 1 && (\r\n                                            <div>\r\n                                                Minimum 1 future hour!\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    {(farmCalcProgress.current > 0) && (\r\n                                        <div>\r\n                                            {`${helper.roundTwoDecimal(farmCalcProgress.current / farmCalcProgress.max * 100)}%`}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n\r\n                                <div\r\n                                    style={{\r\n                                        marginTop: '6px'\r\n                                    }}\r\n                                >\r\n                                    {`Last run time: ${timeCompleted ? timeCompleted.toLocaleString() : 'N/A'}`}\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* Various settings */}\r\n                        <div style={{ display: 'flex', margin: '12px 0 0 0' }}>\r\n\r\n                            <div\r\n                                style={{ border: '1px solid black', padding: '3px', width: '345px' }}\r\n                            >\r\n\r\n\r\n\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            How many parallel simulations to run, higher number means more CPU usage but quicker result (diminishing returns with more threads)\r\n                                        </div>\r\n                                    }>\r\n                                        <div>\r\n                                            Num threads to use for calculating\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n\r\n                                    <select\r\n                                        style={{ maxWidth: '144px', marginLeft: '12px' }}\r\n                                        onChange={\r\n                                            (e) => {\r\n                                                setNumThreads(Number(e.target.value));\r\n                                                ReactGA.event({\r\n                                                    category: \"farming_interaction\",\r\n                                                    action: `changed_num_threads`,\r\n                                                    label: `${e.target.value}`,\r\n                                                    value: Number(e.target.value)\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                        value={numThreads + ''}\r\n                                    >\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                        <option value=\"6\">6</option>\r\n                                        <option value=\"7\">7</option>\r\n                                        <option value=\"8\">8</option>\r\n                                        <option value=\"9\">9</option>\r\n                                        <option value=\"10\">10</option>\r\n                                        <option value=\"11\">11</option>\r\n                                        <option value=\"12\">12</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            Whether the simulation should automatically buy Farming Shop page 1 (Plant Boost Corner) upgrades. (This is an ascencion perk)\r\n                                        </div>\r\n                                    }>\r\n                                        <div>\r\n                                            Auto purchase Page 1 (PBC)\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setAutoBuyPBC(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_auto_pbc`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        checked={!!autoBuyPBC}\r\n                                        value={!!autoBuyPBC}\r\n                                    />\r\n                                </div>\r\n                                {/* Lock in checkbox */}\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            If checked, generates only possible auto distributions from your `Num Autos` selected above. If there are more autos assigned than you have purchased, then it will be disabled\r\n                                        </div>\r\n                                    }>\r\n                                        <div>\r\n                                            Lock in above `Num Autos`\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setLockCustomAuto(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_lock_auto`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        checked={!!lockCustomAuto}\r\n                                        value={!!lockCustomAuto}\r\n                                    />\r\n                                </div>\r\n                                {/* Ignore current potion, force it always on */}\r\n                                <div style={{ display: 'flex' }}>\r\n\r\n                                    <MouseOverPopover tooltip={\r\n                                        <div style={{ padding: '6px' }}>\r\n                                            If checked, assums plant rank EXP + 50% for the whole run, otherwise uses the remaining potion time in your save\r\n                                        </div>\r\n                                    }>\r\n                                        <div>\r\n                                            Plant Rank Potion Force On\r\n                                        </div>\r\n                                    </MouseOverPopover>\r\n\r\n\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        onChange={(e) => {\r\n                                            setForceRankPotion(e.target.checked ? 1 : 0);\r\n                                            ReactGA.event({\r\n                                                category: \"farming_interaction\",\r\n                                                action: `changed_potion_rank`,\r\n                                                label: `${e.target.checked}`,\r\n                                            })\r\n                                        }}\r\n                                        checked={!!forceRankPotion}\r\n                                        value={!!forceRankPotion}\r\n                                    />\r\n                                </div>\r\n                                <div style={{ display: 'flex', alignItems: 'center', }}>\r\n                                    <div style={{ marginRight: '6px' }}>\r\n                                        Y-Axis Scale\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={(e) => {\r\n                                            setYScale(yScale === 'auto' ? `Log` : 'auto')\r\n                                        }}\r\n                                    >\r\n                                        {yScale === 'Log' ? `Log` : 'Linear'}\r\n                                    </button>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/* Timer Stuff */}\r\n                            <div\r\n                                style={{\r\n                                    margin: '0 12px 0 24px', border: '1px solid black', padding: '3px',\r\n                                    width: 'calc(100% - 308px)',\r\n\r\n                                }}\r\n                            >\r\n                                <h3\r\n                                    style={{\r\n                                        marginBottom: '6px',\r\n                                        marginTop: '0',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center'\r\n                                    }}\r\n                                >\r\n                                    Timer\r\n                                </h3>\r\n                                <div>\r\n                                    <Timer timeCompleted={timeCompleted} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Explanation */}\r\n                        < div style={{ display: 'flex', width: '100%', marginTop: '12px', flexDirection: 'column' }}>\r\n\r\n                            <h3 style={{ margin: '0' }}>How to use</h3>\r\n                            <div\r\n                                style={{ display: 'flex' }}>\r\n                                <div style={{ fontWeight: 'bold', marginRight: '12px' }}>\r\n                                    Quickstart:\r\n                                </div>\r\n                                Enter how many hours you want to simulate into the future above (Hours to calculate). This should coincide with how long you want your overall run to be. So if you are 12 hours into a 48 hour run, enter 36hours.\r\n                            </div>\r\n                            <div style={{ marginTop: '6px' }} >\r\n                                <div className='outerExplanation'>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div className='explanationLeft'>\r\n                                            <div className=\"dot\" ></div>\r\n                                            <div className='innerExplanationShort'>\r\n                                                Hours to calculate\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='explanationInner'>\r\n                                            how far into the future to calculate best auto distributions, as well as future PIC/Levels for plants\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='outerExplanation'>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div className='explanationLeft'>\r\n                                            <div className=\"dot\" ></div>\r\n                                            <div className='innerExplanationShort'>\r\n                                                Calculate best auto placements\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='explanationInner'>\r\n                                            <div>\r\n                                                Calculate AFK: Best `set-and-forget` distibution\r\n                                            </div>\r\n                                            <div>\r\n                                                Calculate Step: Best possible timing switches of each plant (much more active)\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='outerExplanation'>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div className='explanationLeft'>\r\n                                            <div className=\"dot\" ></div>\r\n                                            <div className='innerExplanationShort'>\r\n                                                Num threads to use for calculating\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='explanationInner'>\r\n                                            How many parallel simulations to run, higher number means more CPU usage but quicker result (diminishing returns with more threads)\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='outerExplanation'>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div className='explanationLeft'>\r\n                                            <div className=\"dot\" ></div>\r\n                                            <div className='innerExplanationShort'>\r\n                                                Auto purchase Page 1 Upgrades (PBC)\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='explanationInner'>\r\n                                            Whether the simulation should automatically buy Farming Shop page 1 (Plant Boost Corner) upgrades. (This is an ascencion perk)\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='outerExplanation'>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        <div className='explanationLeft'>\r\n                                            <div className=\"dot\" ></div>\r\n                                            <div className='innerExplanationShort'>\r\n                                                Lock in above `Num Autos`\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='explanationInner'>\r\n                                            If checked, generates only possible auto distributions from your `Num Autos` selected above. If there are more autos assigned than you have purchased, then it will be disabled\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div >\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    <div style={{\r\n                        width: 'calc(100% - 655px)',\r\n\r\n                        display: 'flex',\r\n                        flex: 1,\r\n                        flexDirection: 'column',\r\n                        alignItems: 'flex-start',\r\n                        // backgroundColor: 'red',\r\n                        // height: '-webkit-fill-available'\r\n                    }}>\r\n\r\n                        {(farmCalcProgress.current === farmCalcProgress.max && farmCalcProgress.current !== 0 && bestPlantCombo.prod && calcDone) && (\r\n                            <>\r\n                                {/* best potato */}\r\n                                {calcAFK && (\r\n                                    <div className='calcResult'>\r\n                                        <>\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {/* style={{ marginRight: '24px', display: 'flex', alignItems: 'center' }}> */}\r\n                                                <div style={{\r\n                                                    minWidth: '270px',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                    justifyContent: 'flex-end',\r\n                                                    marginRight: '2px'\r\n                                                }}>\r\n                                                    <div className='calcInfo'\r\n                                                        style={{\r\n                                                            margin: '-24px 0 16px 0'\r\n                                                        }}\r\n                                                    >\r\n                                                        <div>\r\n                                                            Best Potatoe Generation, {`${100}% Fries`}:\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='futurePicExplanation'>\r\n                                                        <div>\r\n                                                            Next PIC after {calcedFutureTime} hours + x hours\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            with {numSimulatedAutos} autos per plant\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                                {/* sadsd */}\r\n                                                {bestPlantCombo.pot.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`P${index + 1}: ${val} autos`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPot.result.plants[index].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPot.result.plants[index].prestige + bestPlantCombo.bestPot.result.plants[index].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPot.result.plants[index].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            <img\r\n                                                                             style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                             alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            \r\n                                                                             src={`/images/icons/prestige_star.png`}\r\n                                                                            />\r\n                                                                            {/* <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={`/images/icons/prestige_star.png`}\r\n                                                                                />\r\n                                                                            </div> */}\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPot.result.plants[index],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPot.result.result.finalModifiers,\r\n                                                                            // numAuto: bestPlantCombo.bestPic.result.combo[index]\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                }).reverse()}\r\n\r\n\r\n                                            </div>\r\n                                            {/* best raw pic levels */}\r\n                                            <div style={{\r\n                                                display: 'flex',\r\n                                                marginTop: '-6px',\r\n                                                alignItems: 'center'\r\n                                            }}>\r\n                                                <div style={{ minWidth: '270px', marginRight: '2px' }}>\r\n                                                    <div className='calcInfo' >\r\n                                                        <div>\r\n                                                            Most PIC (+{`${bestPlantCombo.bestPic.result.picStats.picLevel} -> ${helper.roundTwoDecimal(bestPlantCombo.bestPic.result.picStats.picPercent * 100)}%`})\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            {` ${helper.roundTwoDecimal(\r\n                                                                mathHelper.divideDecimal(bestPlantCombo.bestPic.finalFry, bestPlantCombo.bestProd.finalFry).toNumber()\r\n                                                                * 100)\r\n                                                                }% Fries`}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='futurePicExplanation'>\r\n                                                        <div>\r\n                                                            Next PIC after {calcedFutureTime} hours + x hours\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            with {numSimulatedAutos} autos per plant\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                {bestPlantCombo.pic.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`P${index + 1}: ${val} autos`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPic.result.plants[index].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPic.result.plants[index].prestige + bestPlantCombo.bestPic.result.plants[index].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPic.result.plants[index].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            <img \r\n                                                                            alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            src={`/images/icons/prestige_star.png`}\r\n                                                                            style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                            />\r\n                                                                            {/* <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={`/images/icons/prestige_star.png`}\r\n                                                                                />\r\n                                                                            </div> */}\r\n                                                                        </div>\r\n\r\n                                                                    )}\r\n\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPic.result.plants[index],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPic.result.result.finalModifiers,\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                }).reverse()}\r\n                                            </div>\r\n                                        </>\r\n                                    </div>\r\n                                )}\r\n\r\n\r\n                                {/* Best step by step breakdown */}\r\n                                {calcStep && (\r\n                                    <div className='calcResult'>\r\n                                        <>\r\n                                            {/* <div style={{ display: 'flex' }}>\r\n    \r\n                                                    <div style={{ minWidth: '270px', display: 'flex', justifyContent: 'flex-end', marginRight: '2px' }}>Best order, 100% Fries</div>\r\n                                                    {bestPlantCombo.bestPot.result.result.steps.map((val, index) => {\r\n    \r\n                                                        return <div className='bestSuggestion' >{\r\n                                                            `P${bestPlantCombo.bestPot.result.result.steps.length - index} for ${val.time > secondsHour ? helper.secondsToString(val.time) : helper.secondsToString(val.time)}`\r\n                                                        }</div>\r\n    \r\n                                                    })}\r\n                                                </div> */}\r\n\r\n\r\n                                            <div style={{ display: 'flex' }}>\r\n                                                {/* style={{ marginRight: '24px', display: 'flex', alignItems: 'center' }}> */}\r\n                                                <div style={{\r\n                                                    minWidth: '270px',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'column',\r\n                                                    justifyContent: 'flex-end',\r\n                                                    marginRight: '2px'\r\n                                                }}>\r\n                                                    <div className='calcInfo'\r\n                                                        style={{\r\n                                                            margin: '-24px 0 16px 0'\r\n                                                        }}\r\n                                                    >\r\n                                                        <div>\r\n                                                            Best order, 100% Fries\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className='futurePicExplanation'>\r\n                                                        <div>\r\n                                                            Next PIC after {calcedFutureTime} hours + x hours\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            with {numSimulatedAutos} autos per plant\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                                {bestPlantCombo.bestPot.result.result.steps.map((val, index) => {\r\n                                                    return (\r\n                                                        <div className='suggestionHolder' key={index}>\r\n                                                            <MouseOverPopover extraClasses={'suggestionHolder'} key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n                                                                <div className='autoPicSuggestion'>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            justifyContent: 'center'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {`P${bestPlantCombo.bestPot.result.result.steps.length - index} for ${val.time > secondsHour ? helper.secondsToString(val.time) : helper.secondsToString(val.time)}`}\r\n                                                                    </div>\r\n                                                                    {bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].picIncrease > 0 && (\r\n                                                                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 0 -2px -3px',\r\n                                                                                    fontSize: '22px'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                +\r\n                                                                            </div>\r\n                                                                            <div\r\n                                                                                style={{\r\n                                                                                    margin: '-6px 2px -2px 0',\r\n                                                                                    fontSize: '22px',\r\n                                                                                    display: 'flex',\r\n                                                                                    alignContent: 'center'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    (bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].prestige + bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].picIncrease)\r\n                                                                                    - bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1].prestige\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                            <img \r\n                                                                            alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            src={`/images/icons/prestige_star.png`}\r\n                                                                            style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                            />\r\n                                                                            {/* <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={`/images/icons/prestige_star.png`}\r\n                                                                                />\r\n                                                                            </div> */}\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </div>\r\n\r\n                                                                <div className='futurePicHolder'>\r\n                                                                    {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                        bestPlantCombo.bestPot.result.plants[bestPlantCombo.bestPot.result.result.steps.length - index - 1],\r\n                                                                        {\r\n                                                                            ...bestPlantCombo.bestPot.result.result.finalModifiers,\r\n                                                                            // numAuto: bestPlantCombo.bestPic.result.combo[index]\r\n                                                                            numAuto: numSimulatedAutos\r\n                                                                        }\r\n                                                                    ).remainingTime)\r\n                                                                        }`}\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        </div>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n\r\n\r\n\r\n\r\n                                            {/* Best PIC */}\r\n                                            {bestPlantCombo.bestPic.pic > 0 && (\r\n                                                <div style={{ display: 'flex', marginTop: '6px', alignItems: 'center' }}>\r\n                                                    <div style={{ minWidth: '270px' }}>\r\n                                                        <div className='calcInfo' >\r\n                                                            <div>\r\n                                                                Most PIC (+{`${bestPlantCombo.bestPic.result.picStats.picLevel} -> ${helper.roundTwoDecimal(bestPlantCombo.bestPic.result.picStats.picPercent * 100)}%`})\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                {` ${helper.roundTwoDecimal(\r\n                                                                    mathHelper.divideDecimal(bestPlantCombo.bestPic.finalFry, bestPlantCombo.bestProd.finalFry).toNumber()\r\n                                                                    * 100)\r\n                                                                    }% Fries`}:\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                        <div className='futurePicExplanation'>\r\n                                                            <div>\r\n                                                                Next PIC after {calcedFutureTime} hours + x hours\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                with {numSimulatedAutos} autos per plant\r\n                                                            </div>\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                    {bestPlantCombo.bestPic.result.result.steps.map((val, index) => {\r\n\r\n                                                        return (\r\n                                                            <MouseOverPopover key={'popover' + index} tooltip={\r\n                                                                <div>\r\n                                                                    <div>\r\n                                                                        <div>\r\n                                                                            Show how many PIC levels are gained (if any) and the time to hit the NEXT pic with your MAX num autos used\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }>\r\n\r\n\r\n                                                                <div className='suggestionHolder'>\r\n                                                                    <div className='autoPicSuggestion'>\r\n                                                                        {\r\n                                                                            `P${bestPlantCombo.bestPic.result.result.steps.length - index} for ${val.time > secondsHour ? helper.secondsToString(val.time) : helper.secondsToString(val.time)}`\r\n                                                                        }\r\n                                                                        {bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].picIncrease > 0 && (\r\n                                                                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        margin: '-6px 0 -2px -3px',\r\n                                                                                        fontSize: '22px'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    +\r\n                                                                                </div>\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        margin: '-6px 2px -2px 0',\r\n                                                                                        fontSize: '22px',\r\n                                                                                        display: 'flex',\r\n                                                                                        alignContent: 'center'\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {\r\n                                                                                        (bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].prestige + bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].picIncrease)\r\n                                                                                        - bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index].prestige\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <img \r\n                                                                            alt='prestige star, yellow star in a red/orange circle'\r\n                                                                            src={`/images/icons/prestige_star.png`}\r\n                                                                            style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}\r\n                                                                            />\r\n                                                                            {/* <div style={{ height: '24px', width: '24px', marginTop: '-4px', position: 'relative' }}>\r\n                                                                                <Image\r\n                                                                                    alt='prestige star, yellow star in a red/orange circle'\r\n                                                                                    fill\r\n                                                                                    src={`/images/icons/prestige_star.png`}\r\n                                                                                />\r\n                                                                            </div> */}\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </div>\r\n\r\n\r\n                                                                    <div className='futurePicHolder'>\r\n                                                                        {`${helper.secondsToString(farmingHelper.calcTimeTillPrestige(\r\n                                                                            bestPlantCombo.bestPic.result.plants[bestPlantCombo.bestPic.result.plants.length - 1 - index],\r\n                                                                            {\r\n                                                                                ...bestPlantCombo.bestPic.result.result.finalModifiers,\r\n                                                                                // numAuto: bestPlantCombo.bestPic.result.combo[bestPlantCombo.bestPic.result.plants.length - 1 - index]\r\n                                                                                numAuto: numSimulatedAutos\r\n                                                                            }\r\n                                                                        ).remainingTime)\r\n                                                                            }`}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </MouseOverPopover>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                        </>\r\n                                    </div>\r\n                                )}\r\n                            </>\r\n                        )}\r\n\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flex: 1,\r\n                            flexDirection: 'column',\r\n                            position: 'relative',\r\n                            minHeight: '400px',\r\n                            width: '100%'\r\n                        }}>\r\n\r\n\r\n                            {/* Graph stuff */}\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flex: 1,\r\n                                position: 'absolute',\r\n                                height: '99%',\r\n                                width: '100%'\r\n                            }}>\r\n                                <Graph\r\n                                    graphObjects={graphObjects}\r\n                                    runningGraphObjects={runningGraphObjects}\r\n                                    showCalc={(farmCalcProgress.current === farmCalcProgress.max && farmCalcProgress.current !== 0 && bestPlantCombo.prod && calcDone)}\r\n                                    yScale={yScale}\r\n                                    bestPic={!!bestPlantCombo?.bestPic?.pic}\r\n                                    expDiff={expDiff}\r\n                                    expDiffFry={expDiffFry}\r\n                                    displayPicPerc={displayPicPerc}\r\n                                    calcDone={calcDone}\r\n                                    calcAFK={calcAFK}\r\n                                    showFries={showFries}\r\n                                    showHP={showHP}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default FarmingLanding;\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\farming\\Timer.jsx",["135","136"],[],"\"use client\";\r\n\r\nimport { memo, useState, useEffect } from \"react\";\r\nimport { useTimer } from \"react-timer-hook\";\r\nimport { useGlobalAudioPlayer } from \"react-use-audio-player\";\r\nimport useLocalStorage from \"use-local-storage\";\r\nimport addNotification from \"react-push-notification\";\r\n\r\nconst Timer = () => {\r\n  const [loopAlarm, setLoopAlarm] = useLocalStorage(\"loopAlarm\", false);\r\n  const [loopAlarmClient, setLoopAlarmClient] = useState(false);\r\n  useEffect(() => {\r\n    setLoopAlarmClient(loopAlarmClient);\r\n  }, [loopAlarm]);\r\n\r\n  const [innerDays, setInnerDays] = useState(0);\r\n  const [innerHours, setInnerHours] = useState(0);\r\n  const [innerMinutes, setInnerMinutes] = useState(0);\r\n  const [innerSeconds, setInnerSeconds] = useState(0);\r\n  const [initialStart, setInitialStart] = useState(true);\r\n  const [finished, setFinished] = useState(false);\r\n\r\n  let timeIncrease =\r\n    (innerDays * 3600 * 24 +\r\n      innerHours * 3600 +\r\n      innerMinutes * 60 +\r\n      innerSeconds) *\r\n    1000;\r\n  let time = new Date();\r\n  time = new Date(time.getTime() + timeIncrease);\r\n  //\r\n\r\n  const { load, play, loop } = useGlobalAudioPlayer();\r\n  useEffect(() => {\r\n    load(\"/sounds/alarm.mp3\", {\r\n      autoplay: false,\r\n    });\r\n    // setTimeout(() => { loop(loopAlarmClient) }, 1000)\r\n  }, []);\r\n\r\n  const {\r\n    totalSeconds,\r\n    seconds,\r\n    minutes,\r\n    hours,\r\n    days,\r\n    isRunning,\r\n    start,\r\n    pause,\r\n    resume,\r\n    restart,\r\n  } = useTimer({\r\n    expiryTimestamp: time,\r\n    onExpire: () => {\r\n      if (initialStart) return;\r\n      console.warn(\"Timer Finished\");\r\n      setFinished(true);\r\n      play();\r\n      addNotification({\r\n        title: \"FAPI Timer Finished\",\r\n        // subtitle: 'This is a subtitle',\r\n        // message: 'This is a very long message',\r\n        // theme: 'darkblue',\r\n        native: true, // when using native, your OS will handle theming.\r\n      });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Timer inputs */}\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        {/* days */}\r\n        <div style={{ display: \"flex\" }}>\r\n          <input\r\n            type=\"number\"\r\n            className=\"prepNumber\"\r\n            value={innerDays}\r\n            style={{\r\n              width: \"33px\",\r\n            }}\r\n            onChange={(e) => {\r\n              try {\r\n                let x = Number(e.target.value);\r\n                x = Math.floor(x);\r\n                if (x < 0 || x > 99) {\r\n                  return;\r\n                }\r\n                setInnerDays(x);\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n            }}\r\n            placeholder={innerDays + \"\"}\r\n            min=\"0\"\r\n            max=\"99\"\r\n          />\r\n          <div>d :</div>\r\n        </div>\r\n        {/* hours */}\r\n        <div style={{ display: \"flex\", margin: \"0 3px 0 6px\" }}>\r\n          <input\r\n            type=\"number\"\r\n            className=\"prepNumber\"\r\n            value={innerHours}\r\n            style={{\r\n              width: \"33px\",\r\n            }}\r\n            onChange={(e) => {\r\n              try {\r\n                let x = Number(e.target.value);\r\n                x = Math.floor(x);\r\n                if (x < 0 || x > 99) {\r\n                  return;\r\n                }\r\n                setInnerHours(x);\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n            }}\r\n            placeholder={innerHours + \"\"}\r\n            min=\"0\"\r\n            max=\"99\"\r\n          />\r\n          <div>h :</div>\r\n        </div>\r\n        {/* minutes */}\r\n        <div style={{ display: \"flex\", marginLeft: \"3px\" }}>\r\n          <input\r\n            type=\"number\"\r\n            className=\"prepNumber\"\r\n            value={innerMinutes}\r\n            style={{\r\n              width: \"33px\",\r\n            }}\r\n            onChange={(e) => {\r\n              try {\r\n                let x = Number(e.target.value);\r\n                x = Math.floor(x);\r\n                if (x < 0 || x > 99) {\r\n                  return;\r\n                }\r\n                setInnerMinutes(x);\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n            }}\r\n            placeholder={innerMinutes + \"\"}\r\n            min=\"0\"\r\n            max=\"99\"\r\n          />\r\n          <div>{`m :`}</div>\r\n        </div>\r\n        {/* seconds */}\r\n        <div style={{ display: \"flex\", margin: \"0 0 0 6px\" }}>\r\n          <input\r\n            type=\"number\"\r\n            className=\"prepNumber\"\r\n            value={innerSeconds}\r\n            style={{\r\n              width: \"33px\",\r\n            }}\r\n            onChange={(e) => {\r\n              try {\r\n                let x = Number(e.target.value);\r\n                x = Math.floor(x);\r\n                if (x < 0 || x > 99) {\r\n                  return;\r\n                }\r\n                setInnerSeconds(x);\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n            }}\r\n            placeholder={innerSeconds + \"\"}\r\n            min=\"0\"\r\n            max=\"99\"\r\n          />\r\n          <div>s</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Timer controls */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          marginTop: \"6px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginRight: \"6px\",\r\n          }}\r\n        >\r\n          <div>Loop Alarm</div>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={loopAlarmClient}\r\n            onChange={(e) => {\r\n              setLoopAlarm(e.target.checked);\r\n              loop(e.target.checked);\r\n            }}\r\n          />\r\n        </div>\r\n        {/* start */}\r\n        <button\r\n          onClick={(e) => {\r\n            if (finished) {\r\n              let time = new Date();\r\n              time = new Date(time.getTime() + timeIncrease);\r\n              restart(time);\r\n              setFinished(false);\r\n            } else if (initialStart) {\r\n              let time = new Date();\r\n              time = new Date(time.getTime() + timeIncrease);\r\n              setInitialStart(false);\r\n              restart(time);\r\n            }\r\n            // start(e);\r\n\r\n            // if (isRunning) {\r\n            // restart(time);\r\n            // }\r\n            // else {\r\n            else if (!isRunning) {\r\n              resume(e);\r\n            }\r\n            // }\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n        {/* Pause */}\r\n        <button style={{ margin: \"0 6px\" }} onClick={pause}>\r\n          Pause\r\n        </button>\r\n        {/* <button onClick={resume}>Resume</button> */}\r\n        <button\r\n          onClick={() => {\r\n            // Restarts to 5 minutes timer\r\n            // const time = new Date();\r\n            // time.setSeconds(time.getSeconds() + 300);\r\n            let time = new Date();\r\n            time = new Date(time.getTime() + timeIncrease);\r\n            restart(time);\r\n          }}\r\n        >\r\n          Restart\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          fontSize: \"20px\",\r\n          display: \"flex\",\r\n          margin: \"6px 0 0 0\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div>\r\n          <span>{days + \"d\"}</span>\r\n        </div>\r\n        :\r\n        <div>\r\n          <span>{hours + \"h\"}</span>\r\n        </div>\r\n        :\r\n        <div>\r\n          <span>{minutes + \"m\"}</span>\r\n        </div>\r\n        :\r\n        <div>\r\n          <span>{seconds + \"s\"}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Timer, function (old, curr) {\r\n  return true; //nothing changed\r\n});\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\layout.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\new\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page.js",["137"],[],"\"use client\"\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport Image from 'next/image';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nimport './App.css';\r\n\r\nimport DefaultSave from './util/tempSave.json';\r\nimport useLocalStorage from \"use-local-storage\";\r\n\r\nimport pako from 'pako';\r\nimport MouseOverPopover from \"./util/Tooltip.jsx\";\r\n// import infoIcon from '/images/icons/info_lightgray.svg';\r\n// import backgroundImage from '/public/images/coming_soon.png';\r\n\r\nimport ReactGA from \"react-ga4\";\r\n\r\n// const [customPresets, setCustomPresets] = useLocalStorage(`customPresets`, -1);\r\n// const [customPresetsClient, setCustomPresetsClient] = useState(-1);\r\n\r\n// useEffect(() => {\r\n//   setCustomPresetsClient(customPresets)\r\n// }, [customPresets])\r\n\r\n\r\nexport default function Home() {\r\n\r\n  const [userData, setUserData] = useLocalStorage('userData', DefaultSave);\r\n  const router = useRouter();\r\n  useEffect(() => {\r\n    let timeout = setTimeout(() => {\r\n\r\n      ReactGA.send({ hitType: \"pageview\", page: \"/file_upload\", title: \"Landing Page (Upload)\" });\r\n    }, 100);\r\n    return () => { clearTimeout(timeout) };\r\n  }, []);\r\n\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.onload = (event) => {\r\n      const compressedData = new Uint8Array(event.target.result);\r\n      const decompressedData = pako.inflate(compressedData);\r\n      const textDecoder = new TextDecoder('utf-8');\r\n      const decodedString = textDecoder.decode(decompressedData);\r\n\r\n      const startPosition = decodedString.indexOf('{');\r\n      const endPosition = decodedString.lastIndexOf('}') + 1;\r\n      const jsonString = decodedString.slice(startPosition, endPosition);\r\n\r\n      try {\r\n        const parsedJson = JSON.parse(jsonString);\r\n        setUserData(parsedJson);\r\n        console.log(parsedJson);\r\n        console.log(`trying to redirect`)\r\n        return router.push('/page_selection');\r\n      } catch (error) {\r\n        console.error('Invalid JSON:', error);\r\n      }\r\n    };\r\n\r\n    fileReader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  const [forceOpen, setForceOpen] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flex: '1',\r\n        backgroundColor: 'rgba(0,0,0,1)',\r\n        position: 'relative',\r\n        paddingLeft: '6px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n      }}\r\n    >\r\n\r\n      <img style={{\r\n        position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', zIndex: '1',\r\n        opacity: '0.3'\r\n      }} alt='fullscreen picture of a Farmer Against Potatoes Idle game'\r\n        src={'/images/coming_soon.png'}\r\n      />\r\n      {/* <div style={{\r\n        position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', zIndex: '1',\r\n        opacity: '0.3'\r\n      }}>\r\n        <Image alt='fullscreen picture of a Farmer Against Potatoes Idle game'\r\n          src={'/images/coming_soon.png'}\r\n          // src={backgroundImage} \r\n          fill />\r\n      </div> */}\r\n\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          marginTop: 'calc(0px - 50vh)',\r\n          zIndex: '2'\r\n        }}\r\n      >\r\n        <MouseOverPopover\r\n          forceOpen={forceOpen}\r\n          setForceOpen={setForceOpen}\r\n          tooltip={\r\n            <div\r\n              onMouseEnter={(e) => { if (!forceOpen) setForceOpen(true) }}\r\n              onMouseLeave={(e) => { if (forceOpen) setForceOpen(false) }}\r\n            >\r\n              <h3 style={{ marginTop: '6px', marginBottom: '12px' }}>Your save file can be found at:</h3>\r\n              <div style={{ display: 'flex' }}>\r\n                <div\r\n                  style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                  PC:\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    %APPDATA%\\your_username_here\\LocalLow\\Oni Gaming\\Farmer Against Potatoes Idle\\fapi-save.txt\r\n                  </div>\r\n                  <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n                    or you can copy:\r\n                  </div>\r\n                  <div>\r\n                    %APPDATA%\\..\\LocalLow\\Oni Gaming\\Farmer Against Potatoes Idle\\fapi-save.txt\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div style={{ display: 'flex', marginTop: '12px' }}>\r\n                <div\r\n                  style={{ fontWeight: 'bold', marginRight: '6px' }}>\r\n                  Mobile:\r\n                </div>\r\n                <div>\r\n                  /storage/emulated/0/Android/data/com.oninou.FAPI/files/fapi-save.txt\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }>\r\n          <div\r\n            onMouseEnter={(e) => { if (!forceOpen) setForceOpen(true) }}\r\n            onMouseLeave={(e) => { if (forceOpen) setForceOpen(false) }}\r\n            style={{ display: 'flex', alignItems: 'center' }}>\r\n            <div className=\"mediumImportantText blackTextStroke\" style={{ margin: '0 0 0 0', fontSize: '60px', fontWeight: 'bold' }}>Upload save file to view calculator</div>\r\n            <div style={{ position: 'relative', height: '36px', width: '36px', marginLeft: '6px', marginTop: '6px' }}>\r\n              <Image alt='on hover I in a cirlce icon, shows more information on hover' src={'/images/icons/info_lightgray.svg'}\r\n                fill />\r\n            </div>\r\n          </div>\r\n        </MouseOverPopover>\r\n        <div className=\"mediumImportantText blackTextStroke\" style={{ margin: '0 0 0 0', fontSize: '35px', fontWeight: 'bold', textStroke: '' }}>Warning: contains spoilers!</div>\r\n\r\n        <div style={{ marginTop: '16px', }}>\r\n          <input style={{\r\n            width: '150px'\r\n          }} type=\"file\" onChange={handleFileUpload} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\page_selection\\page_card.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Dot.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\farmingHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\header.jsx",["138","139"],[],"import Image from \"next/image\";\r\n\r\nconst Header = ({ }) => {\r\n  return (\r\n    <div\r\n      className=\"header\"\r\n      style={{\r\n        height: \"36px\",\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        alignItems: \"center\",\r\n        padding: \"0 0 0 3px\",\r\n        margin: \"0 0 0 0\",\r\n      }}\r\n    >\r\n      <img\r\n        style={{ height: \"31px\", width: \"156px\", position: \"relative\" }}\r\n        alt='in game font spelling \"Farmer\"'\r\n        src={\"/images/farmer2.png\"}\r\n      />\r\n      {/* <div style={{ height: \"31px\", width: \"156px\", position: \"relative\" }}>\r\n        <Image\r\n          alt='in game font spelling \"Farmer\"'\r\n          src={\"/images/farmer2.png\"}\r\n          fill\r\n        />\r\n      </div> */}\r\n\r\n      <div\r\n        className=\"dobra importantText\"\r\n        style={{\r\n          margin: \"0 6px\",\r\n        }}\r\n      >\r\n        Against\r\n      </div>\r\n      <img\r\n        style={{ height: \"31px\", width: \"192px\", position: \"relative\" }}\r\n        alt='in game font spelling \"Potatoes\"'\r\n        src={\"/images/potatoes.png\"}\r\n      />\r\n\r\n      {/* <div style={{ height: \"31px\", width: \"192px\", position: \"relative\" }}>\r\n        <Image\r\n          alt='in game font spelling \"Potatoes\"'\r\n          src={\"/images/potatoes.png\"}\r\n          fill\r\n        />\r\n      </div> */}\r\n      <div\r\n        className=\"dobra importantText\"\r\n        style={{\r\n          marginLeft: \"6px\",\r\n        }}\r\n      >\r\n        Idle gameplay planner\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\helper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\math.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\navBar.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\petHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\reincHelper.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\search.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\Tooltip.jsx",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\page.js",["140"],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\expeditions\\PetItem.js",["141","142"],[],"import React from 'react';\r\nimport './PetItem.css';\r\nimport helper from '../util/helper.js'\r\n\r\nimport MouseOverPopover from \"../util/Tooltip\";\r\nimport { BonusMap } from \"../util/itemMapping\";\r\nimport petHelper from '../util/petHelper.js';\r\n\r\nconst filterBonuses = (bonuses, filterFn) => {\r\n    return bonuses\r\n        .filter(filterFn);\r\n};\r\n\r\nconst PetItem = ({ petData, isSelected, onClick, data, weightMap, petScoreFn, defaultRank, borderActive, enabledBonusHighlight, fullPetData, showNameOnly, grayBackground, circleBorder }) => {\r\n    if (!!data === false) return <div></div>;\r\n    const { petId, location, img, name } = petData;\r\n\r\n    // Find the pet from the data.PetsCollection\r\n    const pet = data.PetsCollection.find(p => p.ID === petId);\r\n\r\n    if (!pet) return null; // In case the pet is not found in the collection\r\n\r\n    const rank = defaultRank ? defaultRank : pet.Rank;\r\n    const level = pet.Level;\r\n    const totalScore = Number(\r\n        Number(data?.PetDamageBonuses) * pet.BaseDungeonDamage * (1.0 + rank * 0.05) * 5\r\n    ).toExponential(2);\r\n\r\n    // const weightedBonuses = filterBonuses(pet.BonusList, (bonus) => {\r\n    //     return bonus.ID < 1000;\r\n    // }).reduce((accum, activePetBonus) => {\r\n    //     const {ID, } = activePetBonus;\r\n    //     const result = weightMap[ID]?.weight;\r\n    //     if (result) accum += result;\r\n    //     return accum;\r\n    // }, 0);\r\n\r\n    const weightedActiveScore = petScoreFn ? petScoreFn(pet) : 0;\r\n\r\n    const section1Bonuses = (\r\n        <ul\r\n            style={{ margin: '0 0 0 0' }}\r\n        >\r\n            {filterBonuses(pet.BonusList, (bonus) => {\r\n                return bonus.ID < 1000;\r\n            }).map((activePetBonus, i) => {\r\n                const bonusBase = Number(1.0 + activePetBonus.Gain);\r\n                const bonusPower = Number(pet.Level === 0 ? 1 : pet.Level);\r\n                const result = (Math.pow(bonusBase, bonusPower) - 1) * (1 + .02 * Number(pet.Rank));\r\n\r\n                return (\r\n                    <li key={i}>\r\n                        {BonusMap[activePetBonus.ID]?.label}: {result.toExponential(2)}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n\r\n    const section2Bonuses = (\r\n        <ul\r\n            style={{ margin: '0 0 0 0' }}\r\n        >\r\n            {filterBonuses(pet.BonusList, (bonus) => bonus.ID >= 1000 && bonus.ID < 5000)\r\n                .map((activePetBonus, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            {BonusMap[activePetBonus.ID]?.label}: {Number(activePetBonus.Power).toExponential(2)}\r\n                        </li>\r\n                    );\r\n                })}\r\n        </ul>\r\n    );\r\n\r\n\r\n    let numHighlights = [];\r\n    if (enabledBonusHighlight) {\r\n        for (const [key, value] of Object.entries(enabledBonusHighlight)) {\r\n            if (value) {\r\n                let found = fullPetData.BonusList.find((a) => a.ID === Number(key));\r\n                if (found) {\r\n                    numHighlights.push(key)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const scalingOverrides = {\r\n        'Niord': '65px',\r\n        'Cocorico': '63px',\r\n        'Apollo': '60px',\r\n        'Abby': '60px'\r\n    }\r\n\r\n    let maxDimension = '';\r\n    if (circleBorder) {\r\n        if (scalingOverrides[name]) {\r\n            maxDimension = scalingOverrides[name];\r\n        }\r\n        else {\r\n            maxDimension = '75px';\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <MouseOverPopover\r\n            tooltip={\r\n                <div\r\n                    className=\"tooltip-custom \"\r\n                >\r\n                    <h3\r\n                        style={{ marginTop: '0' }}\r\n                    >\r\n                        <div>\r\n\r\n                            {name}  ({totalScore})\r\n                        </div>\r\n                        <div>\r\n                            (Level: {level}) (Rank: {rank})  ({location})\r\n\r\n                        </div>\r\n                    </h3>\r\n                    <div>\r\n                        <h4\r\n                            style={{ margin: '6px 0 6px 0' }}\r\n                        >Active Bonuses</h4>\r\n                        {section1Bonuses}\r\n                    </div>\r\n                    <div>\r\n                        <h4\r\n                            style={{ margin: '6px 0 6px 0' }}\r\n                        >Expedition Bonuses:</h4>\r\n                        {section2Bonuses}\r\n                    </div>\r\n                </div>\r\n            }>\r\n            {!showNameOnly && (\r\n                <div style={\r\n                    circleBorder ? {\r\n                        borderRadius: '45px',\r\n                        border: '2px solid black',\r\n                        overflow: 'hidden',\r\n                        // position: 'relative',\r\n                        width: '80px',\r\n                        height: '80px',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }\r\n                        : {}}>\r\n                    <div\r\n                        key={petId}\r\n                        onClick={onClick}\r\n                        style={{\r\n                            display: 'flex',\r\n                            // position: circleBorder ? 'absolute' : '',\r\n                            // top: circleBorder ? '-10px' : ''\r\n                        }}\r\n                        className={`item-tile${pet.Type === 1 ? '-ground ' : '-air '} ${isSelected ? '' : 'unselected'}`}\r\n                    // className={`item-tile ${isSelected ? '' : 'unselected'}`}\r\n                    >\r\n                        <div\r\n                            className=\"item-image-container\"\r\n                            style={{\r\n                                border: borderActive ? 'black 1px solid' : '',\r\n                                position: 'relative',\r\n                                display: 'flex',\r\n                                justifyContent: 'center',\r\n                                maxHeight: maxDimension,\r\n                                maxWidth: maxDimension\r\n                            }}>\r\n                            {numHighlights.map((item, index) => {\r\n                                return (\r\n                                <div\r\n                                key={index}\r\n                                    style={{\r\n                                        background: helper.bonusColorMap[item].color,\r\n                                        position: 'absolute',\r\n                                        top: '0%',\r\n                                        left: `${(100 / numHighlights.length) * index}%`,\r\n                                        height: '100%',\r\n                                        width: `${100 / numHighlights.length}%`,\r\n                                        zIndex: 1\r\n                                    }}\r\n                                >\r\n\r\n                                </div>)\r\n                            })}\r\n                            {/* <div className=\"item-image\"> */}\r\n                            <img alt={`in game image of ${name}`} src={img}\r\n                                className={circleBorder ? '' : 'item-image'}\r\n                                style={{\r\n                                    zIndex: '2',\r\n                                    objectFit: 'contain',\r\n                                    maxHeight: circleBorder ? maxDimension : '',\r\n                                    maxWidth: circleBorder ? maxDimension : '',\r\n                                }}\r\n                            />\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {showNameOnly && (\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        backgroundColor: grayBackground ? 'lightgray' : ''\r\n                    }}>\r\n                    {`(${pet.Type === 1 ? 'Ground' : 'Air'}) ${name}`}\r\n                </div>\r\n            )}\r\n\r\n        </MouseOverPopover>\r\n    );\r\n};\r\n\r\nconst StaticPetItem = ({ petData, highlight, showNameOnly }) => {\r\n    const { petId, location, img, name, pet } = petData;\r\n    //ss\r\n\r\n    const section1Bonuses = (\r\n        <ul\r\n            style={{ margin: '0 0 0 0' }}\r\n        >\r\n            {filterBonuses(pet.BonusList, (bonus) => {\r\n                return bonus.ID < 1000;\r\n            }).map((activePetBonus, i) => {\r\n                const bonusBase = Number(1.0 + activePetBonus.Gain);\r\n                const bonusPower = Number(pet.Level === 0 ? 1 : pet.Level);\r\n                const result = (Math.pow(bonusBase, bonusPower) - 1) * (1 + .02 * Number(pet.Rank));\r\n\r\n                return (\r\n                    <li key={i}>\r\n                        {BonusMap[activePetBonus.ID]?.label}: {result.toExponential(2)}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n\r\n    const section2Bonuses = (\r\n        <ul\r\n            style={{ margin: '0 0 0 0' }}\r\n        >\r\n            {filterBonuses(pet.BonusList, (bonus) => bonus.ID >= 1000 && bonus.ID < 5000)\r\n                .map((activePetBonus, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            {BonusMap[activePetBonus.ID]?.label}: {Number(activePetBonus.Power).toExponential(2)}\r\n                        </li>\r\n                    );\r\n                })}\r\n        </ul>\r\n    );\r\n\r\n    let baseDmg = petHelper.calculatePetBaseDamage(pet, pet.Rank);\r\n    if (baseDmg < 100) {\r\n        baseDmg = helper.roundInt(baseDmg);\r\n    }\r\n    else {\r\n        baseDmg = baseDmg.toExponential(2);\r\n    }\r\n\r\n\r\n    return (\r\n        // <div key={petId} className={`static-item-tile`}>\r\n        // <div\r\n        //     className=\"item-image-container\"\r\n        //     style={{\r\n        //         position: 'relative'\r\n        //     }}>\r\n\r\n        <MouseOverPopover\r\n            tooltip={\r\n                <div\r\n                    className=\"tooltip-custom \"\r\n                >\r\n                    <h3\r\n                        style={{ marginTop: '0', marginBottom: '3px', textAlign: 'center' }}\r\n                    >\r\n                        {`${name} -> ${location}`}\r\n                    </h3>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                        <div>\r\n                            {`Rank: ${pet.Rank}`}\r\n                        </div>\r\n                        <div>\r\n                            {`Level: ${pet.Level}`}\r\n                        </div>\r\n                        <div>\r\n                            {`Damage: ${baseDmg}`}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h4\r\n                            style={{ margin: '6px 0 6px 0' }}\r\n                        >Active Bonuses</h4>\r\n                        {section1Bonuses}\r\n                    </div>\r\n                    <div>\r\n                        <h4\r\n                            style={{ margin: '6px 0 6px 0' }}\r\n                        >Expedition Bonuses:</h4>\r\n                        {section2Bonuses}\r\n                    </div>\r\n                </div>\r\n            }>\r\n            {!showNameOnly && (\r\n                <img alt={`in game image of ${name}`} src={img} className='item-image' />\r\n            )}\r\n\r\n            {showNameOnly && (\r\n                <>\r\n                    {name}\r\n                </>\r\n            )}\r\n\r\n        </MouseOverPopover>\r\n\r\n\r\n        //  </div> \r\n        // </div>\r\n    );\r\n};\r\n\r\nexport { StaticPetItem };\r\n\r\nexport default PetItem;\r\n","C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\itemMapping.js",[],[],"C:\\Users\\denys\\Documents\\GitHub\\gameplay-planner\\src\\app\\util\\ItemSelection.js",[],[],{"ruleId":"143","severity":1,"message":"144","line":100,"column":9,"nodeType":"145","endLine":110,"endColumn":11},{"ruleId":"143","severity":1,"message":"144","line":369,"column":17,"nodeType":"145","endLine":378,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":434,"column":17,"nodeType":"145","endLine":443,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":2252,"column":77,"nodeType":"145","endLine":2257,"endColumn":79},{"ruleId":"143","severity":1,"message":"144","line":2359,"column":77,"nodeType":"145","endLine":2363,"endColumn":79},{"ruleId":"143","severity":1,"message":"144","line":2489,"column":77,"nodeType":"145","endLine":2493,"endColumn":79},{"ruleId":"143","severity":1,"message":"144","line":2593,"column":81,"nodeType":"145","endLine":2597,"endColumn":79},{"ruleId":"146","severity":1,"message":"147","line":14,"column":6,"nodeType":"148","endLine":14,"endColumn":17,"suggestions":"149"},{"ruleId":"146","severity":1,"message":"150","line":39,"column":6,"nodeType":"148","endLine":39,"endColumn":8,"suggestions":"151"},{"ruleId":"143","severity":1,"message":"144","line":82,"column":7,"nodeType":"145","endLine":87,"endColumn":9},{"ruleId":"143","severity":1,"message":"144","line":16,"column":7,"nodeType":"145","endLine":20,"endColumn":9},{"ruleId":"143","severity":1,"message":"144","line":37,"column":7,"nodeType":"145","endLine":41,"endColumn":9},{"ruleId":"143","severity":1,"message":"144","line":756,"column":37,"nodeType":"145","endLine":756,"endColumn":149},{"ruleId":"143","severity":1,"message":"144","line":191,"column":29,"nodeType":"145","endLine":199,"endColumn":31},{"ruleId":"143","severity":1,"message":"144","line":312,"column":17,"nodeType":"145","endLine":312,"endColumn":90},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loopAlarmClient'. Either include it or remove the dependency array. You can also do a functional update 'setLoopAlarmClient(l => ...)' if you only need 'loopAlarmClient' in the 'setLoopAlarmClient' call.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",["153"],{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [loopAlarm, loopAlarmClient]",{"range":"158","text":"159"},"Update the dependencies array to be: [load]",{"range":"160","text":"161"},[518,529],"[loopAlarm, loopAlarmClient]",[1293,1295],"[load]"]